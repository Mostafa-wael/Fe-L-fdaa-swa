.model COMPACT
;///////////////////////////////Macros////////////////////////////////////
editDrawPrams MACRO shape, sizeX, sizeY, offsetX, offsetY
	              MOV AX, sizeX
	              MOV shapeSizeX, AX
	              MOV AX, sizeY
	              MOV shapeSizeY, AX
	              MOV AX, offsetY
	              MOV shapeOffsetY, AX
			
	              LEA SI, shape
	              MOV AX, offsetX
	              MOV shapeOffsetX, AX
ENDM
delay MACRO duration
	              local outerLoop
	              local innerLoop
	              local innerLoopDone
	              local done
	              push  Cx
	              push  bx
	outerLoop:    
	              cmp   cx, duration
	              jz    done
	              mov   bx, 0
	innerLoop:    
	              cmp   bx, duration
	              jz    innerLoopDone
	              inc   bx
	              jmp   innerLoop
	innerLoopDone:
	              inc   cx
	              jmp   outerLoop
	done:         
	              pop   bx
	              pop   cx

endm
clearWholeScreen MACRO
	                 mov ah, 0
	                 mov al, 3
	                 INT 10H  	;FOR VIDEO DISPLAY
	ENDM
inputToMoveShip macro UP, DOWN, LEFT, RIGHT, FIRE_BTN, movShip_label		; pass the keys and the label to jump to
	                cmp ah,UP
	                jz  movShip_label

	                cmp ah,DOWN
	                jz  movShip_label

	                cmp ah,LEFT
	                jz  movShip_label

	                cmp ah,RIGHT
	                jz  movShip_label

	                cmp ah, FIRE_BTN
	                jz  movShip_label
ENDM
;///////////////////////////////Macros////////////////////////////////////
;///////////////////////////////Data Initializations////////////////////////////////////
.data
	; keys
	key_upArrow              equ         048h
	key_downArrow            equ         050h
	key_leftArrow            equ         04Bh
	key_rightArrow           equ         04Dh

	key_enter                equ         01ch
	key_esc                  equ         1Bh

	key_w                    equ         11h
	key_s                    equ         1FH
	key_a                    equ         1EH
	key_d                    equ         20h
	key_f                    equ         21h
	; constrains depend on the graphics mode
	graphicsModeAX           equ         4F02h
	graphicsModeBX           equ         0100h
	delayDuration            equ         260
	;DRAW FUNCS PARAMETERS
	RECXEND                  DW          640
	RECYEND                  DW          400
	RECXSTART                DW          0
	RECYSTART                DW          0
	RECCOLOR                 DB          0B3h
	;
	BorderXEND               DW          00
	BorderYEND               DW          00
	BorderXSTART             DW          00
	BorderYSTART             DW          00
	BorderBRIGHTColor        DB          00
	BorderDARKColor          DB          00
	BorderMIDDLED1           DW          00
	BorderMIDDLE             DW          00
	BorderMIDDLED2           DW          00
	;
	shipOffsetX1             dw          30                                                                                                                                                                                                    	;position of first from left pixel
	shipOffsetY1             dw          219                                                                                                                                                                                                   	;position of first from top pixel
	shipSizeX1               equ         32                                                                                                                                                                                                    	;img Width
	shipSizeY1               equ         32                                                                                                                                                                                                    	;img Height
	screenMaxY1              equ         370
	screenMaxX1              equ         320
	screenMinY1              equ         100
	screenMinX1              equ         4
	;
	shipOffsetX2             dw          578                                                                                                                                                                                                   	;position of first from left pixel
	shipOffsetY2             dw          219
	shipSizeX2               equ         32                                                                                                                                                                                                    	; ship's Width
	shipSizeY2               equ         32
	screenMinY2              equ         100
	screenMinX2              equ         320
	screenMaxY2              equ         370
	screenMaxX2              equ         640

	SHIP_DAMAGE_COLOR        db          04h
	SHIP_DAMAGE_EFFECT_DELAY equ         700
	;
	shipSpeed1               equ         4
	shipSpeed2               equ         4
	;////////////////////////////////
	gamebtnOffset            dw          226, 204
	chatbtnOffset            dw          226, 268
	exitbtnOffset            dw          226, 332
	btnsize                  dw          188, 56
	;
	logoOffsetX              equ         190
	logoOffsetY              equ         8
	logoSizeX                equ         130
	logoSizeY                equ         95
	
	shapeOffsetX             DW          0
	shapeOffsetY             DW          0
	shapeSizeX               DW          0
	shapeSizeY               DW          0
	REV                      DB          0
	Ers                      DB          0

	;

	                         arrowOffset label word
	arrowOffsetX             dw          184
	arrowOffsetY             dw          216
	arrowOffsetXRev          dw          424
	arrowSizeX               equ         32
	arrowSizeY               equ         32
	arrowStep                equ         64
	arrowAtgame              equ         216
	arrowAtChat              equ         280
	arrowAtExit              equ         344
	;////////////////////////////////     	                                                                                                                                                                                      	;don't make this 0
	getName                  DB          " Your name: $"
	enterValidName           DB          " Please, enter a valid name: $"
	playerName1              DB          21,?,21 dup("$")
	                         firstScreen label byte
	                         DB          '  ',0ah,0dh                                                                                                                                                                                          	; new line
	                         DB          '                                                          ||',0ah,0dh
	                         DB          '   =======================================================||',0ah,0dh
	                         DB          '      ||                                                  ||',0ah,0dh
	                         DB          '      ||            #### FE L FDA SWAAA ####              ||',0ah,0dh
	                         DB          '      ||                                                  ||',0ah,0dh
	                         DB          '      ||--------------------------------------------------||',0ah,0dh
	                         DB          '      ||                                                  ||',0ah,0dh
	                         DB          '      ||            Please, Enter your name               ||',0ah,0dh
	                         DB          '      ||       Then, press Enter to start the game        ||',0ah,0dh
	                         DB          '      ||                                                  ||',0ah,0dh
	                         DB          '      ||             ** MAX 20 CHARCHTERS **              ||',0ah,0dh
	                         DB          '      ||                                                  ||',0ah,0dh
	                         DB          '      || =======================================================',0ah,0dh
	                         DB          '      ||                                                    ',0ah,0dh
	                         DB          '$',0ah,0dh
	                         mainMenu    label byte
	                         DB          '  ',0ah,0dh                                                                                                                                                                                          	; new line
	                         DB          '                                                           ||',0ah,0dh
	                         DB          '                                                           ||',0ah,0dh
	                         DB          '                                                           ||',0ah,0dh
	                         DB          '   ========================================================||',0ah,0dh
	                         DB          '       ||                                                  ||',0ah,0dh
	                         DB          '       ||            Press, F1 to beign chatting           ||',0ah,0dh
	                         DB          '       ||            Press, F2 to start the game           ||',0ah,0dh
	                         DB          '       ||            Press, ESC to exit the prgram         ||',0ah,0dh
	                         DB          '       ||                                                  ||',0ah,0dh
	                         DB          '       ||--------------------------------------------------||',0ah,0dh
	                         DB          '       ||                     chat...                      ||',0ah,0dh
	                         DB          '       || ========================================================',0ah,0dh
	                         DB          '       ||                                                    ',0ah,0dh
	                         DB          '       ||                                                    ',0ah,0dh
	                         DB          '       ||                                                    ',0ah,0dh
	                         DB          '$',0ah,0dh
	                         byebye      label byte
	                         DB          '  ',0ah,0dh
	                         DB          '                                   ||',0ah,0dh
	                         DB          '                                   ||',0ah,0dh
	                         DB          '                                   ||',0ah,0dh
	                         DB          '                                   ||',0ah,0dh
	                         DB          '                                   ||',0ah,0dh
	                         DB          '   ================================||',0ah,0dh
	                         DB          '       ||           Bye Bye        ||',0ah,0dh
	                         DB          '       || ================================',0ah,0dh
	                         DB          '       ||                           ',0ah,0dh
	                         DB          '       ||                           ',0ah,0dh
	                         DB          '       ||                           ',0ah,0dh
	                         DB          '       ||                           ',0ah,0dh
	                         DB          '       ||                           ',0ah,0dh
	                         DB          '$',0ah,0dh
				   
	;///////////////////////////////Data Initializations////////////////////////////////////
	;//////////////////////////////////////Art/////////////////////////////////////////////
	                         arrow       label byte
	                         ship2       label byte                                                                                                                                                                                            	; remove before adding ship2
	ship1                    DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB          0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 138, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19
	                         DB          138, 138, 138, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 138, 138, 138, 66, 138, 19, 0, 0, 0
	                         DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 138, 138, 138, 138, 138, 138, 19, 0, 0, 0, 0, 0, 0, 19, 19, 19, 19, 19
	                         DB          19, 19, 19, 19, 19, 19, 19, 19, 19, 0, 0, 0, 19, 138, 138, 138, 138, 66, 138, 19, 0, 0, 0, 0, 0, 0, 19, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29
	                         DB          29, 19, 19, 19, 19, 19, 19, 138, 66, 66, 138, 19, 0, 0, 0, 0, 0, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 19, 19, 19, 19, 19, 19, 66
	                         DB          138, 66, 138, 19, 0, 0, 0, 0, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 19, 19, 19, 19, 138, 66, 138, 138, 66, 138, 19, 0, 0, 0, 0
	                         DB          0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 23, 19, 19, 19, 66, 138, 66, 66, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB          0, 19, 19, 138, 138, 138, 138, 138, 138, 19, 23, 23, 27, 27, 19, 138, 66, 66, 66, 66, 19, 0, 0, 0, 0, 0, 0, 0, 19, 19, 19, 19, 19, 66, 66, 66, 66, 66, 66, 66
	                         DB          66, 138, 19, 19, 19, 19, 138, 66, 66, 138, 138, 19, 19, 23, 23, 27, 0, 0, 19, 19, 66, 66, 91, 91, 91, 91, 66, 91, 66, 91, 66, 138, 138, 138, 91, 138, 66, 66, 91, 138
	                         DB          66, 66, 66, 66, 4, 65, 65, 23, 0, 19, 66, 91, 91, 4, 4, 4, 91, 91, 91, 91, 91, 66, 91, 66, 66, 66, 91, 66, 66, 91, 91, 66, 66, 66, 66, 66, 6, 64, 64, 64
	                         DB          19, 66, 91, 4, 64, 64, 64, 64, 4, 91, 91, 91, 66, 91, 66, 91, 91, 91, 91, 138, 66, 66, 91, 138, 66, 66, 138, 19, 67, 67, 67, 67, 19, 66, 91, 4, 64, 64, 64, 64
	                         DB          4, 91, 91, 91, 66, 91, 66, 91, 91, 91, 91, 138, 66, 66, 91, 138, 66, 66, 138, 19, 67, 67, 67, 67, 0, 19, 66, 91, 91, 4, 4, 4, 91, 91, 91, 91, 91, 66, 91, 66
	                         DB          66, 66, 91, 66, 66, 91, 91, 66, 66, 66, 66, 66, 6, 64, 64, 64, 0, 0, 19, 19, 66, 66, 91, 91, 91, 91, 66, 91, 66, 91, 66, 138, 138, 138, 91, 138, 66, 66, 91, 138
	                         DB          66, 66, 66, 66, 4, 65, 65, 23, 0, 0, 0, 0, 19, 19, 19, 19, 19, 66, 66, 66, 66, 66, 66, 66, 66, 138, 19, 19, 19, 19, 138, 66, 66, 138, 138, 19, 19, 23, 23, 27
	                         DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 138, 138, 138, 138, 138, 138, 19, 23, 23, 27, 27, 19, 138, 66, 66, 66, 66, 19, 0, 0, 0, 0, 19, 19, 19, 19, 19, 19, 19
	                         DB          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 23, 19, 19, 19, 66, 138, 66, 66, 138, 19, 0, 0, 0, 0, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27
	                         DB          27, 19, 19, 19, 19, 138, 66, 138, 138, 66, 138, 19, 0, 0, 0, 0, 0, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 19, 19, 19, 19, 19, 19, 66
	                         DB          138, 66, 138, 19, 0, 0, 0, 0, 0, 0, 19, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 19, 19, 19, 19, 19, 19, 138, 66, 66, 138, 19, 0, 0, 0, 0
	                         DB          0, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0, 0, 0, 19, 138, 138, 138, 138, 66, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 138, 138, 138, 138, 138, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB          0, 0, 0, 0, 0, 0, 19, 138, 138, 138, 66, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19
	                         DB          138, 138, 138, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 138, 138, 19, 0, 0, 0
	                         DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 0, 0, 0
	exitbtn                  DB          0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 1, 104, 1, 104
	                         DB          1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104
	                         DB          1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104
	                         DB          1, 104, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1
	                         DB          104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1
	                         DB          104, 1, 104, 1, 104, 1, 104, 1, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1
	                         DB          104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1
	                         DB          104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104
	                         DB          1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104
	                         DB          1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 100
	                         DB          0, 0, 0, 0, 0, 0, 0, 100, 104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 104, 100, 0, 0, 0, 0, 0, 0, 100, 104, 1, 104, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 104, 100, 0, 0, 0, 0, 0, 100, 177, 104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 104, 104, 177, 100, 0, 0, 0, 0, 100, 104, 104, 1, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 104, 104, 100, 0, 0, 0, 100, 104, 177
	                         DB          104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 104, 177, 104, 100, 0, 0, 100, 177, 104, 104, 1, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 104, 1, 104, 104, 177, 100, 0, 0, 100, 104, 177, 104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 104, 177, 104, 100, 0
	                         DB          0, 100, 177, 104, 104, 1, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 104, 104, 177, 100, 0, 100, 177, 104, 177, 104, 104, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 104, 104, 104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 104, 177, 104, 177, 100, 100, 177, 177, 104, 104, 1, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 1, 1, 1, 104, 104, 104, 104, 104, 104, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 104
	                         DB          104, 177, 177, 100, 100, 177, 104, 177, 104, 104, 1, 1, 1, 31, 100, 100, 100, 77, 100, 77, 100, 77, 100, 77, 100, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                         DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 104, 104, 77, 77, 77, 77, 104, 104, 104, 104, 104, 104, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                         DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 9, 77, 9, 77, 9, 77, 9, 77, 77, 9, 77, 9, 77, 9, 77, 9, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                         DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                         DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 100, 77, 100, 77, 100, 77, 100, 77, 100, 100, 100, 31, 1, 1, 1, 104, 104, 177, 104, 177, 100, 100, 177, 177, 104, 104, 31, 31, 100
	                         DB          100, 77, 77, 77, 77, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 104
	                         DB          9, 9, 9, 9, 77, 77, 104, 104, 104, 104, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 77, 77, 77, 77, 77, 100, 100, 31, 31, 104, 104, 177, 177, 100, 100, 177, 104, 177, 31, 100, 100, 77, 77, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 9, 9, 9, 9, 9, 9, 77, 77, 104, 104, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 77
	                         DB          77, 100, 100, 31, 177, 104, 177, 100, 100, 177, 177, 31, 100, 100, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 100, 100, 31, 177, 177, 100, 100, 177, 104, 100
	                         DB          77, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 77, 100, 104, 177, 100, 100, 177, 177, 100, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 77, 100, 177, 177, 100, 100, 177, 177, 100, 77, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 77, 77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 77, 100, 177, 177, 100
	                         DB          100, 177, 100, 77, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 1, 1, 77, 77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 77, 100, 177, 100, 100, 177, 100, 77, 9, 9, 9, 9, 9, 100, 100, 100
	                         DB          100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 1, 1
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1
	                         DB          1, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 77, 100, 177, 100, 100, 177, 77, 77, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9
	                         DB          77, 77, 177, 100, 100, 177, 100, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 77, 77, 77, 77, 77, 77, 77, 77, 1, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 100, 177, 100, 100, 177, 77, 9, 9, 9, 9, 9
	                         DB          9, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77
	                         DB          77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 77, 177, 100, 100, 177, 77, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1
	                         DB          1, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1
	                         DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                         DB          1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9
	                         DB          9, 9, 9, 9, 9, 77, 177, 100, 100, 177, 77, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                         DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 77, 177, 100, 100, 104, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                         DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 1, 77, 77, 77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9
	                         DB          9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 104, 100, 100, 177, 77, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 1, 1, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1
	                         DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                         DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 1, 1, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 9, 9, 9, 9, 9, 9, 9, 9, 77, 177, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                         DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 77, 77, 77, 77
	                         DB          1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 104, 100
	                         DB          100, 177, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                         DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 177, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                         DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, 31, 31, 31, 31, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31
	                         DB          31, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31, 31, 1, 9, 1
	                         DB          31, 31, 31, 31, 31, 1, 9, 1, 31, 31, 31, 31, 31, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31, 31, 1, 1
	                         DB          31, 31, 31, 31, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31, 31, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 104, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31, 31, 1, 9, 1, 31, 31, 31, 31, 31, 1, 9, 1, 31, 31, 31, 31
	                         DB          31, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31, 31, 1, 9, 1, 31, 31, 31, 31, 1, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 31, 31, 31, 31, 31, 31, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1
	                         DB          31, 31, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 31, 31, 31, 31
	                         DB          31, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 31, 31, 31
	                         DB          31, 31, 9, 9, 9, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 31, 31, 9, 9, 31, 31, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 9, 31, 31, 31, 31, 31, 9, 53, 9
	                         DB          31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 9, 31, 31, 31, 31, 31, 31, 9
	                         DB          53, 53, 53, 53, 53, 53, 9, 9, 9, 9, 9, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 9, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9
	                         DB          9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 31, 31, 31, 31, 31, 53, 53, 53, 31, 31, 31, 31, 31, 53, 53, 53, 31, 31, 31, 31, 31, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 9, 9, 9, 9, 9, 31, 31
	                         DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 1, 1, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 1, 1, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 1
	                         DB          1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 31, 31, 31, 53, 53, 53, 53, 53, 31, 31, 31, 53, 53, 53, 53, 53, 31, 31, 31, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 31, 31, 31, 31, 31, 9, 9, 53, 53, 53, 9, 9, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 31, 31
	                         DB          31, 31, 31, 9, 9, 53, 53, 53, 9, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 9, 104, 100
	                         DB          100, 104, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 9, 31, 31, 31
	                         DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 104, 100, 100, 1, 9, 9, 53, 53, 53, 53, 53, 53, 53, 9
	                         DB          9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 9, 31, 31, 31, 31, 31, 31, 9, 31, 31, 31, 31, 31, 9, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 9, 9, 1, 100, 100, 104, 9, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53
	                         DB          53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53
	                         DB          53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 31, 31, 31, 31, 31, 31, 9, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 9, 104, 100, 100, 1, 9, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 9, 31, 31, 31, 31, 9, 53, 53, 9
	                         DB          31, 31, 31, 31, 9, 9, 9, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 9, 1, 100, 100, 1, 9, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 9, 9, 9, 31, 31, 31, 31, 31
	                         DB          31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 9, 1, 100, 100, 1, 9, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31
	                         DB          31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 9, 1, 100, 100, 1, 9, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 9, 1, 100, 100, 1, 9, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 31, 31
	                         DB          31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 9, 1, 100, 100, 1, 9, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100
	                         DB          100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100
	                         DB          100, 53, 53, 53, 53, 53, 53, 53, 53, 9, 1, 100, 0, 100, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 100, 0
	                         DB          0, 100, 77, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31
	                         DB          31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 77, 100, 0, 0, 0, 100, 9, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 100, 0, 0, 0, 0, 100, 77, 77, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 77
	                         DB          77, 100, 0, 0, 0, 0, 0, 100, 100, 77, 77, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                         DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 77, 77, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 77
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                         DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                         DB          100, 0, 0, 0, 0, 0, 0, 0
	chatbtn                  DB          0, 0, 0, 0, 0, 0, 0, 0, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                         DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                         DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                         DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                         DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 96, 96, 119, 2, 119, 2
	                         DB          119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2
	                         DB          119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2
	                         DB          119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2
	                         DB          119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2
	                         DB          119, 2, 119, 2, 119, 2, 119, 2, 96, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 2, 119, 2, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119
	                         DB          2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119
	                         DB          2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119
	                         DB          2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119
	                         DB          2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 2, 2, 119, 2, 96
	                         DB          0, 0, 0, 0, 0, 0, 0, 96, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 96, 0, 0, 0, 0, 0, 0, 96, 119, 2, 119, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 2, 119, 96, 0, 0, 0, 0, 0, 96, 194, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 119, 119, 194, 96, 0, 0, 0, 0, 96, 119, 119, 2, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 2, 119, 119, 96, 0, 0, 0, 96, 119, 194
	                         DB          119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 194, 119, 96, 0, 0, 96, 194, 119, 119, 2, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 119, 2, 119, 119, 194, 96, 0, 0, 96, 119, 194, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 194, 119, 96, 0
	                         DB          0, 96, 194, 119, 119, 2, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 2, 119, 119, 194, 96, 0, 96, 194, 119, 194, 119, 119, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 194, 119, 194, 96, 96, 194, 194, 119, 119, 2, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 2, 119
	                         DB          119, 194, 194, 96, 96, 194, 119, 194, 119, 119, 2, 2, 2, 96, 96, 96, 96, 71, 96, 71, 96, 71, 96, 71, 96, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71
	                         DB          71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71
	                         DB          71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 48, 71, 48, 71, 48, 71, 48, 71, 71, 48, 71, 48, 71, 48, 71, 48, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71
	                         DB          71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71
	                         DB          71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 96, 71, 96, 71, 96, 71, 96, 71, 96, 96, 96, 96, 2, 2, 2, 119, 119, 194, 119, 194, 96, 96, 194, 194, 119, 119, 31, 31, 96
	                         DB          71, 71, 71, 71, 71, 71, 71, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 71, 71, 71, 71, 71, 71, 71, 71, 96, 31, 31, 119, 119, 194, 194, 96, 96, 194, 119, 194, 31, 96, 96, 71, 71, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 71
	                         DB          71, 96, 96, 31, 194, 119, 194, 96, 96, 194, 194, 31, 96, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 2, 2, 2, 2, 2, 2, 69, 69, 69, 69, 69, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 96, 31, 194, 194, 96, 96, 194, 119, 96
	                         DB          71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 96, 119, 194, 96, 96, 194, 194, 71, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 2
	                         DB          2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 71, 71, 194, 194, 96, 96, 194, 194, 71, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 71, 194, 194, 96
	                         DB          96, 194, 71, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 69, 69, 69, 69, 69, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 71, 194, 96, 96, 194, 96, 71, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 96, 194, 96, 96, 194, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 48, 48, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48
	                         DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2
	                         DB          2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 71, 194, 96, 96, 194, 96, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 2, 2, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                         DB          2, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 96, 194, 96, 96, 194, 71, 48, 48, 48, 48, 48
	                         DB          31, 31, 72, 72, 72, 72, 72, 72, 2, 2, 2, 2, 48, 48, 48, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          2, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 69
	                         DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 48, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31
	                         DB          31, 31, 31, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2
	                         DB          48, 48, 48, 2, 2, 2, 2, 72, 72, 72, 72, 72, 72, 72, 31, 48, 48, 71, 194, 96, 96, 194, 48, 48, 48, 48, 48, 48, 48, 31, 31, 72, 72, 72, 72, 72, 72, 72, 72, 2
	                         DB          2, 2, 72, 72, 72, 72, 72, 72, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 69, 69, 69, 69, 2, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 69, 69, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2
	                         DB          2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 31, 2, 48, 2, 31, 31, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 69, 69, 69, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 72, 72, 72, 72, 72, 72, 2, 2, 2, 72, 72, 72, 72, 72, 72, 72, 72
	                         DB          95, 31, 48, 48, 48, 48, 194, 96, 96, 194, 71, 48, 48, 48, 48, 48, 48, 48, 48, 31, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 2
	                         DB          2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 69, 69, 69
	                         DB          69, 69, 69, 69, 69, 69, 31, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 2, 48, 48, 48, 48, 48, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 2, 2, 2, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 48, 48, 48, 48, 48, 71, 194, 96, 96, 119, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 31, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 95, 72, 72, 72, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 2, 2, 69, 69
	                         DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 69, 31, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 2, 69, 69, 69, 69, 69, 69, 31, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 72, 72, 72, 95, 72, 72
	                         DB          72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 31, 48, 48, 48, 48, 48, 48, 119, 96, 96, 194, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 95, 72, 72
	                         DB          72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 95, 72, 72, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 69, 69, 69, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 2, 31, 69, 69, 69, 69, 69, 69, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 72, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 72, 72, 72, 72, 72, 72
	                         DB          72, 95, 31, 48, 48, 48, 48, 48, 48, 71, 194, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 95, 72, 72, 72, 72, 72, 95, 95, 95, 95, 95, 95, 95, 95
	                         DB          95, 95, 72, 72, 72, 95, 72, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2
	                         DB          31, 69, 69, 69, 69, 69, 69, 69, 69, 2, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 69, 69, 69, 69, 69
	                         DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 31, 69, 69, 69, 69, 69, 31, 2, 48
	                         DB          48, 48, 48, 48, 48, 48, 2, 2, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 72, 72, 72, 95, 31, 48, 48, 48, 48, 48, 48, 48, 48, 119, 96
	                         DB          96, 194, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 72, 95, 72, 72, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 95, 72, 2, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 69, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48
	                         DB          2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 2, 31, 31, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 72, 95, 95, 95, 95
	                         DB          95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 31, 48, 48, 48, 48, 48, 48, 48, 71, 194, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 31, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 2, 31, 69, 69, 69, 69
	                         DB          69, 69, 69, 69, 69, 69, 69, 31, 31, 31, 31, 31, 31, 2, 48, 2, 31, 69, 31, 69, 69, 69, 69, 69, 31, 2, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                         DB          69, 69, 31, 31, 31, 31, 69, 2, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48
	                         DB          48, 48, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48, 2, 2, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95
	                         DB          95, 95, 95, 95, 95, 31, 48, 48, 48, 48, 48, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95
	                         DB          95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 2, 48, 48, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 2
	                         DB          2, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 2, 2, 48, 48, 2, 31, 31
	                         DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31
	                         DB          31, 31, 2, 48, 48, 48, 48, 48, 48, 2, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 119, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95
	                         DB          72, 2, 48, 48, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 2, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31
	                         DB          31, 2, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 2, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 31, 31, 31, 31
	                         DB          31, 31, 31, 31, 2, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 72, 95
	                         DB          95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 31, 48, 48, 48, 48, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 95, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 95, 2, 2, 48, 48, 48, 48, 48, 48, 48, 2, 31
	                         DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31
	                         DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 31, 31, 31, 31, 31, 31, 31, 31, 48, 48, 31, 31, 31, 31, 31, 31
	                         DB          31, 2, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 2, 48, 48, 48, 48, 48, 48, 2, 2, 95, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95
	                         DB          95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 48, 48, 48, 48, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 72, 95, 95, 95, 95, 95, 95, 95
	                         DB          95, 95, 31, 95, 31, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 2, 48, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                         DB          31, 31, 31, 31, 2, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2
	                         DB          48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 31, 31, 31, 31, 31, 31, 31, 48, 48, 31, 31, 31, 31, 31, 31, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 31, 31
	                         DB          31, 31, 31, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 31
	                         DB          48, 48, 48, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 45, 45, 31, 95, 95, 95, 95, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31
	                         DB          95, 95, 95, 95, 95, 72, 2, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31
	                         DB          31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                         DB          48, 31, 31, 31, 31, 31, 31, 31, 31, 48, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          2, 72, 95, 95, 95, 95, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 95, 95, 31, 95, 31, 95, 95, 95, 31, 48, 48, 48, 48, 48, 48, 119, 96, 96, 119, 48, 48
	                         DB          48, 48, 45, 45, 45, 45, 45, 31, 95, 95, 95, 95, 95, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 95, 72, 2, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 48, 31
	                         DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 31, 31, 31, 31, 31, 31, 31, 31, 48, 31, 31
	                         DB          31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 72, 95, 95, 95, 95, 31, 95, 31, 95, 31, 95
	                         DB          31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 95, 31, 45, 45, 45, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95
	                         DB          95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 72, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31
	                         DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                         DB          31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 48, 31, 31, 31, 31, 31, 31, 31, 48, 48, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31
	                         DB          95, 95, 31, 45, 45, 45, 45, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95
	                         DB          31, 95, 31, 95, 31, 95, 95, 95, 72, 2, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45
	                         DB          45, 48, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31
	                         DB          31, 31, 31, 31, 48, 48, 48, 31, 31, 31, 31, 31, 48, 48, 48, 48, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 2, 72, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 31, 45, 45, 45, 45, 45, 48, 48, 119, 96
	                         DB          96, 119, 48, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 72, 2, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 48, 48, 48, 45, 48, 48
	                         DB          2, 2, 2, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 72, 95, 95, 31, 95, 31
	                         DB          95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 31, 45, 45, 45, 45, 45, 45, 48, 48, 119, 96, 96, 2, 48, 48, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 31, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 72, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31
	                         DB          31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 48, 31, 31, 31, 31, 2, 48, 48, 2, 2, 31, 31, 31, 2, 2, 48, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95
	                         DB          31, 95, 31, 95, 95, 31, 45, 45, 45, 45, 45, 45, 48, 48, 2, 96, 96, 119, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 31, 95, 31, 95, 31, 95, 31
	                         DB          95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 72, 2, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 48, 2, 2, 31, 31, 31, 31, 31, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 72, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 31, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 48, 119, 96, 96, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 72
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31, 31, 31, 31, 31
	                         DB          31, 2, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72
	                         DB          95, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 31, 45, 45, 45, 45, 45, 45, 45, 45, 48, 2, 96, 96, 2, 48, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 72, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31, 31, 31, 31, 31, 31, 2, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72, 95, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31
	                         DB          95, 31, 95, 95, 95, 95, 95, 31, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 2, 96, 96, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 31, 95, 95
	                         DB          95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 72, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31, 31, 31, 31, 31, 31, 2, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 31, 31, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 48, 2, 96, 96, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31
	                         DB          31, 31, 31, 31, 48, 45, 2, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 31, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 2, 96, 96, 2, 48, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 72, 31, 72, 31, 72, 72, 72, 72, 72, 72, 72, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 48, 48, 48, 48, 31, 31, 31, 48
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72, 72, 72, 72
	                         DB          72, 72, 31, 72, 31, 72, 31, 31, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 2, 96, 96, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 48, 2, 2, 2, 48, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 2, 96, 0, 96, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 48, 2, 31, 31, 31, 48, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 96, 0
	                         DB          0, 96, 71, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31, 31, 31
	                         DB          31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 71, 96, 0, 0, 0, 96, 48, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 96, 0, 0, 0, 0, 96, 71, 71, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 71
	                         DB          71, 96, 0, 0, 0, 0, 0, 96, 96, 71, 71, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          48, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                         DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 71, 71, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 96, 96, 71
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                         DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                         DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                         DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                         DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                         DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                         DB          96, 0, 0, 0, 0, 0, 0, 0

	gamebtn                  DB          0, 0, 0, 0, 0, 0, 0, 0, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                         DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                         DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                         DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                         DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 91, 91, 6, 114, 6, 114
	                         DB          6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114
	                         DB          6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114
	                         DB          6, 114, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6
	                         DB          114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6
	                         DB          114, 6, 114, 6, 114, 6, 114, 6, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6
	                         DB          114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6
	                         DB          114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114
	                         DB          6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114
	                         DB          6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 91
	                         DB          0, 0, 0, 0, 0, 0, 0, 91, 114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 91, 0, 0, 0, 0, 0, 0, 91, 114, 6, 114, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 6, 114, 91, 0, 0, 0, 0, 0, 91, 184, 114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 114, 114, 184, 91, 0, 0, 0, 0, 91, 114, 114, 6, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 6, 114, 114, 91, 0, 0, 0, 91, 114, 184
	                         DB          114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 184, 114, 91, 0, 0, 91, 184, 114, 114, 6, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 114, 6, 114, 114, 184, 91, 0, 0, 91, 114, 184, 114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 184, 114, 91, 0
	                         DB          0, 91, 184, 114, 114, 6, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 6, 114, 114, 184, 91, 0, 91, 184, 114, 184, 114, 114, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 184, 114, 184, 91, 91, 184, 184, 114, 114, 6, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 6, 114
	                         DB          114, 184, 184, 91, 91, 184, 114, 184, 114, 114, 6, 6, 6, 90, 90, 90, 90, 66, 90, 66, 90, 66, 90, 66, 90, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                         DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                         DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 66, 42, 66, 42, 66, 42, 66, 66, 42, 66, 42, 66, 42, 66, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                         DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                         DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 90, 66, 90, 66, 90, 66, 90, 66, 90, 90, 90, 90, 6, 6, 6, 114, 114, 184, 114, 184, 91, 91, 184, 184, 114, 114, 31, 91, 90
	                         DB          91, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 91, 90, 91, 31, 114, 114, 184, 184, 91, 91, 184, 114, 184, 31, 90, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66
	                         DB          66, 66, 90, 31, 184, 114, 184, 91, 91, 184, 184, 31, 90, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 90, 31, 184, 184, 91, 91, 184, 114, 90
	                         DB          66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 90, 114, 184, 91, 91, 184, 184, 91, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 66, 91, 184, 184, 91, 91, 184, 184, 91, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 91, 184, 184, 91
	                         DB          91, 184, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 67, 67
	                         DB          67, 67, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 184, 91, 91, 184, 90, 66, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 90, 184, 91, 91, 184, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 31, 31, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          66, 66, 184, 91, 91, 184, 90, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 6, 31, 31, 31, 31, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 90, 184, 91, 91, 184, 66, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 42
	                         DB          42, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 184, 91, 91, 184, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 42, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                         DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 184, 91, 91, 184, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 67, 67, 67, 67, 67, 6, 42, 42, 6, 6, 67, 67, 67, 67, 67
	                         DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 6, 6, 6, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                         DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 184, 91, 91, 114, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                         DB          67, 67, 67, 6, 6, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                         DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 91, 91, 184, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67
	                         DB          67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                         DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 184, 91, 91, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                         DB          66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67
	                         DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                         DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 91
	                         DB          91, 184, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                         DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                         DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 184, 91, 91, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 6, 6, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                         DB          67, 67, 6, 6, 6, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67
	                         DB          67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 91, 91, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66
	                         DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42
	                         DB          42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 6, 6, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 6, 42, 42, 42, 6, 67
	                         DB          67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 114, 91, 91, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42
	                         DB          42, 42, 6, 6, 6, 31, 31, 31, 31, 31, 31, 6, 6, 6, 31, 31, 31, 31, 31, 31, 6, 6, 6, 42, 42, 42, 6, 31, 31, 31, 31, 31, 31, 31, 31, 6, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 31, 31, 31, 31, 31, 31, 31, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66
	                         DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 91, 91, 114, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 91, 91, 91, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 91, 91, 91, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 6, 67, 67, 31, 31, 31, 31, 67, 6, 42, 42, 6, 67, 67, 31, 31, 31, 31, 67, 6, 42, 42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 31, 6, 6
	                         DB          6, 6, 6, 31, 31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 31
	                         DB          31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                         DB          91, 91, 91, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 91, 91, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 91, 91, 91
	                         DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 31, 31, 31, 31
	                         DB          31, 31, 42, 42, 42, 6, 31, 31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 42, 42
	                         DB          42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 114, 91, 91, 114, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                         DB          91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31
	                         DB          31, 42, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 42, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 114, 91, 91, 114, 42, 42
	                         DB          42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31
	                         DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91
	                         DB          91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 114, 91, 91, 114, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31
	                         DB          31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                         DB          31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 114, 91, 91, 114, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                         DB          91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31
	                         DB          31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 114, 91
	                         DB          91, 114, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 114, 91, 91, 6, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 6, 91, 91, 114, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43
	                         DB          43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 42, 114, 91, 91, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 91, 91, 6, 42, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 91, 91, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31
	                         DB          31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 42, 6, 91, 91, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31
	                         DB          31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 91, 91, 6, 42, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 91, 91, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31
	                         DB          31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 91, 0, 91, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31
	                         DB          31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 91, 0
	                         DB          0, 91, 66, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 66, 91, 0, 0, 0, 91, 42, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 91, 0, 0, 0, 0, 91, 66, 66, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 66
	                         DB          66, 91, 0, 0, 0, 0, 0, 91, 91, 66, 66, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                         DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 66, 66, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 91, 91, 66
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                         DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                         DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                         DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                         DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                         DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                         DB          91, 0, 0, 0, 0, 0, 0, 0


	; For Bullets
	Bullet                   DB          0, 0, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 68, 68, 68, 68, 68, 68
	BulletXSize              equ         8
	BulletYSize              equ         4
	BulletSpeed              DB          1
	MAXBULLET                equ         100
	BulletOffset             DW          200 DUP(0)
	BulletDirection          DB          100 DUP(0)
	MAXBULLETLEFT            equ         631
	MAXBULLETRIGHT           equ         8

	HEALTH1                  DB          200
	HEALTH2                  DB          200


	MSGTAILXsize             equ         16
	MSGTAILYsize             equ         16
	MSGTAILXoffset1          dw          110 - MSGTAILXsize
	MSGTAILXoffset2          dw          530
	MSGTAILYoffset1          dw          15
	MSGTAILYoffset2          dw          55

	MSGTAIL                  DB          26, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 26, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 26, 26, 18, 18, 18, 0, 0
	                         DB          0, 0, 0, 0, 0, 0, 0, 0, 26, 26, 26, 26, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 26, 26, 26, 26, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB          26, 26, 26, 26, 26, 26, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 26, 26, 26, 26, 27, 26, 26, 18, 18, 18, 0, 0, 0, 0, 0, 0, 26, 26, 26, 27, 27, 27, 26, 26
	                         DB          18, 18, 18, 0, 0, 0, 0, 0, 26, 26, 26, 27, 27, 27, 27, 26, 26, 18, 18, 18, 0, 0, 0, 0, 26, 26, 26, 27, 27, 27, 27, 27, 26, 26, 18, 18, 18, 0, 0, 0
	                         DB          26, 26, 26, 27, 27, 27, 27, 27, 27, 26, 26, 18, 18, 18, 0, 0, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 26, 26, 18, 18, 18, 0, 26, 26, 26, 26, 27, 27, 27, 27
	                         DB          27, 27, 27, 26, 26, 18, 18, 0, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 18, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0
	                         DB          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0
	;//////////////////////////////////////Art/////////////////////////////////////////////
;description
name SEGMENT
	;game layout
	CharacteroffsetX  dw  12
	CharacteroffsetX2 dw  563                                                                                                                                                                                                   	;position of first from left pixel                                                                                                                                                                                              	;position of first from left pixel
	CharacteroffsetY  dw  8                                                                                                                                                                                                     	;position of first from top pixel
	CharacterSizeX    equ 64                                                                                                                                                                                                    	;img Width
	CharacterSizeY    equ 64

	NameBoxSizeX      equ 82
	NameBoxSizeY      equ 26

	NameBoxC          DB  0, 0, 0, 0, 0, 0, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222
	                  DB  222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 222, 222, 150, 150, 222, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150
	                  DB  150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 222, 150, 150, 222, 222, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 222, 222, 150, 3, 150, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 150, 222, 150, 3, 150
	                  DB  222, 222, 0, 0, 0, 0, 0, 0, 0, 222, 222, 150, 77, 53, 150, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 150, 222, 150
	                  DB  53, 77, 150, 222, 222, 0, 0, 0, 0, 0, 222, 222, 150, 77, 3, 3, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  150, 222, 3, 3, 77, 150, 222, 222, 0, 0, 0, 222, 222, 150, 77, 3, 77, 53, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 150, 222, 53, 77, 3, 77, 150, 222, 222, 0, 222, 222, 150, 77, 77, 77, 3, 3, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 150, 222, 3, 3, 77, 77, 77, 150, 222, 222, 222, 150, 77, 77, 77, 3, 77, 53, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 77, 77, 150, 222, 53, 77, 3, 77, 77, 77, 150, 222, 222, 150, 77, 77, 77, 77, 3, 3, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 77, 77, 77, 77, 150, 222, 3, 3, 77, 77, 77, 77, 150, 222, 222, 150, 77, 77, 77, 3, 77, 53, 222, 150, 77, 77, 77, 77, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 77, 77, 77, 77, 150, 222, 53, 77, 3, 77, 77, 77, 150, 222, 222, 222, 150, 77, 77, 77, 3, 3, 222, 150, 77, 77, 77, 100, 100, 100, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 77, 150, 222, 3, 3, 77, 77, 77, 150, 222, 222, 0, 222, 222, 150, 77, 3, 77, 53, 222, 150, 77, 77, 100, 100, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 150, 222, 53, 77, 3, 77, 150, 222, 222, 0, 0, 0, 222, 222, 150, 77, 3, 3, 222, 150, 77, 77, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 150, 222, 3, 3, 77, 150, 222, 222, 0, 0, 0, 0, 222, 150, 77, 3, 77, 53, 222, 150, 77, 77, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 150, 222, 53, 77, 3, 77, 150, 222, 0, 0, 0, 222, 222, 150, 77, 77, 3, 3, 222, 150, 77, 77
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 150, 222, 3, 3, 77, 77, 150, 222, 222, 0, 0, 222, 150, 77, 77, 3, 77, 53, 222, 150
	                  DB  77, 77, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 150, 222, 53, 77, 3, 77, 77, 150, 222, 0, 0, 222, 150, 77, 77, 77, 3, 3
	                  DB  222, 150, 77, 77, 77, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 77, 150, 222, 3, 3, 77, 77, 77, 150, 222, 0, 0, 222, 150, 77, 77, 3
	                  DB  77, 53, 150, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 150, 222, 150, 53, 77, 3, 77, 77, 150, 222, 0, 222, 222, 150, 77
	                  DB  77, 77, 3, 3, 150, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB  77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 150, 222, 150, 3, 3, 77, 77, 77, 150, 222, 222, 222, 150
	                  DB  77, 77, 77, 3, 77, 53, 150, 222, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150
	                  DB  150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 222, 150, 53, 77, 3, 77, 77, 77, 150, 222
	                  DB  222, 150, 77, 77, 77, 77, 3, 150, 150, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222
	                  DB  222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 150, 150, 3, 77, 77, 77, 77
	                  DB  150, 222, 222, 150, 77, 77, 77, 3, 150, 222, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 222, 222, 150, 3, 77
	                  DB  77, 77, 150, 222, 222, 150, 77, 77, 77, 150, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 222
	                  DB  150, 77, 77, 77, 150, 222, 222, 150, 77, 77, 150, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 222, 222, 150, 77, 77, 150, 222, 222, 150, 150, 150, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 222, 222, 150, 150, 150, 222, 222, 222, 222, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 222, 222, 222, 222, 222
	CharacterC        DB  0, 0, 0, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 6, 114, 114, 114, 114, 114, 114, 114, 113, 113, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 26, 30, 30, 30
	                  DB  30, 26, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114
	                  DB  6, 114, 114, 114, 114, 114, 114, 114, 113, 113, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 26, 30, 30, 30, 30, 26, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB  6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 114, 6, 114, 114, 114, 114, 114, 114, 113, 113, 113, 113, 113, 4, 4, 4
	                  DB  4, 113, 113, 113, 26, 30, 30, 30, 30, 26, 114, 114, 6, 6, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 114, 114
	                  DB  6, 6, 6, 6, 6, 6, 114, 114, 114, 6, 114, 114, 114, 114, 114, 114, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 26, 26, 26, 30, 30, 26, 114, 114, 114, 114, 114, 114
	                  DB  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 114, 6, 6, 6, 114, 114, 6, 114, 114, 114, 114, 114, 114, 113
	                  DB  113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 26, 26, 26, 26, 114, 114, 114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 114, 114, 114, 114
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 114, 114, 114, 6, 114, 114, 114, 114, 114, 114, 113, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 113
	                  DB  26, 26, 114, 114, 114, 114, 6, 6, 114, 114, 6, 6, 6, 114, 114, 114, 114, 114, 6, 6, 6, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 6
	                  DB  114, 114, 114, 114, 114, 114, 114, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 114, 114, 114, 114, 6, 6, 6, 6, 114, 114, 114, 114, 6, 114
	                  DB  114, 114, 114, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 6, 114, 114, 114, 114, 114, 114, 114, 4, 4, 4, 4, 4, 4, 4, 4, 4
	                  DB  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 114, 114, 114, 114, 6, 6, 6, 6, 114, 6, 6, 6, 6, 6, 114, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 114, 6, 114, 114, 114, 114, 114, 113, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 4, 4, 4, 4, 114, 114, 114, 6, 6, 6
	                  DB  6, 6, 114, 114, 6, 114, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 114, 114, 114, 114, 114, 114, 113, 4, 4
	                  DB  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 4, 4, 4, 114, 114, 114, 6, 6, 6, 6, 6, 6, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 114, 114, 114, 114, 114, 113, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 113, 113, 113, 113, 113, 113, 4, 113, 113
	                  DB  113, 4, 114, 114, 6, 6, 6, 6, 6, 6, 6, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114
	                  DB  114, 114, 114, 114, 113, 4, 4, 4, 4, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 4, 4, 114, 114, 6, 6, 6, 6, 6, 6, 6, 114, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 114, 113, 4, 4, 4, 113, 113, 4, 4, 4, 4, 4, 4
	                  DB  113, 113, 113, 4, 113, 113, 4, 113, 113, 113, 114, 114, 114, 114, 114, 6, 6, 6, 6, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 113, 4, 4, 113, 113, 4, 4, 4, 4, 4, 113, 113, 113, 113, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 113, 113, 114, 6
	                  DB  6, 6, 6, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 113, 113, 113
	                  DB  4, 4, 4, 4, 4, 113, 113, 113, 113, 113, 113, 113, 4, 4, 4, 4, 4, 4, 4, 4, 4, 113, 114, 114, 18, 6, 114, 18, 18, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 113, 4, 4, 4, 4, 4, 4, 113, 113, 90, 90, 90, 113, 113, 113, 113, 113, 4
	                  DB  4, 4, 4, 4, 4, 4, 0, 0, 18, 114, 0, 18, 18, 0, 0, 18, 18, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 113, 4, 4, 4, 4, 4, 113, 90, 90, 90, 90, 90, 90, 90, 113, 113, 113, 113, 113, 4, 4, 4, 4, 113, 0, 0, 18, 18, 0, 18, 18, 18, 0, 18
	                  DB  18, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 18, 0, 0, 0, 0, 0, 113, 4, 4, 113, 4, 113, 90, 90, 90, 90
	                  DB  90, 90, 90, 90, 90, 90, 65, 113, 113, 113, 113, 113, 4, 113, 18, 0, 18, 18, 0, 18, 18, 18, 0, 0, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 18, 18, 0, 18, 0, 18, 18, 0, 0, 113, 113, 4, 113, 113, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 160, 113, 113, 113, 0, 18, 18
	                  DB  18, 18, 18, 18, 18, 18, 18, 0, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 0, 18, 0, 18, 18, 0, 0, 0, 113
	                  DB  113, 113, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 160, 65, 65, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 18, 18, 18, 18, 18, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0, 0, 113, 90, 90, 90, 90, 160, 160, 160, 160, 90, 90, 90, 90, 90, 90, 90
	                  DB  90, 65, 65, 160, 65, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18
	                  DB  18, 18, 18, 18, 0, 0, 0, 0, 65, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 65, 160, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18
	                  DB  18, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0, 65, 90, 90, 90, 90, 90, 90, 90, 90
	                  DB  90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 65, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0, 65, 90, 90, 90, 90, 65, 65, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 65, 18, 0, 18
	                  DB  18, 18, 18, 19, 18, 18, 18, 18, 18, 18, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 65, 90
	                  DB  90, 90, 90, 65, 65, 160, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 18, 18, 18, 18, 18, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 19, 18, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 65, 90, 90, 90, 90, 90, 65, 65, 160, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90
	                  DB  90, 90, 90, 65, 65, 18, 18, 18, 18, 18, 19, 19, 19, 18, 18, 18, 18, 19, 18, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18
	                  DB  18, 18, 18, 18, 18, 65, 90, 90, 90, 90, 90, 90, 65, 65, 160, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 18, 18, 18, 18, 18, 19, 19, 19, 18, 18, 18
	                  DB  18, 19, 18, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 65, 90, 90, 90, 90, 90, 90, 90, 65, 160, 90
	                  DB  90, 90, 18, 65, 90, 90, 90, 90, 90, 90, 90, 90, 65, 18, 18, 18, 18, 18, 19, 19, 19, 18, 18, 18, 18, 19, 18, 19, 18, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 65, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 18, 18, 65, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 18, 18, 19
	                  DB  19, 18, 19, 19, 19, 18, 19, 19, 18, 19, 18, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 65, 65, 65, 65
	                  DB  65, 90, 90, 90, 90, 90, 18, 19, 19, 18, 65, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 18, 18, 19, 19, 18, 19, 19, 19, 18, 19, 19, 18, 19, 18, 19, 19, 19, 18, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 65, 29, 236, 236, 236, 65, 90, 90, 65, 18, 19, 19, 18, 65, 65, 65, 65, 65, 65, 65
	                  DB  90, 90, 90, 90, 65, 18, 18, 19, 19, 18, 19, 19, 19, 18, 19, 19, 19, 19, 18, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18
	                  DB  18, 18, 18, 16, 29, 29, 236, 16, 236, 29, 16, 65, 18, 18, 19, 18, 65, 65, 29, 236, 236, 236, 236, 29, 65, 90, 90, 90, 65, 18, 18, 19, 19, 18, 19, 19, 19, 18, 19, 19
	                  DB  19, 19, 18, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 16, 26, 16, 16, 16, 16, 65, 18, 18, 19, 19, 18
	                  DB  65, 29, 29, 236, 16, 16, 236, 29, 29, 16, 65, 65, 160, 18, 18, 19, 19, 18, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 18, 18, 19, 19, 18, 65, 16, 26, 16, 16, 16, 16, 16, 16, 65, 65, 18, 160, 18, 18, 19
	                  DB  19, 18, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 65, 65, 19
	                  DB  19, 18, 18, 18, 18, 19, 18, 65, 19, 19, 16, 16, 16, 16, 16, 16, 16, 65, 18, 18, 18, 18, 18, 19, 19, 18, 19, 19, 19, 18, 19, 19, 19, 19, 20, 19, 19, 19, 18, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 18, 18, 18, 19, 19, 19, 18, 160, 90, 19, 19, 19, 65, 65, 65, 65
	                  DB  65, 18, 18, 18, 18, 18, 19, 19, 19, 18, 19, 20, 19, 18, 19, 19, 19, 19, 20, 19, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18
	                  DB  18, 18, 18, 18, 18, 160, 160, 160, 18, 18, 19, 19, 19, 19, 18, 160, 65, 90, 90, 19, 19, 19, 19, 19, 19, 18, 18, 18, 19, 18, 19, 19, 19, 18, 19, 20, 19, 18, 19, 19
	                  DB  19, 19, 20, 19, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 160, 18, 18, 18, 19, 19, 19, 18, 18, 160
	                  DB  160, 65, 65, 65, 18, 18, 65, 65, 160, 18, 18, 18, 19, 18, 19, 19, 19, 18, 19, 20, 19, 18, 19, 20, 19, 19, 20, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 160, 18, 18, 19, 19, 19, 19, 18, 18, 160, 160, 160, 160, 18, 18, 65, 65, 160, 18, 18, 19, 18, 19, 18, 19, 19
	                  DB  20, 19, 19, 20, 19, 18, 19, 20, 19, 19, 20, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 18, 18
	                  DB  18, 19, 19, 19, 19, 18, 18, 18, 160, 160, 18, 18, 18, 160, 160, 18, 18, 19, 19, 18, 19, 19, 18, 19, 20, 19, 19, 20, 19, 19, 20, 19, 19, 19, 20, 19, 18, 18, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 18, 18, 18, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 160, 160, 18, 18
	                  DB  18, 19, 19, 20, 19, 19, 18, 19, 19, 19, 19, 20, 19, 19, 20, 19, 19, 19, 20, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18
	                  DB  18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 160, 18, 18, 18, 19, 19, 18, 20, 19, 19, 18, 19, 19, 19, 19, 20, 19, 19, 20, 19
	                  DB  19, 20, 19, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 18, 18, 19
	                  DB  18, 19, 19, 18, 160, 18, 18, 19, 19, 19, 20, 19, 19, 19, 18, 19, 20, 19, 20, 20, 19, 19, 20, 19, 19, 20, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 18, 18, 19, 18, 19, 19, 18, 160, 18, 18, 19, 19, 19, 20, 19, 19, 19, 19, 19
	                  DB  20, 20, 20, 20, 20, 19, 20, 19, 20, 19, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18
	                  DB  19, 20, 19, 19, 19, 18, 18, 19, 18, 19, 19, 19, 18, 18, 19, 19, 19, 20, 20, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 19, 19, 18, 18, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 19, 19, 19, 18, 18, 19, 18, 19, 20, 19, 18, 18, 19, 19
	                  DB  19, 20, 20, 19, 19, 19, 19, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18
	                  DB  18, 18, 18, 18, 19, 18, 18, 18, 19, 20, 19, 19, 19, 18, 18, 19, 18, 19, 20, 19, 19, 19, 19, 19, 19, 20, 20, 19, 19, 19, 20, 20, 21, 20, 20, 20, 21, 20, 20, 21
	                  DB  20, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 19, 19, 19, 18, 18, 19
	                  DB  18, 19, 20, 19, 19, 20, 19, 19, 19, 20, 20, 19, 19, 19, 20, 21, 20, 20, 21, 20, 21, 20, 20, 21, 20, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 18, 18, 18, 19, 18, 18, 18, 18, 18, 18, 18, 19, 20, 19, 19, 19, 19, 18, 19, 18, 19, 20, 20, 19, 20, 20, 19, 19, 20, 19, 19, 19, 20, 20, 21
	                  DB  20, 21, 20, 20, 21, 20, 21, 20, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 19, 18, 18, 18, 19, 18, 18, 18
	                  DB  19, 20, 19, 19, 19, 19, 19, 19, 19, 20, 21, 20, 20, 20, 20, 19, 20, 20, 19, 19, 19, 20, 21, 20, 20, 21, 20, 21, 20, 21, 20, 19, 18, 18, 18, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 18, 18, 18, 19, 18, 19, 18, 18, 18, 19, 19, 20, 20, 19, 19, 20, 19, 19, 20, 21, 20, 20, 20, 20, 19
	                  DB  20, 21, 19, 19, 19, 20, 21, 20, 21, 21, 21, 21, 21, 21, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 19
	                  DB  18, 19, 18, 18, 19, 18, 18, 19, 19, 19, 20, 20, 20, 19, 21, 21, 20, 20, 21, 20, 20, 21, 20, 19, 20, 21, 19, 19, 20, 21, 20, 20, 21, 20, 21, 20, 21, 19, 19, 18
	                  DB  18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 18, 18, 18, 18, 19, 18, 18, 19, 19, 19, 20, 21, 20, 20, 20, 21
	                  DB  20, 20, 21, 20, 20, 21, 20, 19, 20, 21, 19, 19, 20, 21, 20, 21, 20, 21, 20, 21, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 18, 19, 18, 18, 19, 19, 18, 18, 19, 19, 19, 19, 21, 21, 20, 20, 21, 20, 20, 21, 20, 20, 21, 20, 19, 20, 21, 19, 19, 20, 20, 20, 20
	                  DB  20, 20, 20, 20, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 19, 19, 19, 19, 18, 18, 18
	                  DB  19, 19, 19, 20, 21, 20, 20, 21, 20, 20, 21, 20, 20, 21, 20, 19, 19, 20, 19, 20, 20, 20, 20, 20, 19, 20, 20, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 19, 19, 19, 19, 19, 18, 19, 19, 19, 19, 20, 20, 21, 20, 20, 21, 20, 20, 21, 20, 20, 20, 19
	                  DB  19, 20, 19, 19, 19, 20, 20, 20, 19, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  18, 19, 19, 19, 19, 19, 18, 18, 19, 19, 19, 19, 20, 21, 20, 20, 21, 20, 20, 20, 20, 20, 20, 20, 19, 20, 19, 19, 19, 19, 20, 19, 19, 19, 18, 18, 18, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 19, 19, 19, 19, 18, 19, 19, 19, 19, 20, 20, 21, 20
	                  DB  21, 20, 19, 20, 19, 19, 19, 20, 19, 20, 19, 19, 19, 20, 19, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 19, 19, 19, 19, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 19, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                  DB  18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 19, 19, 19
	                  DB  19, 19, 19, 19, 19, 19, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 19, 19, 19, 19, 19, 19, 19
	                  DB  19, 19, 19, 19, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 19, 19
	                  DB  19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	
	;logo
	logo              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 106, 106, 106, 106, 106, 106, 106, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 57, 34, 34, 34, 34, 34, 34, 34, 34, 57, 57, 57, 106, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 34, 34, 57, 106, 106
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 57, 34, 34, 34, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 34, 34, 34, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 34, 34
	                  DB  34, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 106, 106, 106, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 106, 106, 106, 106, 0, 0, 0, 106, 106, 57, 57, 57, 57, 106, 106, 0, 0, 0, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  57, 57, 57, 57, 57, 57, 57, 34, 34, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 34, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 57, 57, 57, 106, 106, 0, 106, 57, 57, 34, 34, 34, 34, 57, 106, 106, 0, 106
	                  DB  106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 34, 34, 34, 34, 34, 34, 34, 34, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 34
	                  DB  57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 34, 34, 34, 106, 106, 34, 34, 34, 34, 34, 34
	                  DB  106, 106, 106, 106, 106, 34, 34, 34, 34, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 100, 100, 53
	                  DB  53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 34, 57, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 34, 34, 34
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54
	                  DB  53, 53, 53, 53, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 34, 34, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 106, 57, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 54, 54, 54, 54
	                  DB  54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 53, 53, 53, 53, 100, 100, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 57, 106, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 54, 54, 54, 54, 54, 54, 54, 54, 54, 53, 53, 53, 53, 54, 54, 54, 53, 53, 53, 53, 53, 100, 100, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 53, 53, 53, 106, 106
	                  DB  106, 106, 34, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 57, 34, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 106, 106, 106, 106, 53
	                  DB  53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 53, 53, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 106, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 34, 106, 106, 106, 106, 106
	                  DB  53, 53, 53, 53, 53, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB  53, 100, 100, 100, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  106, 57, 34, 34, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 106, 106, 54, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB  53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 54, 106, 106, 106, 34, 34, 106, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 34, 34, 106, 106, 106, 53, 53, 53, 100, 100, 100, 100, 106, 106, 54, 53, 53, 53, 53, 53, 53, 100, 100, 100, 106, 106, 53, 53, 53
	                  DB  53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53
	                  DB  53, 54, 106, 106, 106, 34, 57, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 34, 106, 106, 54, 53, 53, 53, 100, 100, 100, 100, 106, 106, 53, 53, 53, 53, 53
	                  DB  53, 100, 100, 100, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 53, 53, 106, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 53, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 54, 106, 106, 34, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 34, 34, 106, 106, 106, 53, 53, 100, 100, 100
	                  DB  100, 106, 106, 106, 54, 53, 53, 53, 53, 100, 100, 100, 106, 106, 106, 54, 53, 53, 53, 53, 53, 53, 100, 100, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 100, 100, 100
	                  DB  53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 34, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57
	                  DB  34, 106, 106, 106, 54, 53, 53, 100, 100, 100, 106, 106, 106, 54, 53, 53, 53, 53, 100, 100, 100, 106, 106, 106, 54, 53, 53, 53, 53, 53, 100, 100, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 53, 53, 53, 100, 53, 53, 53, 54, 53, 53, 106, 106, 106, 106, 106, 106, 34, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 54, 106, 106, 106, 34, 57, 106
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 53, 53, 53, 100, 100, 53, 106, 106, 54, 53, 53, 53, 53, 53, 100, 100, 100, 106, 106, 106, 54, 53, 53, 53, 53, 53
	                  DB  100, 100, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 100, 53, 53, 106, 54, 53, 53, 106, 106, 106, 106, 106, 106, 34, 106, 106, 106, 106, 106, 53, 53, 53, 53
	                  DB  53, 53, 53, 53, 106, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 53, 53, 100, 100, 100, 106, 106, 106, 54, 53, 53, 53, 53, 100, 100, 106
	                  DB  106, 106, 106, 106, 54, 53, 53, 53, 53, 100, 100, 106, 106, 106, 106, 106, 106, 34, 34, 106, 106, 106, 106, 106, 53, 53, 100, 53, 53, 53, 106, 54, 54, 53, 106, 106, 106, 106, 106, 106
	                  DB  34, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 54, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 53, 53, 100, 100, 53, 106
	                  DB  106, 106, 54, 53, 53, 53, 100, 100, 100, 106, 106, 106, 106, 106, 54, 53, 53, 53, 100, 100, 100, 106, 106, 106, 106, 106, 106, 34, 34, 106, 106, 106, 106, 106, 53, 53, 100, 53, 53, 53
	                  DB  106, 54, 54, 53, 106, 106, 106, 106, 106, 106, 34, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 54, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57
	                  DB  34, 106, 106, 106, 53, 53, 100, 100, 106, 106, 106, 106, 54, 53, 53, 53, 100, 100, 106, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 106, 106, 106, 106, 106, 106, 34, 34, 34, 106
	                  DB  106, 106, 106, 106, 53, 53, 100, 53, 53, 106, 106, 54, 54, 53, 106, 106, 106, 106, 106, 34, 34, 34, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 53, 53, 54, 106, 106, 34, 34, 57
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 54, 53, 100, 100, 106, 106, 106, 106, 106, 53, 53, 100, 100, 100, 106, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 106
	                  DB  106, 106, 106, 106, 106, 34, 201, 201, 34, 106, 106, 106, 106, 106, 53, 53, 100, 53, 53, 106, 106, 54, 54, 53, 106, 106, 106, 106, 106, 34, 34, 34, 106, 106, 106, 106, 106, 53, 53, 53
	                  DB  100, 100, 100, 53, 53, 54, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 34, 106, 106, 106, 54, 53, 100, 100, 106, 106, 106, 106, 106, 54, 53, 100, 100, 106, 106, 106
	                  DB  106, 106, 106, 106, 53, 53, 53, 100, 100, 106, 106, 106, 106, 106, 34, 201, 201, 201, 34, 106, 106, 106, 106, 106, 53, 53, 100, 53, 53, 106, 106, 54, 54, 53, 106, 106, 106, 106, 106, 34
	                  DB  34, 34, 106, 106, 106, 106, 106, 106, 53, 53, 100, 100, 100, 53, 53, 54, 106, 106, 106, 34, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 54, 100, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 100, 100, 106, 106, 106, 106, 106, 106, 106, 54, 53, 53, 100, 100, 106, 106, 106, 106, 34, 34, 201, 201, 201, 34, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 54
	                  DB  54, 54, 53, 53, 106, 106, 106, 106, 34, 34, 201, 34, 106, 106, 106, 106, 106, 106, 53, 53, 100, 100, 100, 100, 53, 54, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  57, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 100, 106, 106, 106, 106, 106, 34, 34, 201, 201, 201, 34, 106
	                  DB  106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 34, 34, 201, 201, 34, 106, 106, 106, 106, 106, 53, 53, 100, 100, 100, 100, 53, 53, 106, 106, 106, 34
	                  DB  34, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 34, 34, 201, 201, 34, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 34, 106, 201, 201, 34, 106, 106, 106, 106, 106, 53, 53
	                  DB  100, 100, 100, 100, 53, 53, 54, 106, 106, 106, 34, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 34, 106, 106, 106, 106, 106, 34, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 34, 34, 201
	                  DB  201, 201, 34, 34, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 100, 53, 54, 106, 106, 106, 34, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 34, 34, 34, 34, 57
	                  DB  106, 106, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 34, 34, 201, 201, 201, 201, 201, 34, 106, 106, 106, 106, 106, 53, 53, 100, 100, 100, 100, 53, 53, 106, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 201, 106, 57, 57, 34, 57, 57, 106, 201, 201, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 201, 201, 201, 201, 201, 34, 106, 106, 106, 106, 106, 53, 53, 100, 100, 100, 100, 53, 53, 106, 106, 106
	                  DB  34, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 201, 106, 106, 106, 106, 201, 106, 57, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 201, 201, 201, 201, 201, 201, 201, 34, 106, 106, 106, 106, 53
	                  DB  53, 100, 100, 100, 100, 53, 53, 106, 106, 106, 106, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 57, 57, 57, 57, 106, 201, 201, 106, 106, 57, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 201, 201
	                  DB  201, 201, 201, 201, 34, 106, 106, 106, 106, 53, 53, 100, 100, 100, 100, 53, 53, 54, 106, 106, 106, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 34, 34, 34, 57, 57, 106, 106, 57, 57, 34
	                  DB  34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 34, 34, 34, 201, 201, 201, 201, 201, 34, 106, 106, 106, 106, 53, 53, 100, 100, 100, 100, 53, 53, 54, 106, 106, 106, 34, 106, 0, 0, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 106, 106, 106, 106, 106, 0, 0, 0, 0, 106, 57, 57, 34, 34
	                  DB  34, 106, 106, 34, 34, 34, 34, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57
	                  DB  57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 201, 201, 201, 34, 106, 106, 106, 106, 106, 53, 100, 100, 100, 100, 100, 53, 54, 106, 106
	                  DB  106, 34, 57, 57, 57, 57, 34, 34, 34, 34, 34, 57, 57, 57, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 57, 34, 34, 34, 34, 34
	                  DB  57, 106, 106, 0, 106, 57, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 34, 34, 34, 34, 34, 57, 57, 57, 57, 57, 57, 57, 57
	                  DB  57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 201, 34, 106, 106, 106, 106, 106
	                  DB  53, 100, 100, 100, 100, 100, 53, 53, 54, 106, 106, 106, 34, 34, 34, 34, 34, 106, 106, 106, 106, 34, 34, 34, 57, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 106, 106, 57, 34, 34, 34, 34, 34, 34, 34, 57, 106, 106, 106, 57, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 34, 34, 34, 34
	                  DB  34, 34, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 34, 34, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 34, 34, 34, 34, 106, 106, 106, 106, 106, 53, 53, 100, 100, 100, 100, 53, 53, 54, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 106, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 57, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 34, 34, 106, 106, 106, 106, 106, 57, 57, 106, 106, 106, 106, 106, 106, 106
	                  DB  57, 57, 57, 57, 57, 34, 34, 34, 34, 57, 57, 57, 57, 57, 57, 57, 57, 81, 81, 57, 57, 57, 57, 57, 57, 57, 34, 34, 34, 34, 34, 34, 57, 57, 57, 57, 57, 57, 57, 34
	                  DB  34, 34, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 106, 106, 106, 106, 106, 53, 53, 100, 100, 100, 100, 53, 53, 54, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 34, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57
	                  DB  57, 57, 57, 57, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 34, 34, 34, 34, 57, 57, 57, 57, 57, 57, 57, 81, 81, 57, 57, 57, 57, 57, 57, 57, 34, 34, 34, 34, 57, 57
	                  DB  57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 100, 100, 100, 100, 53, 53, 54, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 34, 106, 106, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 106, 106, 57, 57, 57, 57, 57, 57, 34, 34, 34, 34, 34, 57, 57, 57, 57, 57, 57, 81, 81, 57, 57, 57, 57
	                  DB  57, 57, 57, 34, 34, 34, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  53, 53, 100, 100, 100, 100, 53, 53, 53, 106, 106, 106, 106, 106, 106, 34, 34, 34, 57, 57, 57, 57, 57, 106, 106, 106, 34, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 34
	                  DB  106, 106, 106, 106, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 106, 57, 57, 57, 57, 57, 57, 57, 34, 106, 34, 34, 57, 57, 57
	                  DB  57, 57, 81, 81, 81, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 34, 34
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 53, 106, 106, 106, 34, 34, 34, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 34, 57, 106
	                  DB  0, 0, 0, 0, 0, 0, 106, 57, 34, 34, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 106, 57, 57, 57, 57, 57
	                  DB  106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 81, 81, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57
	                  DB  57, 57, 57, 57, 57, 57, 57, 57, 57, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 53, 106, 106, 106, 34, 57, 57, 57, 57, 57, 57, 57
	                  DB  57, 57, 57, 57, 106, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0, 106, 106, 34, 34, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57
	                  DB  57, 57, 57, 57, 106, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 81, 81, 81, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57
	                  DB  57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 53, 106
	                  DB  106, 34, 57, 57, 57, 57, 57, 57, 57, 57, 81, 57, 57, 57, 106, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57
	                  DB  57, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 81, 81, 57, 57, 57, 57, 57, 57, 57, 34, 106
	                  DB  106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  53, 53, 53, 100, 100, 100, 53, 53, 53, 106, 34, 34, 57, 57, 57, 57, 57, 57, 57, 81, 81, 57, 57, 57, 106, 106, 106, 34, 34, 106, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106
	                  DB  106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 81, 57
	                  DB  57, 57, 57, 57, 57, 57, 57, 57, 34, 106, 106, 106, 81, 57, 57, 57, 57, 57, 57, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57
	                  DB  57, 34, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 53, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 34, 57, 57, 0
	                  DB  0, 0, 0, 0, 106, 34, 34, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 57, 57, 57, 57, 57, 81, 57, 57, 34, 57, 57, 57, 57, 57, 34, 34, 106, 106, 106, 81, 57, 57, 57, 57, 57, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 34
	                  DB  57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 53, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57
	                  DB  57, 106, 106, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 57, 34, 34, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57
	                  DB  57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 34, 106, 57, 57, 57, 57, 57, 34, 34, 106, 106, 106, 81, 81, 57, 57, 57, 57, 81, 81
	                  DB  106, 106, 106, 34, 34, 34, 34, 34, 106, 34, 57, 81, 81, 81, 57, 57, 57, 57, 57, 57, 57, 57, 34, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 53, 106
	                  DB  106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57
	                  DB  106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 34, 34, 106, 57, 57, 57, 57, 57, 34, 34, 106
	                  DB  106, 106, 81, 81, 57, 57, 57, 57, 34, 106, 106, 106, 106, 34, 57, 57, 57, 57, 106, 34, 57, 81, 81, 81, 57, 57, 57, 57, 57, 57, 57, 57, 57, 34, 106, 106, 106, 106, 106, 106
	                  DB  53, 53, 53, 100, 100, 100, 53, 53, 53, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 34, 57, 57, 0, 0, 0, 106, 106, 34, 34, 106, 106, 106, 57
	                  DB  57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 34
	                  DB  34, 57, 57, 57, 57, 57, 57, 34, 106, 106, 106, 106, 81, 81, 81, 57, 57, 57, 34, 106, 106, 106, 106, 34, 57, 57, 57, 57, 106, 34, 57, 81, 81, 81, 106, 57, 57, 57, 57, 57
	                  DB  57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 53, 106, 106, 106, 34, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 34, 34, 57, 106
	                  DB  0, 0, 106, 57, 34, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 34, 34, 34, 34, 34
	                  DB  106, 106, 57, 57, 57, 57, 57, 57, 57, 34, 106, 57, 57, 57, 57, 57, 34, 34, 106, 106, 106, 106, 106, 81, 81, 57, 57, 57, 34, 106, 106, 106, 34, 34, 57, 57, 57, 57, 106, 106
	                  DB  57, 81, 81, 81, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 34, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 54, 106, 106, 106, 106, 34, 34, 34, 34, 57, 57, 81
	                  DB  81, 57, 57, 57, 106, 106, 106, 34, 34, 106, 0, 0, 106, 57, 34, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 57, 57, 57, 57, 81, 81, 57, 57
	                  DB  57, 106, 106, 106, 106, 34, 57, 57, 57, 34, 106, 106, 57, 57, 57, 57, 57, 57, 57, 106, 34, 57, 57, 57, 57, 57, 34, 106, 106, 106, 106, 106, 106, 81, 81, 57, 57, 57, 34, 106
	                  DB  106, 106, 34, 57, 57, 57, 57, 106, 106, 106, 57, 81, 81, 81, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 34, 106, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 106, 106
	                  DB  106, 106, 106, 34, 34, 34, 34, 57, 57, 81, 81, 57, 57, 57, 106, 106, 106, 34, 34, 106, 0, 0, 57, 34, 34, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106
	                  DB  106, 106, 57, 57, 57, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 34, 106, 106, 57, 34, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 34, 106, 106, 106
	                  DB  106, 106, 106, 81, 81, 81, 81, 57, 57, 57, 57, 57, 57, 57, 81, 81, 81, 106, 106, 106, 106, 57, 57, 106, 106, 106, 106, 57, 57, 57, 57, 81, 57, 57, 57, 106, 106, 106, 106, 106
	                  DB  53, 53, 53, 100, 100, 100, 53, 53, 106, 106, 106, 106, 106, 106, 106, 34, 57, 57, 57, 81, 81, 57, 57, 57, 106, 106, 106, 34, 34, 106, 0, 106, 57, 34, 106, 106, 106, 57, 57, 57
	                  DB  57, 57, 57, 81, 57, 57, 57, 57, 57, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 34, 106, 106, 57, 34, 106, 106, 81, 57, 57, 57, 57, 57, 57, 57
	                  DB  57, 57, 57, 57, 57, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57
	                  DB  57, 81, 81, 57, 57, 57, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 106, 106, 106, 106, 106, 34, 34, 57, 57, 57, 81, 81, 81, 57, 57, 57, 106, 106, 106, 34, 34, 106
	                  DB  0, 106, 34, 34, 106, 106, 106, 57, 57, 57, 57, 57, 57, 81, 81, 57, 57, 57, 57, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 34, 106, 106, 57, 34
	                  DB  106, 106, 81, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 81, 81, 81, 81, 81, 81, 81, 81, 81, 106, 106, 106, 34, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 81, 81, 57, 57, 57, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 106, 106, 106, 106, 106, 34, 34, 57, 57, 57, 81, 81
	                  DB  81, 57, 57, 57, 106, 106, 106, 34, 57, 106, 0, 106, 34, 34, 106, 106, 106, 57, 57, 57, 57, 57, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57
	                  DB  57, 106, 106, 106, 34, 34, 106, 106, 57, 34, 106, 106, 81, 81, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 81, 81
	                  DB  81, 106, 106, 106, 106, 106, 106, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 81, 81, 81, 57, 57, 57, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 53, 106, 106
	                  DB  106, 106, 34, 34, 57, 57, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 34, 34, 57, 0, 0, 106, 34, 34, 106, 106, 106, 57, 57, 57, 57, 81, 81, 81, 81, 57, 57, 57, 106, 106
	                  DB  106, 106, 57, 81, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 34, 57, 106, 106, 57, 34, 106, 106, 106, 81, 81, 81, 57, 57, 57, 57, 57, 57, 57, 34, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 57, 57, 81, 81, 81, 57, 57, 57, 106, 106, 106
	                  DB  53, 53, 53, 100, 100, 100, 53, 106, 106, 106, 106, 106, 57, 57, 57, 57, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 34, 57, 106, 0, 106, 106, 34, 34, 106, 106, 106, 57, 57, 57
	                  DB  57, 81, 81, 81, 57, 57, 57, 57, 106, 106, 106, 57, 57, 81, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 34, 57, 201, 106, 106, 34, 106, 106, 106, 81, 81, 81, 81, 57, 57, 57
	                  DB  57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 34, 34, 34, 34, 106, 106, 106, 106, 106, 57
	                  DB  57, 81, 81, 81, 57, 57, 57, 106, 106, 106, 53, 53, 53, 100, 100, 100, 53, 106, 106, 106, 106, 106, 57, 57, 57, 57, 81, 81, 57, 57, 57, 106, 106, 106, 106, 106, 34, 57, 106, 0
	                  DB  106, 57, 34, 34, 106, 106, 106, 57, 57, 57, 57, 81, 81, 81, 57, 57, 57, 57, 106, 106, 106, 57, 57, 81, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 34, 57, 201, 201, 106, 57
	                  DB  34, 106, 106, 106, 106, 81, 81, 81, 81, 81, 81, 106, 106, 106, 106, 106, 106, 106, 34, 34, 201, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 201, 201
	                  DB  106, 34, 34, 34, 106, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 106, 106, 106, 53, 53, 53, 100, 100, 53, 53, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57
	                  DB  106, 106, 106, 106, 106, 34, 57, 106, 0, 0, 106, 57, 34, 106, 106, 106, 106, 57, 57, 57, 57, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 81, 57, 57
	                  DB  57, 106, 106, 106, 34, 57, 201, 201, 201, 106, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 201, 34, 34, 106, 106, 106, 106, 106, 34, 34, 34
	                  DB  57, 57, 106, 106, 106, 106, 106, 34, 201, 201, 201, 201, 201, 106, 106, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 106, 106, 106, 53, 53, 53, 100, 100, 53, 53, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 57, 106, 0, 0, 0, 106, 57, 34, 106, 106, 106, 106, 57, 57, 57, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106
	                  DB  106, 57, 57, 81, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 34, 57, 201, 201, 201, 106, 34, 106, 106, 106, 106, 106, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 34, 34, 106, 201
	                  DB  34, 34, 106, 106, 106, 106, 34, 34, 34, 57, 57, 57, 34, 106, 106, 106, 106, 34, 201, 201, 201, 201, 201, 201, 106, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 106, 106, 106
	                  DB  53, 53, 100, 100, 100, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 57, 57, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 106, 57, 57, 57
	                  DB  81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 34, 57, 201, 0, 201, 57, 34, 106, 106, 106, 106, 34, 34, 34, 57, 106
	                  DB  106, 106, 106, 106, 106, 34, 34, 201, 201, 201, 34, 34, 106, 106, 106, 106, 34, 34, 57, 57, 81, 81, 57, 106, 106, 106, 106, 34, 201, 201, 201, 201, 201, 201, 106, 106, 106, 106, 106, 57
	                  DB  57, 81, 81, 81, 81, 57, 57, 106, 106, 106, 53, 100, 100, 100, 100, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 57, 106, 106, 0, 0, 0, 0
	                  DB  106, 57, 34, 106, 106, 106, 106, 57, 57, 57, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 34, 57, 0, 0, 0, 57
	                  DB  106, 106, 106, 34, 34, 34, 57, 57, 57, 57, 106, 106, 106, 106, 106, 34, 201, 201, 201, 201, 34, 106, 106, 106, 106, 34, 34, 34, 57, 57, 81, 81, 57, 106, 106, 106, 106, 106, 201, 201
	                  DB  201, 201, 201, 201, 34, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 106, 106, 53, 53, 100, 100, 100, 100, 53, 106, 106, 106, 106, 34, 34, 34, 34, 106, 106, 106, 106, 34, 34
	                  DB  34, 57, 57, 106, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 106, 57, 57, 57, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 81, 57, 57
	                  DB  57, 106, 106, 106, 106, 57, 0, 0, 0, 57, 106, 106, 106, 34, 34, 34, 57, 57, 81, 57, 106, 106, 106, 106, 106, 34, 201, 201, 201, 201, 106, 106, 106, 106, 106, 106, 34, 57, 57, 57
	                  DB  81, 106, 106, 106, 106, 106, 34, 106, 201, 201, 201, 201, 201, 201, 34, 106, 106, 106, 106, 57, 57, 57, 81, 81, 81, 57, 57, 106, 106, 53, 53, 100, 100, 100, 53, 53, 106, 106, 106, 106
	                  DB  34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 57, 106, 106, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 34, 106, 106, 106, 57, 57, 57, 81, 81, 81, 81, 57, 57, 57, 57, 106, 106
	                  DB  106, 106, 57, 81, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 57, 106, 0, 0, 57, 34, 106, 106, 106, 34, 57, 81, 81, 81, 106, 106, 106, 106, 106, 106, 34, 201, 106, 34, 34
	                  DB  106, 106, 106, 106, 106, 106, 106, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 201, 201, 201, 201, 201, 201, 34, 34, 106, 106, 106, 57, 57, 57, 81, 81, 81, 57, 57, 106, 106, 53
	                  DB  53, 53, 100, 100, 53, 53, 106, 106, 106, 34, 57, 57, 106, 57, 57, 57, 57, 57, 57, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 34, 106, 106, 106, 57, 57, 57
	                  DB  81, 81, 81, 81, 57, 57, 57, 57, 106, 106, 106, 106, 57, 81, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 34, 106, 0, 0, 106, 34, 34, 106, 106, 106, 57, 57, 57, 57, 106
	                  DB  106, 106, 106, 106, 34, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 106, 106, 106, 201, 201, 201, 34, 34, 106, 106, 106, 57
	                  DB  57, 81, 81, 81, 81, 57, 57, 106, 106, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 106, 34, 34, 106, 106, 106, 57, 57, 57, 81, 81, 81, 81, 57, 57, 57, 57, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 34, 106, 0, 0, 106
	                  DB  34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34
	                  DB  106, 106, 106, 201, 34, 34, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 106, 106, 53, 53, 53, 53, 53, 53, 106, 106, 106, 34, 34, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 57, 57, 57, 81, 81, 81, 81, 57, 57, 57, 57, 57, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57
	                  DB  57, 106, 106, 106, 106, 34, 106, 0, 0, 0, 57, 57, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 34, 34, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 106, 106, 106, 53, 53, 53, 53, 106, 106, 106, 34, 34, 57
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 34, 34, 106, 106, 106, 57, 57, 81, 81, 81, 81, 81, 57, 57, 57, 57, 106
	                  DB  106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 106, 106, 106, 106, 34, 106, 0, 0, 0, 106, 106, 57, 34, 34, 34, 34, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 106, 106, 106
	                  DB  53, 53, 53, 53, 106, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 34, 106, 106, 106, 57, 57
	                  DB  57, 81, 81, 81, 81, 57, 57, 57, 57, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 106, 106, 106, 106, 34, 106, 0, 0, 0, 0, 106, 57, 57, 34, 34, 34, 34, 34, 34
	                  DB  34, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 34, 34, 106, 106, 106, 57
	                  DB  57, 81, 81, 81, 81, 57, 57, 106, 106, 106, 53, 53, 53, 53, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 106, 57, 34, 106, 106, 106, 57, 57, 57, 81, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 57, 57, 57, 81, 81, 81, 81, 57, 106, 106, 106, 106, 34, 57, 106, 0, 0
	                  DB  0, 0, 0, 106, 106, 57, 57, 57, 106, 34, 34, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106
	                  DB  106, 106, 106, 106, 106, 34, 106, 106, 106, 57, 57, 81, 81, 81, 57, 57, 106, 106, 106, 106, 53, 53, 53, 53, 106, 106, 106, 34, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 34, 106, 106, 106, 57, 57, 57, 81, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 106, 106, 57, 57, 81, 81, 81
	                  DB  57, 57, 106, 106, 106, 34, 34, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 34, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB  53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 81, 81, 81, 57, 57, 106, 106, 106, 106, 53, 53, 53, 106, 106, 106, 34, 57, 57, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 34, 106, 106, 106, 57, 57, 81, 81, 81, 81, 81, 81, 57, 57, 106
	                  DB  106, 106, 106, 106, 106, 57, 57, 57, 81, 57, 57, 57, 106, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 34, 106, 106, 106, 106, 53, 53, 53, 53, 53
	                  DB  53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 81, 81, 81, 57, 57, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 34, 34, 106, 106, 106
	                  DB  57, 57, 57, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34
	                  DB  106, 106, 106, 106, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 57, 81
	                  DB  81, 81, 81, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 106, 57, 57, 81, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 57, 57, 57, 57, 106, 106, 106, 34, 57, 106, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 106, 106, 106, 106, 53, 53, 53, 100, 100, 100, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 100, 100, 100, 53, 53, 53
	                  DB  53, 53, 53, 106, 106, 106, 106, 106, 57, 81, 81, 81, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 106, 57, 57, 57, 81, 81, 81, 81, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  57, 57, 57, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 106, 106, 106, 106, 53, 53, 100, 100, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 100, 100, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 57, 57, 81, 81, 57, 57, 106, 106, 106, 106, 34, 34, 34, 34, 34, 34, 34, 57, 106, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 106, 106, 57, 81, 81, 81, 81, 57, 57
	                  DB  57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 106, 106, 106, 106, 53, 53, 53, 53, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 100, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 106, 106, 106, 34, 57, 57
	                  DB  57, 57, 57, 57, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 34, 106
	                  DB  106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106
	                  DB  106, 106, 106, 106, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 100, 100, 106, 106, 106, 106, 106, 57, 57
	                  DB  57, 57, 106, 106, 106, 106, 106, 34, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 57, 34, 34, 106, 106, 106, 106, 57, 57, 57, 57, 57, 57, 57, 106, 106, 106, 106, 34, 34, 34, 34, 106, 106, 106, 106, 106, 34, 34, 106, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53
	                  DB  53, 100, 100, 106, 106, 106, 106, 106, 57, 57, 57, 57, 106, 106, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 34, 106, 106, 106, 106, 106, 57, 57, 57, 57, 57, 106, 106, 106, 34, 34, 106, 106, 57, 57
	                  DB  34, 34, 34, 57, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 34, 106, 106, 106, 106, 54, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 100, 100, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 34, 34, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 34, 34, 57, 106, 0, 106, 106, 106, 106, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 54, 53, 53, 100, 53, 53, 53, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 100, 100, 100, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 57, 57, 106, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106
	                  DB  57, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 57, 34, 106
	                  DB  106, 106, 53, 53, 53, 100, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 100, 100, 100, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 34, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 34, 34, 106, 106, 106, 106, 106, 106, 106, 34, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 57, 34, 106, 106, 106, 53, 53, 53, 100, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 100, 100, 100
	                  DB  106, 106, 106, 106, 34, 34, 34, 34, 106, 106, 106, 34, 34, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 34, 34, 106, 106, 106, 106, 106, 34, 34, 57, 57, 106, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 34, 106, 106, 106, 53, 53, 100, 100, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 53, 53, 53, 53, 53, 100, 100, 100, 106, 106, 106, 106, 34, 34, 34, 34, 34, 34, 34, 34, 57, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 34, 34, 34, 34
	                  DB  34, 34, 57, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 34, 106, 106, 106, 53, 100, 100, 53, 53, 53, 53, 53, 53
	                  DB  53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 53, 53, 53, 53, 100, 100, 100, 106, 106, 106, 106, 106, 34, 57, 106, 106, 57, 57, 57, 57, 57, 106, 106, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 106, 106, 106, 57, 57, 57, 57, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 34, 106, 106
	                  DB  106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 53, 100, 100, 100, 100, 100, 106, 106, 106, 106, 106, 34, 34, 106, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 106, 106, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 57, 34, 34, 106, 106, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 53, 100, 100, 100, 100, 100, 106, 106, 106
	                  DB  106, 34, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 53, 53, 53, 106, 106, 106, 106, 53, 53, 53, 53, 100, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106, 106, 106, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB  53, 53, 53, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 34, 106, 106, 34, 34, 34, 57, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 34, 106
	                  DB  106, 106, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 106, 106, 106, 106, 34, 34, 34, 34, 34, 34, 34, 34, 34, 106, 34, 34, 57, 57, 106, 106, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 106, 57, 106, 106, 106, 106, 106, 53, 53, 53, 53, 53, 53, 100, 100, 100, 106, 106, 106, 34, 34, 57, 57, 57, 57, 106, 106, 57, 34, 34, 57, 106, 106
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 34, 34, 34, 57, 106, 0
	                  DB  106, 0, 0, 0, 106, 106, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 34, 106, 106, 106, 106, 106, 106, 106, 106, 106
	                  DB  106, 106, 106, 34, 34, 34, 57, 57, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57
	                  DB  34, 34, 34, 34, 106, 53, 53, 53, 53, 106, 106, 34, 34, 57, 57, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 106, 106, 106, 57, 34, 106, 106, 106, 34, 106, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 34, 106, 106, 34, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 57, 57, 57, 106
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	


name ENDS
.code
MAIN PROC FAR
	                              mov              AX,@data                                                                             	;initializing the data segemnt
	                              mov              DS,AX
	;///////////////////////////////First Screen////////////////////////////////////

	firstScreenLoop:              
	                              mov              ax, graphicsModeAX                                                                   	; enter graphicsMode
	                              mov              bx, graphicsModeBX                                                                   	; BX = 81FFh
	                              int              10h

	                              mov              ah,09h
	                              lea              dx, firstScreen                                                                      	; show the first screen
	                              int              21h

	                              mov              ah,09h
	                              lea              dx, getName                                                                          	; ask for player's name
	                              int              21h

	getNameLoop:                  lea              si, playerName1                                                                      	; get player's name
	                              mov              ah, 0Ah
	                              mov              dx, si
	                              int              21h

	; TODO check of the name is valid
	; mov bp, offset playerName1 + 1
	; or           [bp], 0
	; jnz            mainMenuLoop

	; mov            ah,09h
	; lea            dx, enterValidName      	; ask for a valid player's name
	; int            21h
	; jmp            getNameLoop
	;///////////////////////////////Main Menu////////////////////////////////////
	mainMenuLoop:                 
	                              clearWholeScreen
	                              mov              ax, graphicsModeAX                                                                   	; enter graphicsMode
	                              mov              bx, graphicsModeBX                                                                   	; BX = 81FFh
	                              int              10h
	                              call             background
	                              mov              Ers, 0
	                              mov              REV, 0
	                              editDrawPrams    gamebtn, btnsize, btnsize+2, gamebtnOffset, gamebtnOffset+2
	                              call             drawShape
	                              editDrawPrams    chatbtn, btnsize, btnsize+2, chatbtnOffset, chatbtnOffset+2
	                              call             drawShape
	                              editDrawPrams    exitbtn, btnsize, btnsize+2, exitbtnOffset, exitbtnOffset+2
	                              call             drawShape
	                              call             eraseArrows
	                              add              arrowoffsetY, arrowStep
	                              call             eraseArrows
	                              add              arrowoffsetY, arrowStep
	                              call             eraseArrows
	                              sub              arrowoffsetY, arrowStep
	                              sub              arrowoffsetY, arrowStep
	                              editDrawPrams    logo, logoSizeX, logoSizeY, logoOffsetX, logoOffsetY
	                              call             drawShape2x2

	                              mov              Rev, 1
	                              editDrawPrams    ship1, shipSizeX1, shipSizeY1, arrowOffsetXRev, arrowoffsetY
	                              call             drawShape
	                              mov              Rev, 0
	                              mov              AX, arrowOffsetX
	                              mov              shapeOffsetX, AX
	                              Lea              SI, Ship1
	                              call             drawShape

	CheckInMainMenu:              
	                              mov              ah,0                                                                                 	;  ah:al = scan code: ASCII code
	                              int              16h

	                              cmp              ah, key_upArrow                                                                      	; up arrow
	                              jne              downArrow_label
	                              cmp              arrowoffsetY, arrowAtgame
	                              je               CheckInMainMenu
	                              call             eraseArrows
	                              mov              AX, arrowStep
	                              SUB              arrowoffsetY, AX
	                              mov              Rev, 1
	                              Lea              SI, Ship1
	                              mov              AX, arrowOffsetXRev
	                              mov              shapeOffsetX, AX
	                              mov              AX, arrowoffsetY
	                              mov              shapeOffsetY, AX
	                              call             drawShape
	                              Lea              SI, Ship1

	                              mov              Rev, 0
	                              mov              AX, arrowOffsetX
	                              mov              shapeOffsetX, AX
	                              call             drawShape
	Make_THE_JMP_CLOSER:          jmp              CheckInMainMenu

	downArrow_label:              cmp              ah, key_downArrow                                                                    	; down arrow
	                              jne              enterKey_label
	                              cmp              arrowoffsetY, arrowAtExit
	                              je               CheckInMainMenu
	                              call             eraseArrows

	                              mov              AX, arrowStep
	                              ADD              arrowoffsetY, AX
	                              mov              Rev, 1
	                              Lea              SI, Ship1
	                              mov              AX, arrowOffsetXRev
	                              mov              shapeOffsetX, AX
	                              mov              AX, arrowoffsetY
	                              mov              shapeOffsetY, AX
	                              call             drawShape
	                              Lea              SI, Ship1
	                              mov              Rev, 0
	                              mov              AX, arrowOffsetX
	                              mov              shapeOffsetX, AX
	                              call             drawShape

	                              jmp              Make_THE_JMP_CLOSER

	enterKey_label:               cmp              ah, key_enter                                                                        	; enter
	                              jne              Make_THE_JMP_CLOSER                                                                  	; added to prevent other buttons from doing enter's action

	                              cmp              arrowoffsetY, arrowAtChat
	;je gameLoop
	                              cmp              arrowoffsetY, arrowAtgame
	                              je               gameLoop
	                              cmp              arrowoffsetY, arrowAtExit
	                              je               exitProg
	                              jmp              Make_THE_JMP_CLOSER
	;///////////////////////////////Game Loop////////////////////////////////////
	gameLoop:                                                                                                                           	;NOTE:since we are using words, we will use the value '2' to traverse pixels
	;//////////////////////////////initializations////////////////////////////////////
	                              mov              ax, graphicsModeAX
	                              mov              bx, graphicsModeBX
	                              int              10h
	                              call             DrawLayout
	                              call             DrawHealthbar
	                              call             DrawHealthbar2
	                              call             drawShip1
	                              call             Drawship2
	                              mov              bx, 0
	; BX: 0 down character1, 1 down character2, 2 up character1, 3 up character2
	                              call             DrawMsgWithBox
	                              mov              bx, 3
	; BX: 0 down character1, 1 down character2, 2 up character1, 3 up character2
	                              call             DrawMsgWithBox
	;this subroutine is responsible for drawing the ship using its cooardinates
	;////////////////////////////Interacting with the user////////////////////////////
	gameLoopRoutine:              
	                              CMP              HEALTH1, 0
	                              JE               exitProg

	                              CMP              HEALTH2, 0
	                              JE               exitProg
	                              call             BulletChecker

	                              call             updateBullets

	;////////////////////////////////////check for user input/////////////////////////////////////////////

	                              mov              ah,1
	                              int              16h
	                              jz               gameLoopRoutine                                                                      	; check if there is any input

	                              inputToMoveShip  key_w, key_s, key_a, key_d, key_f, moveShip1_label
	                              inputToMoveShip  key_upArrow, key_downArrow, key_leftArrow, key_rightArrow, key_enter, moveShip2_label
	                             
	moveShip1_label:              
	                              call             movShip1
	                              jmp              gameLoopRoutine
	moveShip2_label:              
	                              CALL             movShip2                                                                             	; TO GENERATE THE new OFFSET OF THE ship
	                              jmp              gameLoopRoutine
	;/////////////////////////////////////////////////////////////////////////////////
	;///////////////////////////////Exit Program/////////////////////////////////////
	exitProg:                     
	                              clearWholeScreen
	                              mov              ah,09h
	                              lea              dx, byebye                                                                           	; show the bye bye screen
	                              int              21h

	                              mov              ah,4ch
	                              int              21h
MAIN ENDP
	;//////////////////////////////Procedures//////////////////////////////////////////////
movShip1 PROC near

	                              cmp              al,key_esc                                                                           	; ESC
	                              jz               exitProg
	                              cmp              ah, 21H
	                              jz               movShip1_donotErase
	                              call             eraseShip1                                                                           	; get the pressed key from the user

	movShip1_donotErase:          cmp              ah,key_w
	                              jz               movShip1_moveUp

	                              cmp              ah,key_s
	                              jz               movShip1_moveDown

	                              cmp              ah,key_a
	                              jz               movShip1_moveLeft

	                              cmp              ah,key_d
	                              jz               movShip1_moveRight

	                              cmp              ah, key_f
	                              jz               movShip1_fire


	movShip1_readKey:             
	                              call             drawShip1

	                              mov              ah,0                                                                                 	;wait for a key to be pressed and put it in ah, ah:al = scan code: ASCII code
	                              int              16h

	                              mov              cx, 0                                                                                	; initialize cx to use it to iterate over the shipSize
	                              jmp              gameLoopRoutine


	movShip1_readFire:            

	                              mov              ah,0                                                                                 	;wait for a key to be pressed and put it in ah, ah:al = scan code: ASCII code
	                              int              16h

	                              mov              cx, 0                                                                                	; initialize cx to use it to iterate over the Bullet Size
	                              jmp              gameLoopRoutine
	;///////////////////////////////////////////////////////////////////////////////////////
	movShip1_moveUp:              
	;checking for boundaries
	                              mov              bx, shipOffsetY1
	                              cmp              bx, screenMinY1
	                              jna              movShip1_readKey
	                              sub              bx, shipSpeed1
	                              mov              DI, offset shipOffsetY1
	                              mov              [DI], bx

	                              jmp              movShip1_readKey

	movShip1_moveDown:            
	;checking for boundaries
	                              mov              bx, shipOffsetY1
	                              mov              cx, bx
	                              add              cx, shipSizeY1
	                              cmp              cx, screenMaxY1
	                              jnb              movShip1_readKey
	                              add              bx,shipSpeed1
	                              mov              DI, offset shipOffsetY1
	                              mov              [DI], bx

	                              jmp              movShip1_readKey

	movShip1_moveLeft:            
	;checking for boundaries
	                              mov              bx, shipOffsetX1
	                              cmp              bx, screenMinX1
	                              jna              movShip1_readKey
	                              sub              bx, shipSpeed1
	                              mov              DI, offset shipOffsetX1
	                              mov              [DI], bx
	          
	                              jmp              movShip1_readKey

	movShip1_moveRight:           
	;checking for boundaries
	                              mov              bx, shipOffsetX1
	                              mov              cx, bx
	                              add              cx, shipSizeX1
	                              cmp              cx, screenMaxX1
	                              jnb              movShip1_readKey
	                              add              bx, shipSpeed1
	                              mov              DI, offset shipOffsetX1
	                              mov              [DI], bx

	                              jmp              movShip1_readKey


	movShip1_fire:                
	                              mov              bx, 0
	                              LEA              SI, BulletDirection
	movShip1_findEmptyBullet:     MOV              DL, 0
	                              CMP              [SI], DL
	                              JE               movShip1_found
	                              CMP              BX, MAXBULLET
	                              JE               movShip1_notFound
	                              INC              BX
	                              INC              SI
	                              JMP              movShip1_findEmptyBullet
    
	movShip1_notFound:            ret

	movShip1_found:               mov              dl, 1
	                              mov              [SI], dl                                                                             	; For Right Direction
	                              LEA              DI, BulletOffset
	                              ADD              DI, BX
	                              ADD              DI, BX
	                              ADD              DI, BX
	                              ADD              DI, BX

	; For x
                    
	                              mov              dX, shipOffsetX1
	                              add              DX, shipSizeX1
	                              INC              DX
	                              MOV              [DI], DX
                
	; For y

	                              mov              dx, shipSizeY1
	                              sub              dx, BulletYSize

	; These steps for division
	; First push ax to stack as we need it after that
	                              push             ax

	; Divsion Process
	                              mov              ax, dx
	                              mov              cl, 2
	                              div              cl
	                              mov              dx, ax

	; retrive the value of reg ax
	                              pop              ax
	                              add              dx, shipOffsetY1

	                              mov              [DI] + 2, dx
	                              jmp              movShip1_readFire

	                      
	                              ret

movShip1 ENDP
movShip2 PROC near
	                              mov              cx, 0
	                              cmp              ah, key_enter
	                              jz               movShip2_donotErase
	                              call             eraseShip2                                                                           	; get the pressed key from the user
	movShip2_donotErase:          

	                              cmp              ah,key_upArrow
	                              jz               movShip2_moveUp

	                              cmp              ah,50H
	                              jz               movShip2_moveDown

	                              cmp              ah,key_leftArrow
	                              jz               movShip2_moveLeft

	                              cmp              ah,key_rightArrow
	                              jz               movShip2_moveRight
	                              cmp              ah,key_enter
	                              jz               movShip2_fire



	movShip2_readKey:             
	                              call             Drawship2

	                              mov              ah,0                                                                                 	;wait for a key to be pressed and put it in ah, ah:al = scan code: ASCII code
	                              int              16h

	                              mov              cx, 0                                                                                	; initialize cx to use it to iterate over the shipSize
	                              jmp              gameLoopRoutine
	;///////////////////////////////////////////////////////////////////////////////////////
	movShip2_moveUp:              
	;checking for boundaries
	                              mov              bx, shipOffsetY2
	                              cmp              bx, screenMinY2
	                              jna              movShip2_readKey
	                              sub              bx, shipSpeed2
	                              mov              DI, offset shipOffsetY2
	                              mov              [DI], bx

	                              jmp              movShip2_readKey

	movShip2_moveDown:            
	;checking for boundaries
	                              mov              bx, shipOffsetY2
	                              mov              cx, bx
	                              add              cx, shipSizeY2
	                              cmp              cx, screenMaxY2
	                              jnb              movShip2_readKey
	                              add              bx,shipSpeed2
	                              mov              DI, offset shipOffsetY2
	                              mov              [DI], bx

	                              jmp              movShip2_readKey

	movShip2_moveLeft:            
	;checking for boundaries
	                              mov              bx, shipOffsetX2
	                              cmp              bx, screenMinX2
	                              jna              movShip2_readKey
	                              sub              bx, shipSpeed2
	                              mov              DI, offset shipOffsetX2
	                              mov              [DI], bx
	          
	                              jmp              movShip2_readKey

	movShip2_moveRight:           
	;checking for boundaries
	                              mov              bx, shipOffsetX2
	                              mov              cx, bx
	                              add              cx, shipSizeX2
	                              cmp              cx, screenMaxX2
	                              jnb              movShip2_readKey
	                              add              bx, shipSpeed2
	                              mov              DI, offset shipOffsetX2
	                              mov              [DI], bx

	                              jmp              movShip2_readKey
	                              ret
	movShip2_fire:                
	                              mov              bx, 0
	                              LEA              SI, BulletDirection
	movShip2_findEmptyBullet:     MOV              DL, 0
	                              CMP              [SI], DL
	                              JE               movShip2_found
	                              CMP              BX, MAXBULLET
	                              JE               movShip2_notFound
	                              INC              BX
	                              INC              SI
	                              JMP              movShip2_findEmptyBullet
    
	movShip2_notFound:            ret

	movShip2_found:               mov              dl, 2
	                              mov              [SI], dl                                                                             	; For Right Direction
	                              LEA              DI, BulletOffset
	                              ADD              DI, BX
	                              ADD              DI, BX
	                              ADD              DI, BX
	                              ADD              DI, BX

	; For x
                    
	                              mov              dX, shipOffsetX2
	                              sub              dx, BulletXSize
	                              INC              DX
	                              MOV              [DI], DX
                
	; For y

	                              mov              dx, shipSizeY2
	                              sub              dx, BulletYSize

	; These steps for division
	; First push ax to stack as we need it after that
	                              push             ax

	; Divsion Process
	                              mov              ax, dx
	                              mov              cl, 2
	                              div              cl
	                              mov              dx, ax

	; retrive the value of reg ax
	                              pop              ax
	                              add              dx, shipOffsetY2

	                              mov              [DI] + 2, dx
	                              jmp              movShip1_readFire

	                      
movShip2 ENDP
updateBullets proc NEAR
	                              mov              BX, 0
	                              LEA              SI, BulletDirection
	                              LEA              DI, BulletOffset

	updateBullets_CHECKBULLETS:   mov              ah,0
	                              mov              Al, [SI]
	                              CMP              Al, 0
	                              JE               updateBullets_ContinueBullet
	                              CALL             EraseBullet
	                              MOV              dx, MAXBULLETRIGHT
	                              CMP              [DI], dx
	                              JLE              updateBullets_StopBullet
	                              CMP              [DI], MAXBULLETLEFT

	                              JGE              updateBullets_StopBullet
	                              CALL             Bullet_Offset
	                              CALL             DrawBullet
	                              jmp              updateBullets_ContinueBullet

	updateBullets_StopBullet:     mov              dl, 0
	                              mov              [SI], dl
	updateBullets_ContinueBullet: INC              BX
	                              ADD              SI, 1
	                              ADD              DI, 4
	                              CMP              BX, MAXBULLET
	                              JE               updateBullets_ContinueBullets
	                              JMP              updateBullets_CHECKBULLETS

	updateBullets_ContinueBullets:
	                              delay            delayDuration

updateBullets endp

BulletChecker PROC NEAR

	                              mov              BX, 0
	                              LEA              SI, BulletDirection
	                              LEA              DI, BulletOffset
	CHECKBULLETS:                 mov              ah,0
	                              mov              Al, [SI]
	                              CMP              Al, 0
	                              JE               ContinueBullet
	                              CALL             EraseBullet

	                              MOV              dx, MAXBULLETRIGHT
	                              CMP              [DI], dx
	                              JLE              StopBullet
	                              CMP              [DI], MAXBULLETLEFT
	                              JGE              StopBullet

	                              mov              dx, shipOffsetX1
	                              add              dx, shipSizeX1
	                              CMP              [DI], dx
	                              JLE              CheckY1_Up

	                              mov              dx, shipOffsetX2
	                              Sub              dx, 6
	                              CMP              [DI], dx
	                              JGE              CheckY2_Up

	                              CALL             Bullet_Offset
	                              CALL             DrawBullet
	                              jmp              ContinueBullet
	CheckY1_Up:                   
	                              mov              dx, [DI] + 2
	                              mov              cx, shipOffsetY1
	;add cx, 16
	                              CMP              dx, Cx
	                              jge              CheckY1_Down
	                              jmp              ContinueBullet

	CheckY1_Down:                 
	                              mov              dx, [DI] + 2
	                              mov              cx, shipOffsetY1
	                              add              cx, shipSizeY1
	                              CMP              dx, Cx
	                              jle              BulletCollusion
	                              jmp              ContinueBullet

	CheckY2_Up:                   
	                              mov              dx, [DI] + 2
	                              mov              cx, shipOffsetY2
	;add cx, 16
	                              CMP              dx, Cx
	                              jge              CheckY2_Down
	                              jmp              ContinueBullet

	CheckY2_down:                 
	                              mov              dx, [DI] + 2
	                              mov              cx, shipOffsetY2
	                              add              cx, shipSizeY1
	                              CMP              dx, Cx
	                              jle              BulletCollusion2
	                              jmp              ContinueBullet

	StopBullet:                   mov              dl, 0
	                              mov              [SI], dl
	                              JMP              ContinueBullet

	ContinueBullet:               INC              BX
	                              ADD              SI, 1
	                              ADD              DI, 4
	                              CMP              BX, MAXBULLET
	                              JE               ENDCHECKBULLET
	                              JMP              CHECKBULLETS
						
	BulletCollusion:              
	                              mov              dl, 0
	                              mov              [SI], dl
	                              mov              dl, HEALTH1
	                              sub              dl, 10
	                              mov              HEALTH1, dl
	                              call             DrawHealthbar
	                              mov              al, SHIP_DAMAGE_COLOR
	                              call             Eraseship1
	                              delay            SHIP_DAMAGE_EFFECT_DELAY
	                              call             Drawship1
	                              jmp              ContinueBullet
	;INT 21h
	BulletCollusion2:             
	                              mov              dl, 0
	                              mov              [SI], dl
	                              mov              dl, HEALTH2
	                              sub              dl, 10
	                              mov              HEALTH2, dl
	                              call             DrawHealthbar2
	                              mov              al, SHIP_DAMAGE_COLOR
	                              call             Eraseship2
	                              delay            SHIP_DAMAGE_EFFECT_DELAY

	                              call             Drawship2
	                              jmp              ContinueBullet


	ENDCHECKBULLET:               ret
BulletChecker ENDP
drawShip1 PROC	near
	; initialize containers
	                              mov              SI, offset ship1
	                              mov              cx, shipSizeX1                                                                       	;Column X
	                              mov              dx, shipSizeY1                                                                       	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	drawShip1_drawIt:             
	                              mov              bl, [SI]                                                                             	;use color from array color for testing
	                              and              bl, bl
	                              JZ               drawShip1_back
	                              add              cx, shipOffsetX1
	                              add              dx, shipOffsetY1
	                              mov              al, [SI]                                                                             	;  use color from array color for testing
	                              int              10h                                                                                  	;  draw the pixel
	                              sub              cx, shipOffsetX1
	                              sub              dx, shipOffsetY1

	drawShip1_back:               
	                              inc              SI
	                              DEC              Cx                                                                                   	;  loop iteration in x direction
	                              JNZ              drawShip1_drawIt                                                                     	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, shipSizeX1                                                                       	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              JZ               drawShip1_allDrawn                                                                   	;  both x and y reached 00 so finish drawing
	                              jmp              drawShip1_drawIt
	drawShip1_allDrawn:           ret
drawShip1 ENDP
eraseShip1 PROC near
	; initialize containers
	                              mov              SI, offset ship1                                                                     	;shipY is (shipX index + size * 2) so we can use Si for both
	                              mov              cx, shipSizeX1                                                                       	;Column X
	                              mov              dx, shipSizeY1                                                                       	;Row Y
	                              push             ax
	                              mov              ah, 0ch
	                              cmp              al, SHIP_DAMAGE_COLOR
	                              jz               eraseShip1_drawIt                                                                    	;Draw Pixel Command
	                              mov              al, 0h                                                                               	;to be replaced with background
	
	eraseShip1_drawIt:            
	                              mov              bl, [SI]                                                                             	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               eraseShip1_back
	                              add              cx, shipOffsetX1
	                              add              dx, shipOffsetY1
	                              int              10h                                                                                  	;  draw the pixel
	                              sub              cx, shipOffsetX1
	                              sub              dx, shipOffsetY1

	eraseShip1_back:              
	                              inc              SI
	                              DEC              Cx                                                                                   	;  loop iteration in x direction
	                              JNZ              eraseShip1_drawIt                                                                    	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, shipSizeX1                                                                       	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              JZ               eraseShip1_allDrawn                                                                  	;  both x and y reached 00 so finish drawing
	                              jmp              eraseShip1_drawIt
	eraseShip1_allDrawn:          pop              ax
	                              ret
eraseShip1 ENDP



Drawship2 PROC	near
	; initialize containers
	                              mov              SI, offset ship2
	                              mov              cx, 0                                                                                	;Column X
	                              mov              dx, shipSizeY1                                                                       	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	Drawship2_drawIt:             
	                              mov              bl, [SI]                                                                             	;use color from array color for testing
	                              and              bl, bl
	                              JZ               Drawship2_back
	                              add              cx, shipOffsetX2
	                              add              dx, shipOffsetY2
	                              mov              al, [SI]                                                                             	;  use color from array color for testing
	                              int              10h                                                                                  	;  draw the pixel
	                              sub              cx, shipOffsetX2
	                              sub              dx, shipOffsetY2

	Drawship2_back:               
	                              inc              SI
	                              INC              Cx                                                                                   	;  loop iteration in x direction
	                              CMP              CX, shipSizeX1
	                              JNZ              Drawship2_drawIt                                                                     	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 0                                                                                	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              JZ               Drawship2_allDrawn                                                                   	;  both x and y reached 00 so finish drawing
	                              jmp              Drawship2_drawIt
	Drawship2_allDrawn:           ret
Drawship2 ENDP
eraseShip2 PROC near
	; initialize containers
	                              mov              SI, offset ship2                                                                     	;shipY is (shipX index + size * 2) so we can use Si for both
	                              mov              cx, 0                                                                                	;Column X
	                              mov              dx, shipSizeY1                                                                       	;Row Y
	                              push             ax
	                              mov              ah, 0ch
	                              cmp              al, SHIP_DAMAGE_COLOR
	                              jz               eraseShip2_drawIt                                                                    	;Draw Pixel Command
	                              mov              al, 0h                                                                               	;to be replaced with background
	
	eraseShip2_drawIt:            
	                              mov              bl, [SI]                                                                             	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               eraseShip2_back
	                              add              cx, shipOffsetX2
	                              add              dx, shipOffsetY2
	                              int              10h                                                                                  	;  draw the pixel
	                              sub              cx, shipOffsetX2
	                              sub              dx, shipOffsetY2

	eraseShip2_back:              
	                              inc              SI
	                              INC              Cx                                                                                   	;  loop iteration in x direction
	                              CMP              CX, shipSizeX1
	                              JNZ              eraseShip2_drawIt                                                                    	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 0                                                                                	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              JZ               eraseShip2_allDrawn                                                                  	;  both x and y reached 00 so finish drawing
	                              jmp              eraseShip2_drawIt
	eraseShip2_allDrawn:          pop              ax
	                              ret
eraseShip2 ENDP

DrawBullet PROC near
	; initialize containers
	                              push             SI
	                              push             BX
	                              push             AX
	                              mov              AL, 2
	                              CMP              [SI], AL
	                              JZ               REVERSE
	                              mov              SI, offset Bullet
	                              mov              cx, BulletXSize                                                                      	;Column X
                        
	                              mov              dx, BulletYSize                                                                      	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	BulletDrawit:                 
	                              mov              bl, [SI]                                                                             	;use color from array color for testing
	                              and              bl, bl
	                              JZ               Bulletback
	                              add              cx, [DI]
	                              add              dx, [DI] + 2
	                              mov              al, [SI]                                                                             	;  use color from array color for testing
	                              int              10h                                                                                  	;  draw the pixel
	                              sub              cx, [DI]
	                              sub              dx, [DI] + 2

	Bulletback:                   
	                              inc              SI
	                              DEC              Cx                                                                                   	;  loop iteration in x direction
	                              JNZ              BulletDrawit                                                                         	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, BulletXSize                                                                      	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              JZ               Bulletalldrawn                                                                       	;  both x and y reached 00 so finish drawing
	                              jmp              BulletDrawit

	REVERSE:                      
	                              mov              SI, offset Bullet
	                              mov              cx, 0                                                                                	;Column X
                        
	                              mov              dx, BulletYSize                                                                      	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	BulletDrawit2:                
	                              mov              bl, [SI]                                                                             	;use color from array color for testing
	                              and              bl, bl
	                              JZ               Bulletback2
	                              add              cx, [DI]
	                              add              dx, [DI] + 2
	                              mov              al, [SI]                                                                             	;  use color from array color for testing
	                              int              10h                                                                                  	;  draw the pixel
	                              sub              cx, [DI]
	                              sub              dx, [DI] + 2

	Bulletback2:                  
	                              inc              SI
	                              inc              Cx
	                              CMP              CX, BulletXSize                                                                      	;  loop iteration in x direction
	                              JNZ              BulletDrawit2                                                                        	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 0                                                                                	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              JZ               Bulletalldrawn                                                                       	;  both x and y reached 00 so finish drawing
	                              jmp              BulletDrawit2

	Bulletalldrawn:               pop              AX
	                              POP              BX
	                              POP              SI
	                              ret
DrawBullet ENDP
EraseBullet PROC near
	; initialize containers
	                              PUSH             SI
	                              PUSH             BX
	                              push             ax
	                              MOV              AL, 2
	                              CMP              [SI], AL
	                              JZ               REVERSE2


	                              mov              SI, offset Bullet                                                                    	;shipY is (shipX index + size * 2) so we can use Si for both
	                              mov              Cx, BulletXSize                                                                      	;Column X
	                              mov              dx, BulletYSize                                                                      	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	                              mov              al, 0h                                                                               	;to be replaced with background
	
	Drawit2Bullet:                
	                              mov              bl, [SI]                                                                             	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               back2Bullet
	                              add              cx, [DI]
	                              add              dx, [DI] + 2
	                              int              10h                                                                                  	;  draw the pixel
	                              sub              cx, [DI]
	                              sub              dx, [DI] + 2

	back2Bullet:                  
	                              inc              SI
	                              DEC              cx                                                                                   	;  loop iteration in x direction
	                              JNZ              Drawit2Bullet                                                                        	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              cx, BulletXSize                                                                      	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              dx                                                                                   	;  loop iteration in y direction
	                              JZ               alldrawn2Bullet                                                                      	;  both x and y reached 00 so finish drawing
	                              jmp              Drawit2Bullet


	REVERSE2:                     mov              Cx, 0                                                                                	;Column X
	                              mov              dx, BulletYSize                                                                      	;Row Y
	                              mov              SI, offset Bullet                                                                    	;shipY is (shipX index + size * 2) so we can use Si for both

	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	                              mov              al, 0h                                                                               	;to be replaced with background
	
	Drawit2BulletREV:             
	                              mov              bl, [SI]                                                                             	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               back2BulletREV
	                              add              cx, [DI]
	                              add              dx, [DI] + 2
	                              int              10h                                                                                  	;  draw the pixel
	                              sub              cx, [DI]
	                              sub              dx, [DI] + 2

	back2BulletREV:               
	                              inc              SI
	                              inc              cx                                                                                   	;  loop iteration in x direction
	                              cmp              cx, BulletXSize
	                              JNZ              Drawit2BulletREV                                                                     	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              cx, 0                                                                                	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              dx                                                                                   	;  loop iteration in y direction
	                              JZ               alldrawn2Bullet                                                                      	;  both x and y reached 00 so finish drawing
	                              jmp              Drawit2BulletREV
	alldrawn2Bullet:              
	                              pop              ax
	                              POP              BX
	                              POP              SI
	                              ret
EraseBullet ENDP
Bullet_Offset PROC near
                       
	                              push             ax
	                              push             bx
	                              mov              cl, BulletSpeed
	                              mov              ch, 0
	                              mov              dl, 0
	                              cmp              [SI], dl
	                              JZ               Bullete_Offset_ret
	                              mov              dl, 1
	                              cmp              [SI], dl
	                              JZ               INCREASE_SPEED
	                              sub              [DI], cx
	                              jmp              Bullete_Offset_ret
	INCREASE_SPEED:               add              [DI], cx
	Bullete_Offset_ret:           pop              BX
	                              pop              ax
	                              ret
Bullet_Offset ENDP
drawShape2x2 PROC

	                              mov              cx, shapeSizeX                                                                       	;Column X
	                              mov              dx, shapeSizeY                                                                       	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	drawShape2x2_drawIt:          
	                              mov              bl, [SI]                                                                             	;use color from array color for testing
	                              and              bl, bl
	                              JZ               drawShape2x2_back
	                              mov              al, [SI]                                                                             	;  use color from array color for testing
	                              push             cx
	                              push             dx
	                              add              cx,cx
	                              add              dx,dx
	                              add              cx,shapeOffsetX
	                              add              dx,shapeOffsetY
	                              int              10h
	                              DEC              cx
	                              int              10h
	                              dec              dx
	                              inc              cx
	                              int              10h
	                              dec              cx
	                              int              10h                                                                                  	;  draw the pixel
	                              pop              dx
	                              pop              cx

	drawShape2x2_back:            
	                              inc              SI
	                              DEC              Cx
	                              JNZ              drawShape2x2_drawIt                                                                  	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, shapeSizeX                                                                       	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX
	                              JZ               drawShape2x2_allDrawn                                                                	;  both x and y reached 00 so finish drawing
	                              jmp              drawShape2x2_drawIt
	drawShape2x2_allDrawn:        ret
drawShape2x2 ENDP

background PROC near
	                              MOV              CX, 640                                                                              	;set the width (X) up to ff, dont forget to change this number in the loop
	                              MOV              DX, 400                                                                              	;set the hieght (Y) up to AA
	                              jmp              background_start                                                                     	;Avoid drawing before the calculations
	background_drawIt:            
	                              push             cx
	                              push             dx
	                              add              cx,cx
	                              add              cx,cx
	                              add              dx,dx
	                              mov              AX, 0                                                                                	;  |
	                              mov              AL, DL                                                                               	;  |  > Multuply DL*Dl and Store in AX then BX
	                              Mul              DL                                                                                   	;  |
	                              mov              bx, AX                                                                               	;  |
	                              mov              AL, CL                                                                               	;  \
	                              Mul              CL                                                                                   	;  \   > Multuply CL*Cl and Store in AX


	                              add              bx, AX
	                              xchg             ax,bx
	                              mov              bl, 8
	                              mov              ah, 0

	                              div              bl
	                              xchg             al,ah
	                              add              al, 7fh
	                              MOV              AH,0Ch                                                                               	;set the configuration to writing a pixel
	                              INT              10h
	                              pop              dx
	                              pop              cx                                                                                   	;execute the configuration
	background_start:             
        
	                              DEC              CX                                                                                   	;  loop iteration in x direction
	                              JNZ              TRY                                                                                  	;  check if we can draw current x and y and excape the y iteration
	                              mov              CX, 640                                                                              	;  if loop iteration in y direction, then x should background_start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              JZ               ENDING                                                                               	;  both x and y reached 00 so end program
	TRY:                          jmp              background_drawIt                                                                    	; loop
	ENDING:                       
	                              RET
background ENDP
eraseArrows PROC near
	; initialize containers
	                              mov              SI, offset arrow                                                                     	;shipY is (shipX index + size * 2) so we can use Si for both
	                              mov              cx, arrowSizeX                                                                       	;Column X
	                              mov              dx, arrowSizeY                                                                       	;Row Y
	                              push             ax
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	                              mov              al, 0h                                                                               	;to be replaced with background
	
	eraseArrows_drawIt:           
	                              mov              bl, [SI]                                                                             	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               eraseArrows_back
	                              add              cx, arrowoffsetX
	                              add              dx, arrowoffsetY
	                              int              10h                                                                                  	;  draw the pixel
	                              sub              cx, arrowoffsetX
	                              sub              dx, arrowoffsetY
	                              push             cx
	                              push             dx
	                              mov              AX, 0                                                                                	;  |
	                              mov              AL, DL                                                                               	;  |  > Multuply DL*Dl and Store in AX then BX
	                              Mul              DL                                                                                   	;  |
	                              mov              bx, AX                                                                               	;  |
	                              mov              AL, CL                                                                               	;  \
	                              Mul              CL                                                                                   	;  \   > Multuply CL*Cl and Store in AX


	                              add              bx, AX
	                              xchg             ax,bx
	                              mov              bl, 8
	                              mov              ah, 0

	                              div              bl
	                              xchg             al,ah
	                              add              al, 7fh
	                              MOV              AH,0Ch
	                              add              cx, arrowoffsetX
	                              add              dx, arrowoffsetY                                                                     	;set the configuration to writing a pixel
	                              INT              10h
	                              pop              dx
	                              pop              cx

	eraseArrows_back:             
	                              inc              SI
	                              DEC              Cx                                                                                   	;  loop iteration in x direction
	                              JNZ              eraseArrows_drawIt                                                                   	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, arrowSizeX                                                                       	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              JZ               eraseArrows_allDrawn                                                                 	;  both x and y reached 00 so finish drawing
	                              jmp              eraseArrows_drawIt
	eraseArrows_allDrawn:         pop              ax
	;/////////////////////////////////////////////////////////////////////////////////////////////
	; initialize containers
	                              mov              SI, offset arrow                                                                     	;shipY is (shipX index + size * 2) so we can use Si for both
	                              mov              cx, 0                                                                                	;Column X
	                              mov              dx, arrowSizeY                                                                       	;Row Y
	                              push             ax
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	                              mov              al, 0h                                                                               	;to be replaced with background
	
	eraseArrows_drawItR:          
	                              mov              bl, [SI]                                                                             	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               eraseArrows_backR
	                              add              cx, arrowoffsetXRev
	                              add              dx, arrowoffsetY
	                              int              10h                                                                                  	;  draw the pixel
	                              sub              cx, arrowoffsetXRev
	                              sub              dx, arrowoffsetY
	                              push             cx
	                              push             dx
	                              mov              AX, 0                                                                                	;  |
	                              mov              AL, DL                                                                               	;  |  > Multuply DL*Dl and Store in AX then BX
	                              Mul              DL                                                                                   	;  |
	                              mov              bx, AX                                                                               	;  |
	                              mov              AL, CL                                                                               	;  \
	                              Mul              CL                                                                                   	;  \   > Multuply CL*Cl and Store in AX


	                              add              bx, AX
	                              xchg             ax,bx
	                              mov              bl, 8
	                              mov              ah, 0

	                              div              bl
	                              xchg             al,ah
	                              add              al, 7fh
	                              MOV              AH,0Ch
	                              add              cx, arrowoffsetXRev
	                              add              dx, arrowoffsetY                                                                     	;set the configuration to writing a pixel
	                              INT              10h
	                              pop              dx
	                              pop              cx

	eraseArrows_backR:            
	                              inc              SI
	                              INC              Cx                                                                                   	;  loop iteration in x direction
	                              CMP              CX, arrowSizeX
	                              JNZ              eraseArrows_drawItR                                                                  	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 0                                                                                	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              JZ               eraseArrows_allDrawnR                                                                	;  both x and y reached 00 so finish drawing
	                              jmp              eraseArrows_drawItR
	eraseArrows_allDrawnR:        pop              ax
	                              ret
eraseArrows ENDP
	; BX: 0 down character1, 1 down character2, 2 up character1, 3 up character2
DrawMsgWithBox Proc near
	                              mov              cx, bx
	                              and              cx, 2
	                              JNZ              DRAWMSGUP
	                              
	                              mov              RECXEND, 532
	                              mov              RECYEND, 85
	                              mov              RECXSTART, 108
	                              mov              RECYSTART, 55
	                              mov              RECCOLOR, 12h
	                              call             DrawRec

	                              mov              RECXEND, 530
	                              mov              RECYEND, 87
	                              mov              RECXSTART, 110
	                              mov              RECYSTART, 53
	                              call             DrawRec

	                              mov              RECYEND, 85
	                              mov              RECYSTART, 55
	                              mov              RECCOLOR, 1dh
	                              call             DrawRec
	
	                              mov              RECXEND, 526
	                              mov              RECYEND, 70
	                              mov              RECXSTART, 114
	                              mov              RECYSTART, 59
	                              mov              RECCOLOR, 1eh
	                              call             DrawRec
	                              jmp              ALL_DRAWN_MSGBox
	
	DRAWMSGUP:                    

	                              mov              RECXEND, 532
	                              mov              RECYEND, 45
	                              mov              RECXSTART, 108
	                              mov              RECYSTART, 15
	                              mov              RECCOLOR, 12h
	                              call             DrawRec

	                              mov              RECXEND, 530
	                              mov              RECYEND, 47
	                              mov              RECXSTART, 110
	                              mov              RECYSTART, 13
	                              call             DrawRec

	                              mov              RECYEND, 45
	                              mov              RECYSTART, 15
	                              mov              RECCOLOR, 1dh
	                              call             DrawRec
	
	                              mov              RECXEND, 526
	                              mov              RECYEND, 30
	                              mov              RECXSTART, 114
	                              mov              RECYSTART, 19
	                              mov              RECCOLOR, 1eh
	                              call             DrawRec

	ALL_DRAWN_MSGBox:             

	                              test             bx, 1
	                              jnz              DRAWMSGTAILRIGHT

	                              mov              REV, 0
	                              mov              Ers, 0
	                              editDrawPrams    MSGTAIL, MSGTAILXsize, MSGTAILYsize, MSGTAILXoffset1, MSGTAILYoffset1
	                              test             bx, 2
	                              jnz              DRAW_MSGTAIL_L_DOWN
	                              editDrawPrams    MSGTAIL, MSGTAILXsize, MSGTAILYsize, MSGTAILXoffset1, MSGTAILYoffset2
	DRAW_MSGTAIL_L_DOWN:          call             drawShape
	                              jmp              MSGtAILEND
	DRAWMSGTAILRIGHT:             
	                              mov              REV, 1
	                              mov              Ers, 0
	                              editDrawPrams    MSGTAIL, MSGTAILXsize, MSGTAILYsize, MSGTAILXoffset2, MSGTAILYoffset1

	                              test             bx, 2
	                              jnz              DRAW_MSGTAIL_R_DOWN
	                              editDrawPrams    MSGTAIL, MSGTAILXsize, MSGTAILYsize, MSGTAILXoffset2, MSGTAILYoffset2
	DRAW_MSGTAIL_R_DOWN:          call             drawShape

	MSGtAILEND:                   ret
DrawMsgWithBox endp

DrawHealthbar PROC near
	                              push             bx
	                              mov              ch, 0
	                              mov              cl, 200                                                                              	;Column X
	                              add              cl, 40
	                              mov              dx, screenMaxY1+20                                                                   	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	ERASE_H_Border:               
	                              mov              al, 0b2h                                                                             	;  use color from array color for testing
	                              int              10h                                                                                  	;  draw the pixel
	                              DEC              Cx                                                                                   	;  loop iteration in x direction
	                              cmp              CX, 40
	                              JNZ              ERASE_H_Border                                                                       	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cl, 200                                                                              	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              add              cl, 40
	                              DEC              DX
	                              cmp              dx, screenMaxY2+10                                                                   	;  loop iteration in y direction
	                              JZ               ALL_ERASE_H_Border                                                                   	;  both x and y reached 00 so finish drawing
	                              jmp              ERASE_H_Border
	ALL_ERASE_H_Border:           

	                              mov              ch, 0
	                              mov              cl, HEALTH1
	                              cmp              cl, 200
	                              ja               ALL_DRAWN_H_Border
	                              cmp              cl, 0
	                              jz               ALL_DRAWN_H_Border                                                                   	;Column X
	                              add              cl, 40
	                              mov              dx, screenMaxY1+20                                                                   	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	DRAW_H_Border:                
	                              mov              al, 0h                                                                               	;  use color from array color for testing
	                              cmp              dx, screenMaxY1+19
	                              jz               DRAWwithblack_H_Border
	                              cmp              dx, screenMaxY1+12
	                              jz               DRAWwithblack_H_Border
	                              cmp              dx, screenMaxY1+11
	                              jz               DRAWwithblack_H_Border
	                              cmp              dx, screenMaxY1+20
	                              jz               DRAWwithblack_H_Border
	                              mov              al, HEALTH1
	                              mov              ah, 0
	                              mov              bl, 20
	                              div              bl
	                              add              al, 40h
	                              cmp              dx, screenMaxY1+15
	                              jz               DRAWwithblack_H_Border
	                              cmp              dx, screenMaxY1+16
	                              jz               DRAWwithblack_H_Border
	                              mov              al, HEALTH1
	                              mov              ah, 0
	                              mov              bl, 20
	                              div              bl
	                              add              al, 28h                                                                              	;  use color from array color for testing
	DRAWwithblack_H_Border:       mov              ah, 0ch                                                                              	;Draw Pixel Command
	                              int              10h                                                                                  	;  draw the pixel
	                              DEC              Cx                                                                                   	;  loop iteration in x direction
	                              cmp              CX, 40
	                              JNZ              DRAW_H_Border                                                                        	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cl, HEALTH1                                                                          	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              add              cl, 40
	                              DEC              DX
	                              cmp              dx, screenMaxY2+10                                                                   	;  loop iteration in y direction
	                              JZ               ALL_DRAWN_H_Border                                                                   	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_H_Border
	ALL_DRAWN_H_Border:           pop              bx
	                              ret
DrawHealthbar endp

DrawHealthbar2 PROC near
	                              push             bx
	                              mov              cx, 400
	                              mov              dx, screenMaxY1+20                                                                   	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	ERASE_H_Border2:              
	                              mov              al, 0b2h                                                                             	;  use color from array color for testing
	                              int              10h                                                                                  	;  draw the pixel
	                              inc              Cx                                                                                   	;  loop iteration in x direction
	                              cmp              CX, 600
	                              JNZ              ERASE_H_Border2                                                                      	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 400                                                                              	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX
	                              cmp              dx, screenMaxY2+10                                                                   	;  loop iteration in y direction
	                              JZ               ALL_ERASE_H_Border2                                                                  	;  both x and y reached 00 so finish drawing
	                              jmp              ERASE_H_Border2
	ALL_ERASE_H_Border2:          
	                              mov              ch, 0
	                              mov              cl, HEALTH2
	                              cmp              cl, 200
	                              ja               ALL_DRAWN_H_Border2
	                              cmp              cl, 0
	                              jz               ALL_DRAWN_H_Border2                                                                  	;Column X
	                              mov              dx, screenMaxY1+20                                                                   	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	DRAW_H_Border2:               
	                              mov              al, 0h                                                                               	;  use color from array color for testing
	                              cmp              dx, screenMaxY1+19
	                              jz               DRAWwithblack_H_Border2
	                              cmp              dx, screenMaxY1+12
	                              jz               DRAWwithblack_H_Border2
	                              cmp              dx, screenMaxY1+11
	                              jz               DRAWwithblack_H_Border2
	                              cmp              dx, screenMaxY1+20
	                              jz               DRAWwithblack_H_Border2
	                              mov              al, HEALTH2
	                              mov              ah, 0
	                              mov              bl, 20
	                              div              bl
	                              add              al, 40h
	                              cmp              dx, screenMaxY1+15
	                              jz               DRAWwithblack_H_Border2
	                              cmp              dx, screenMaxY1+16
	                              jz               DRAWwithblack_H_Border2
	                              mov              al, HEALTH2
	                              mov              ah, 0
	                              mov              bl, 20
	                              div              bl
	                              add              al, 28h
	DRAWwithblack_H_Border2:      
						
								  			   
	                              mov              bl, HEALTH2
	                              mov              bh, 0
	                              add              cx, 600
	                              sub              cx, bx
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	                              int              10h
	                              add              cx, bx
	                              sub              cx, 600                                                                              	;  draw the pixel
	                              dec              Cx
	                              JNZ              DRAW_H_Border2                                                                       	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cl, HEALTH2                                                                          	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX
	                              cmp              dx, screenMaxY2+10                                                                   	;  loop iteration in y direction
	                              JZ               ALL_DRAWN_H_Border2                                                                  	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_H_Border2
	ALL_DRAWN_H_Border2:          pop              bx
	                              ret
DrawHealthbar2 endp


DrawLayout PROC near
	;///////////////////////////////////UPPER_BAR\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	
	                              mov              RECXEND, screenMaxX2
	                              mov              RECYEND, screenMinY1
	                              mov              RECXSTART, 0
	                              mov              RECYSTART, 0
	                              mov              RECCOLOR, 099h
	                              call             DrawRec

	                              mov              RECXEND, 559
	                              mov              RECYEND, screenMinY1
	                              mov              RECXSTART, 79
	                              mov              RECYSTART, 0
	                              mov              RECCOLOR, 095h
	                              call             DrawRec

	;//////////////Borders\\\\\\\\\\\\\

	                              mov              BorderXEND, 559
	                              mov              BorderYEND, 100
	                              mov              BorderMIDDLE, 556
	                              mov              BorderMIDDLED1, 557
	                              mov              BorderMIDDLED2, 555
	                              mov              BorderXSTART, 552
	                              mov              BorderYSTART, 0
	                              mov              BorderBRIGHTColor, 56h
	                              mov              BorderDARKColor, 35h
	                              call             DrawVertBorder

	                              mov              BorderXEND, 86
	                              mov              BorderMIDDLE, 83
	                              mov              BorderMIDDLED1, 84
	                              mov              BorderMIDDLED2, 82
	                              mov              BorderXSTART, 79
	                              call             DrawVertBorder

	                              mov              BorderXEND, 639
	                              mov              BorderMIDDLE, 636
	                              mov              BorderMIDDLED1, 637
	                              mov              BorderMIDDLED2, 635
	                              mov              BorderXSTART, 632
	                              mov              BorderBRIGHTColor, 39h
	                              mov              BorderDARKColor, 22h
	                              call             DrawVertBorder

	                              mov              BorderXEND, 6
	                              mov              BorderMIDDLE, 3
	                              mov              BorderMIDDLED1, 4
	                              mov              BorderMIDDLED2, 2
	                              mov              BorderXSTART, 0FFFFH
	                              call             DrawVertBorder

	                              mov              BorderXEND, 640
	                              mov              BorderYEND, 7
	                              mov              BorderMIDDLE, 4
	                              mov              BorderMIDDLED1, 3
	                              mov              BorderMIDDLED2, 5
	                              mov              BorderXSTART, 0
	                              mov              BorderYSTART, 0
	                              call             DrawHorizBorder

	                              mov              BorderYEND, 100
	                              mov              BorderMIDDLE, 97
	                              mov              BorderMIDDLED1, 98
	                              mov              BorderMIDDLED2, 96
	                              mov              BorderYSTART, 93
	                              call             DrawHorizBorder

	                              mov              BorderXEND, 559
	                              mov              BorderXSTART, 79
	                              mov              BorderBRIGHTColor, 65h
	                              mov              BorderDARKColor, 35h
	                              call             DrawHorizBorder

	                              mov              BorderYEND, 7
	                              mov              BorderMIDDLE, 4
	                              mov              BorderMIDDLED1, 3
	                              mov              BorderMIDDLED2, 5
	                              mov              BorderYSTART, 0
	                              call             DrawHorizBorder


	;//////////////////////////////////DrawCharacter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


	                              mov              REV, 0
	                              mov              Ers, 0
	                              editDrawPrams    CharacterC, CharacterSizeX, CharacterSizeY, CharacteroffsetX, CharacteroffsetY
	                              call             drawShape

	                              mov              REV, 1
	                              mov              Ers, 0
	                              editDrawPrams    CharacterC, CharacterSizeX, CharacterSizeY, CharacteroffsetX2, CharacteroffsetY
	                              call             drawShape

	                              mov              REV, 0
	                              mov              Ers, 0
	                              editDrawPrams    NameBoxC, NameBoxSizeX, NameBoxSizeY, 2, 66
	                              call             drawShape

	                              mov              REV, 0
	                              mov              Ers, 0
	                              editDrawPrams    NameBoxC, NameBoxSizeX, NameBoxSizeY, 554, 66
	                              call             drawShape
          
     

	;///////////////////////////LowerPart\\\\\\\\\\\\\\\\\\\\\\\\\\\

	                              mov              RECXEND, screenMaxX2
	                              mov              RECYEND, screenMaxY2+30
	                              mov              RECXSTART, 0
	                              mov              RECYSTART, screenMaxY2
	                              mov              RECCOLOR, 082h
	                              call             DrawRec

	                              mov              BorderXEND, 639
	                              mov              BorderYEND, screenMaxY2+30
	                              mov              BorderMIDDLE, 636
	                              mov              BorderMIDDLED1, 637
	                              mov              BorderMIDDLED2, 635
	                              mov              BorderXSTART, 632
	                              mov              BorderYSTART, screenMaxY1
	                              mov              BorderBRIGHTColor, 39h
	                              mov              BorderDARKColor, 22h
	                              call             DrawVertBorder

	                              mov              BorderXEND, 6
	                              mov              BorderMIDDLE, 3
	                              mov              BorderMIDDLED1, 4
	                              mov              BorderMIDDLED2, 2
	                              mov              BorderXSTART, 0FFFFH
	                              call             DrawVertBorder

	                              mov              BorderXEND, 640
	                              mov              BorderYEND, screenMaxY1+7
	                              mov              BorderMIDDLE, screenMaxY1+4
	                              mov              BorderMIDDLED1, screenMaxY1+3
	                              mov              BorderMIDDLED2, screenMaxY1+5
	                              mov              BorderXSTART, 0
	                              mov              BorderYSTART, screenMaxY1
	                              call             DrawHorizBorder

	                              mov              BorderYEND, screenMaxY1+30
	                              mov              BorderMIDDLE, screenMaxY1+27
	                              mov              BorderMIDDLED1, screenMaxY1+28
	                              mov              BorderMIDDLED2, screenMaxY1+26
	                              mov              BorderYSTART, screenMaxY1+23
	                              call             DrawHorizBorder

	                              ret
DrawLayout ENDP

DrawRec Proc near
	                              mov              cx, RECXEND                                                                          	;Column X
	                              mov              dx, RECYEND                                                                          	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	DRAW_REC1:                    
	                              mov              al, RECCOLOR                                                                         	;  use color from array color for testing
	                              int              10h                                                                                  	;  draw the pixel
	BACK_REC1:                    
	                              DEC              Cx
	                              CMP              CX, RECXSTART                                                                        	;  loop iteration in x direction
	                              JNZ              DRAW_REC1                                                                            	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, RECXEND                                                                          	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX
	                              CMP              DX,RECYSTART                                                                         	;  loop iteration in x direction
	                              JZ               ALL_DRAWN_REC1                                                                       	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_REC1
	ALL_DRAWN_REC1:               
	                              ret
DrawRec endp

DrawHorizBorder Proc	near
	                              mov              cx, BorderXEND                                                                       	;Column X
	                              mov              dx, BorderYEND                                                                       	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	DRAW_HorizBorder:             
	                              mov              al, BorderDARKColor
	                              cmp              dx, BorderMIDDLED1
	                              jz               DRAWwithblack_HorizBorder
	                              cmp              dx, BorderMIDDLED2
	                              jz               DRAWwithblack_HorizBorder
	                              mov              al, BorderBRIGHTColor
	                              cmp              dx, BorderMIDDLE
	                              jz               DRAWwithblack_HorizBorder
	                              mov              al, 0h                                                                               	;  use color from array color for testing
	DRAWwithblack_HorizBorder:    int              10h                                                                                  	;  draw the pixel
	                              DEC              Cx                                                                                   	;  loop iteration in x direction
	                              cmp              CX, BorderXSTART
	                              JNZ              DRAW_HorizBorder                                                                     	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, BorderXEND                                                                       	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              cmp              dx, BorderYSTART
	                              JZ               ALL_DRAWN_HorizBorder                                                                	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_HorizBorder

	ALL_DRAWN_HorizBorder:        
	                              ret
DrawHorizBorder ENDP
DrawVertBorder PROC NEAR
	                              mov              cx, BorderXEND                                                                       	;Column X
	                              mov              dx, BorderYEND                                                                       	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	Draw_VertBorder:              
	                              mov              al, BorderDARKColor
	                              cmp              cx, BorderMIDDLED1
	                              jz               DRAWwithblack_VertBorder
	                              cmp              cx, BorderMIDDLED2
	                              jz               DRAWwithblack_VertBorder
	                              mov              al, BorderBRIGHTColor
	                              cmp              cx, BorderMIDDLE
	                              jz               DRAWwithblack_VertBorder
	                              mov              al, 0h                                                                               	;  use color from array color for testing
	DRAWwithblack_VertBorder:     int              10h                                                                                  	;  draw the pixel
	                              DEC              Cx                                                                                   	;  loop iteration in x direction
	                              cmp              CX, BorderXSTART
	                              JNZ              Draw_VertBorder                                                                      	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, BorderXEND                                                                       	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              cmp              dx, BorderYSTART
	                              JZ               ALL_DRAWN_VertBorder                                                                 	;  both x and y reached 00 so finish drawing
	                              jmp              Draw_VertBorder
	ALL_DRAWN_VertBorder:         
	                              ret
DrawVertBorder endp
drawShape PROC
	; initialize containers
	;mov SI, offset Shape
	                              mov              cx, shapeSizeX
	                              cmp              REV, 0
	                              jz               DontREVCXDraw
	                              mov              cx, 0                                                                                	;Column X
	DontREVCXDraw:                push             cx
	                              mov              dx, shapeSizeY                                                                       	;Row Y
	                              mov              ah, 0ch                                                                              	;Draw Pixel Command
	drawShape_drawIt:             
	                              mov              bl, [SI]                                                                             	;use color from array color for testing
	                              and              bl, bl
	                              JZ               drawShape_back
	                              add              cx, shapeOffsetX
	                              add              dx, shapeOffsetY
	                              mov              al, [SI]
	                              cmp              Ers, 0
	                              jz               DrawWithPxl
	                              mov              al, RECCOLOR                                                                         	;  use color from array color for testing
	DrawWithPxl:                  int              10h                                                                                  	;  draw the pixel
	                              sub              cx, shapeOffsetX
	                              sub              dx, shapeOffsetY
	drawShape_back:               
	                              inc              SI
	                              cmp              REV, 1
	                              JZ               RevDraw
	                              DEC              Cx                                                                                   	;  loop iteration in x direction
	                              jmp              ContinueDrawLoop
	RevDraw:                      inc              cx
	                              cmp              cx, shapeSizeX
	ContinueDrawLoop:             JNZ              drawShape_drawIt                                                                     	;  check if we can draw current x and y and excape the y iteration
	                              pop              cx
	                              push             cx                                                                                   	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                                                                                   	;  loop iteration in y direction
	                              JZ               drawShape_alldrawn                                                                   	;  both x and y reached 00 so finish drawing
	                              jmp              drawShape_drawIt
	drawShape_alldrawn:           pop              cx
	                              ret
drawShape ENDP
	;//////////////////////////////Procedures//////////////////////////////////////////////
        END MAIN

	;//////////////////////////////TODO//////////////////////////////////////////////
@comment

		TODO:
		2. null names -> mostafa
@
	;//////////////////////////////TODO//////////////////////////////////////////////
