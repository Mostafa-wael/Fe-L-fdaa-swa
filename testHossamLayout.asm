.model huge
;///////////////////////////////Macros////////////////////////////////////
MOVEMENT MACRO UP, DOWN, LEFT, RIGHT, FIRING
	
	         mov cx, 0

	         cmp ah,UP
	         jz  MoveUp

	         cmp ah,DOWN
	         jz  MoveDown

	         cmp ah,LEFT
	         jz  MoveLeft

	         cmp ah,RIGHT
	         jz  MoveRight

	         cmp ah, FIRING
	         jz  Fire
ENDM

delay macro duration
	      local lp
	      push  cx
	      mov   cx, duration
	lp:   loop  lp
	      pop   cx

endm

clearWholeScreen MACRO
	                 mov ah, 0
	                 mov al, 3
	                 INT 10H  	;FOR VIDEO DISPLAY
	ENDM
;///////////////////////////////Macros////////////////////////////////////
;///////////////////////////////Data Initializations////////////////////////////////////
.data
	; constrains depend on the graphics mode
	graphicsMode      equ         4F02h
	offsetX           dw          6h                                                                                                                                                                                                    	;position of first from left pixel
	offsetY           dw          250                                                                                                                                                                                                   	;position of first from top pixel
	SizeX             equ         32                                                                                                                                                                                                    	;img Width
	SizeY             equ         32                                                                                                                                                                                                    	;img Height
	SizeC             equ         1024
	maxY              equ         380
	maxX              equ         320
	planeSpeed        equ         4
	minY              equ         100
	minX              equ         4

	CharacteroffsetX  dw          12
	CharacteroffsetX2 dw          563                                                                                                                                                                                                   	;position of first from left pixel                                                                                                                                                                                              	;position of first from left pixel
	CharacteroffsetY  dw          8                                                                                                                                                                                                     	;position of first from top pixel
	CharacterSizeX    equ         64                                                                                                                                                                                                    	;img Width
	CharacterSizeY    equ         64

	NameBoxSizeX      equ         82
	NameBoxSizeY      equ         26

	minY2             equ         100
	minX2             equ         320
	maxY2             equ         380
	maxX2             equ         640
	offsetX2          dw          608                                                                                                                                                                                                   	;position of first from left pixel
	offsetY2          dw          250

	;////////////////////////////////
	gamebtnOffsetX    equ         226
	gamebtnOffsetY    equ         204
	;
	    
	chatbtnOffsetX    equ         226
	chatbtnOffsetY    equ         268
	;
	               
	exitbtnOffsetX    equ         226
	exitbtnOffsetY    equ         332
	;
	buttonSizeX       equ         188
	buttonSizeY       equ         56
	;
	startX            equ         220                                                                                                                                                                                                   	; 226 - 6
	endX              equ         420                                                                                                                                                                                                   	; 414 + 6
	;
	                  arrowOffset label word
	arrowOffsetX      dw          184
	arrowOffsetY      dw          216
	arrowOffsetXRev   dw          424
	;
	arrowSizeX        equ         32
	arrowSizeY        equ         32
	arrowStep         equ         64
	arrowAtgame       equ         216
	arrowAtChat       equ         280
	arrowAtExit       equ         344
	;
	logoOffset        dw          203,24
	logoSizeX         equ         214
	logoSizeY         equ         157
	;////////////////////////////////     	                                                                                                                                                                                      	;don't make this 0
	getName           DB          " Your name: $"
	enterValidName    DB          " Please, enter a valid name: $"
	playerName1       DB          21,?,21 dup("$")
	                  firstScreen label byte
	                  DB          '  ',0ah,0dh                                                                                                                                                                                          	; new line
	                  DB          '                                                          ||',0ah,0dh
	                  DB          '   =======================================================||',0ah,0dh
	                  DB          '      ||                                                  ||',0ah,0dh
	                  DB          '      ||            #### FE L FDA SWAAA ####              ||',0ah,0dh
	                  DB          '      ||                                                  ||',0ah,0dh
	                  DB          '      ||--------------------------------------------------||',0ah,0dh
	                  DB          '      ||                                                  ||',0ah,0dh
	                  DB          '      ||            Please, Enter your name               ||',0ah,0dh
	                  DB          '      ||       Then, press Enter to start the game        ||',0ah,0dh
	                  DB          '      ||                                                  ||',0ah,0dh
	                  DB          '      ||             ** MAX 20 CHARCHTERS **              ||',0ah,0dh
	                  DB          '      ||                                                  ||',0ah,0dh
	                  DB          '      || =======================================================',0ah,0dh
	                  DB          '      ||                                                    ',0ah,0dh
	                  DB          '$',0ah,0dh
	                  mainMenu    label byte
	                  DB          '  ',0ah,0dh                                                                                                                                                                                          	; new line
	                  DB          '                                                           ||',0ah,0dh
	                  DB          '                                                           ||',0ah,0dh
	                  DB          '                                                           ||',0ah,0dh
	                  DB          '   ========================================================||',0ah,0dh
	                  DB          '       ||                                                  ||',0ah,0dh
	                  DB          '       ||            Press, F1 to beign chatting           ||',0ah,0dh
	                  DB          '       ||            Press, F2 to start the game           ||',0ah,0dh
	                  DB          '       ||            Press, ESC to exit the prgram         ||',0ah,0dh
	                  DB          '       ||                                                  ||',0ah,0dh
	                  DB          '       ||--------------------------------------------------||',0ah,0dh
	                  DB          '       ||                     chat...                      ||',0ah,0dh
	                  DB          '       || ========================================================',0ah,0dh
	                  DB          '       ||                                                    ',0ah,0dh
	                  DB          '       ||                                                    ',0ah,0dh
	                  DB          '       ||                                                    ',0ah,0dh
	                  DB          '$',0ah,0dh
	                  byebye      label byte
	                  DB          '  ',0ah,0dh
	                  DB          '                                   ||',0ah,0dh
	                  DB          '                                   ||',0ah,0dh
	                  DB          '                                   ||',0ah,0dh
	                  DB          '                                   ||',0ah,0dh
	                  DB          '                                   ||',0ah,0dh
	                  DB          '   ================================||',0ah,0dh
	                  DB          '       ||           Bye Bye        ||',0ah,0dh
	                  DB          '       || ================================',0ah,0dh
	                  DB          '       ||                           ',0ah,0dh
	                  DB          '       ||                           ',0ah,0dh
	                  DB          '       ||                           ',0ah,0dh
	                  DB          '       ||                           ',0ah,0dh
	                  DB          '       ||                           ',0ah,0dh
	                  DB          '$',0ah,0dh
				   
	;///////////////////////////////Data Initializations////////////////////////////////////
	;//////////////////////////////////////Art/////////////////////////////////////////////
	NameBoxC          DB          0, 0, 0, 0, 0, 0, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222
	                  DB          222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 222, 222, 150, 150, 222, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150
	                  DB          150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 222, 150, 150, 222, 222, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 222, 222, 150, 3, 150, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 150, 222, 150, 3, 150
	                  DB          222, 222, 0, 0, 0, 0, 0, 0, 0, 222, 222, 150, 77, 53, 150, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 150, 222, 150
	                  DB          53, 77, 150, 222, 222, 0, 0, 0, 0, 0, 222, 222, 150, 77, 3, 3, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          150, 222, 3, 3, 77, 150, 222, 222, 0, 0, 0, 222, 222, 150, 77, 3, 77, 53, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 150, 222, 53, 77, 3, 77, 150, 222, 222, 0, 222, 222, 150, 77, 77, 77, 3, 3, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 150, 222, 3, 3, 77, 77, 77, 150, 222, 222, 222, 150, 77, 77, 77, 3, 77, 53, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 150, 222, 53, 77, 3, 77, 77, 77, 150, 222, 222, 150, 77, 77, 77, 77, 3, 3, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 150, 222, 3, 3, 77, 77, 77, 77, 150, 222, 222, 150, 77, 77, 77, 3, 77, 53, 222, 150, 77, 77, 77, 77, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 77, 77, 77, 77, 150, 222, 53, 77, 3, 77, 77, 77, 150, 222, 222, 222, 150, 77, 77, 77, 3, 3, 222, 150, 77, 77, 77, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 77, 150, 222, 3, 3, 77, 77, 77, 150, 222, 222, 0, 222, 222, 150, 77, 3, 77, 53, 222, 150, 77, 77, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 150, 222, 53, 77, 3, 77, 150, 222, 222, 0, 0, 0, 222, 222, 150, 77, 3, 3, 222, 150, 77, 77, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 150, 222, 3, 3, 77, 150, 222, 222, 0, 0, 0, 0, 222, 150, 77, 3, 77, 53, 222, 150, 77, 77, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 150, 222, 53, 77, 3, 77, 150, 222, 0, 0, 0, 222, 222, 150, 77, 77, 3, 3, 222, 150, 77, 77
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 150, 222, 3, 3, 77, 77, 150, 222, 222, 0, 0, 222, 150, 77, 77, 3, 77, 53, 222, 150
	                  DB          77, 77, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 150, 222, 53, 77, 3, 77, 77, 150, 222, 0, 0, 222, 150, 77, 77, 77, 3, 3
	                  DB          222, 150, 77, 77, 77, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 77, 77, 77, 150, 222, 3, 3, 77, 77, 77, 150, 222, 0, 0, 222, 150, 77, 77, 3
	                  DB          77, 53, 150, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 150, 222, 150, 53, 77, 3, 77, 77, 150, 222, 0, 222, 222, 150, 77
	                  DB          77, 77, 3, 3, 150, 222, 150, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 150, 222, 150, 3, 3, 77, 77, 77, 150, 222, 222, 222, 150
	                  DB          77, 77, 77, 3, 77, 53, 150, 222, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150
	                  DB          150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 222, 150, 53, 77, 3, 77, 77, 77, 150, 222
	                  DB          222, 150, 77, 77, 77, 77, 3, 150, 150, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222
	                  DB          222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 150, 150, 3, 77, 77, 77, 77
	                  DB          150, 222, 222, 150, 77, 77, 77, 3, 150, 222, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 222, 222, 150, 3, 77
	                  DB          77, 77, 150, 222, 222, 150, 77, 77, 77, 150, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 222
	                  DB          150, 77, 77, 77, 150, 222, 222, 150, 77, 77, 150, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 222, 222, 150, 77, 77, 150, 222, 222, 150, 150, 150, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 222, 222, 150, 150, 150, 222, 222, 222, 222, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 222, 222, 222, 222, 222
	CharacterC        DB          0, 0, 0, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 6, 114, 114, 114, 114, 114, 114, 114, 113, 113, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 26, 30, 30, 30
	                  DB          30, 26, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114
	                  DB          6, 114, 114, 114, 114, 114, 114, 114, 113, 113, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 26, 30, 30, 30, 30, 26, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 114, 6, 114, 114, 114, 114, 114, 114, 113, 113, 113, 113, 113, 4, 4, 4
	                  DB          4, 113, 113, 113, 26, 30, 30, 30, 30, 26, 114, 114, 6, 6, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 114, 114
	                  DB          6, 6, 6, 6, 6, 6, 114, 114, 114, 6, 114, 114, 114, 114, 114, 114, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 26, 26, 26, 30, 30, 26, 114, 114, 114, 114, 114, 114
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 114, 6, 6, 6, 114, 114, 6, 114, 114, 114, 114, 114, 114, 113
	                  DB          113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 26, 26, 26, 26, 114, 114, 114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 114, 114, 114, 114
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 114, 114, 114, 6, 114, 114, 114, 114, 114, 114, 113, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 113
	                  DB          26, 26, 114, 114, 114, 114, 6, 6, 114, 114, 6, 6, 6, 114, 114, 114, 114, 114, 6, 6, 6, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 6
	                  DB          114, 114, 114, 114, 114, 114, 114, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 114, 114, 114, 114, 6, 6, 6, 6, 114, 114, 114, 114, 6, 114
	                  DB          114, 114, 114, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 6, 114, 114, 114, 114, 114, 114, 114, 4, 4, 4, 4, 4, 4, 4, 4, 4
	                  DB          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 114, 114, 114, 114, 6, 6, 6, 6, 114, 6, 6, 6, 6, 6, 114, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 114, 6, 114, 114, 114, 114, 114, 113, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 4, 4, 4, 4, 114, 114, 114, 6, 6, 6
	                  DB          6, 6, 114, 114, 6, 114, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 114, 114, 114, 114, 114, 114, 113, 4, 4
	                  DB          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 4, 4, 4, 114, 114, 114, 6, 6, 6, 6, 6, 6, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 114, 114, 114, 114, 114, 113, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 113, 113, 113, 113, 113, 113, 4, 113, 113
	                  DB          113, 4, 114, 114, 6, 6, 6, 6, 6, 6, 6, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114
	                  DB          114, 114, 114, 114, 113, 4, 4, 4, 4, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 4, 4, 114, 114, 6, 6, 6, 6, 6, 6, 6, 114, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 114, 113, 4, 4, 4, 113, 113, 4, 4, 4, 4, 4, 4
	                  DB          113, 113, 113, 4, 113, 113, 4, 113, 113, 113, 114, 114, 114, 114, 114, 6, 6, 6, 6, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 113, 4, 4, 113, 113, 4, 4, 4, 4, 4, 113, 113, 113, 113, 4, 4, 4, 4, 4, 4, 4, 4, 113, 113, 113, 113, 114, 6
	                  DB          6, 6, 6, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 113, 113, 113
	                  DB          4, 4, 4, 4, 4, 113, 113, 113, 113, 113, 113, 113, 4, 4, 4, 4, 4, 4, 4, 4, 4, 113, 114, 114, 18, 6, 114, 18, 18, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 113, 4, 4, 4, 4, 4, 4, 113, 113, 90, 90, 90, 113, 113, 113, 113, 113, 4
	                  DB          4, 4, 4, 4, 4, 4, 0, 0, 18, 114, 0, 18, 18, 0, 0, 18, 18, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 113, 4, 4, 4, 4, 4, 113, 90, 90, 90, 90, 90, 90, 90, 113, 113, 113, 113, 113, 4, 4, 4, 4, 113, 0, 0, 18, 18, 0, 18, 18, 18, 0, 18
	                  DB          18, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 18, 0, 0, 0, 0, 0, 113, 4, 4, 113, 4, 113, 90, 90, 90, 90
	                  DB          90, 90, 90, 90, 90, 90, 65, 113, 113, 113, 113, 113, 4, 113, 18, 0, 18, 18, 0, 18, 18, 18, 0, 0, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 18, 18, 0, 18, 0, 18, 18, 0, 0, 113, 113, 4, 113, 113, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 160, 113, 113, 113, 0, 18, 18
	                  DB          18, 18, 18, 18, 18, 18, 18, 0, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 0, 18, 0, 18, 18, 0, 0, 0, 113
	                  DB          113, 113, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 160, 65, 65, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 18, 18, 18, 18, 18, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0, 0, 113, 90, 90, 90, 90, 160, 160, 160, 160, 90, 90, 90, 90, 90, 90, 90
	                  DB          90, 65, 65, 160, 65, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18
	                  DB          18, 18, 18, 18, 0, 0, 0, 0, 65, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 65, 160, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18
	                  DB          18, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0, 65, 90, 90, 90, 90, 90, 90, 90, 90
	                  DB          90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 65, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0, 65, 90, 90, 90, 90, 65, 65, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 65, 18, 0, 18
	                  DB          18, 18, 18, 19, 18, 18, 18, 18, 18, 18, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 65, 90
	                  DB          90, 90, 90, 65, 65, 160, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 18, 18, 18, 18, 18, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 19, 18, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 65, 90, 90, 90, 90, 90, 65, 65, 160, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90
	                  DB          90, 90, 90, 65, 65, 18, 18, 18, 18, 18, 19, 19, 19, 18, 18, 18, 18, 19, 18, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18
	                  DB          18, 18, 18, 18, 18, 65, 90, 90, 90, 90, 90, 90, 65, 65, 160, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 65, 18, 18, 18, 18, 18, 19, 19, 19, 18, 18, 18
	                  DB          18, 19, 18, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 65, 90, 90, 90, 90, 90, 90, 90, 65, 160, 90
	                  DB          90, 90, 18, 65, 90, 90, 90, 90, 90, 90, 90, 90, 65, 18, 18, 18, 18, 18, 19, 19, 19, 18, 18, 18, 18, 19, 18, 19, 18, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 65, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 18, 18, 65, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 18, 18, 19
	                  DB          19, 18, 19, 19, 19, 18, 19, 19, 18, 19, 18, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 65, 65, 65, 65
	                  DB          65, 90, 90, 90, 90, 90, 18, 19, 19, 18, 65, 90, 90, 90, 90, 90, 90, 90, 90, 90, 65, 18, 18, 19, 19, 18, 19, 19, 19, 18, 19, 19, 18, 19, 18, 19, 19, 19, 18, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 65, 29, 236, 236, 236, 65, 90, 90, 65, 18, 19, 19, 18, 65, 65, 65, 65, 65, 65, 65
	                  DB          90, 90, 90, 90, 65, 18, 18, 19, 19, 18, 19, 19, 19, 18, 19, 19, 19, 19, 18, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18
	                  DB          18, 18, 18, 16, 29, 29, 236, 16, 236, 29, 16, 65, 18, 18, 19, 18, 65, 65, 29, 236, 236, 236, 236, 29, 65, 90, 90, 90, 65, 18, 18, 19, 19, 18, 19, 19, 19, 18, 19, 19
	                  DB          19, 19, 18, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 16, 26, 16, 16, 16, 16, 65, 18, 18, 19, 19, 18
	                  DB          65, 29, 29, 236, 16, 16, 236, 29, 29, 16, 65, 65, 160, 18, 18, 19, 19, 18, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 18, 18, 19, 19, 18, 65, 16, 26, 16, 16, 16, 16, 16, 16, 65, 65, 18, 160, 18, 18, 19
	                  DB          19, 18, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 65, 65, 19
	                  DB          19, 18, 18, 18, 18, 19, 18, 65, 19, 19, 16, 16, 16, 16, 16, 16, 16, 65, 18, 18, 18, 18, 18, 19, 19, 18, 19, 19, 19, 18, 19, 19, 19, 19, 20, 19, 19, 19, 18, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 18, 18, 18, 19, 19, 19, 18, 160, 90, 19, 19, 19, 65, 65, 65, 65
	                  DB          65, 18, 18, 18, 18, 18, 19, 19, 19, 18, 19, 20, 19, 18, 19, 19, 19, 19, 20, 19, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18
	                  DB          18, 18, 18, 18, 18, 160, 160, 160, 18, 18, 19, 19, 19, 19, 18, 160, 65, 90, 90, 19, 19, 19, 19, 19, 19, 18, 18, 18, 19, 18, 19, 19, 19, 18, 19, 20, 19, 18, 19, 19
	                  DB          19, 19, 20, 19, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 160, 18, 18, 18, 19, 19, 19, 18, 18, 160
	                  DB          160, 65, 65, 65, 18, 18, 65, 65, 160, 18, 18, 18, 19, 18, 19, 19, 19, 18, 19, 20, 19, 18, 19, 20, 19, 19, 20, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 160, 18, 18, 19, 19, 19, 19, 18, 18, 160, 160, 160, 160, 18, 18, 65, 65, 160, 18, 18, 19, 18, 19, 18, 19, 19
	                  DB          20, 19, 19, 20, 19, 18, 19, 20, 19, 19, 20, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 18, 18
	                  DB          18, 19, 19, 19, 19, 18, 18, 18, 160, 160, 18, 18, 18, 160, 160, 18, 18, 19, 19, 18, 19, 19, 18, 19, 20, 19, 19, 20, 19, 19, 20, 19, 19, 19, 20, 19, 18, 18, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 160, 18, 18, 18, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 160, 160, 18, 18
	                  DB          18, 19, 19, 20, 19, 19, 18, 19, 19, 19, 19, 20, 19, 19, 20, 19, 19, 19, 20, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18
	                  DB          18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 160, 18, 18, 18, 19, 19, 18, 20, 19, 19, 18, 19, 19, 19, 19, 20, 19, 19, 20, 19
	                  DB          19, 20, 19, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 18, 18, 19
	                  DB          18, 19, 19, 18, 160, 18, 18, 19, 19, 19, 20, 19, 19, 19, 18, 19, 20, 19, 20, 20, 19, 19, 20, 19, 19, 20, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 18, 18, 19, 18, 19, 19, 18, 160, 18, 18, 19, 19, 19, 20, 19, 19, 19, 19, 19
	                  DB          20, 20, 20, 20, 20, 19, 20, 19, 20, 19, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18
	                  DB          19, 20, 19, 19, 19, 18, 18, 19, 18, 19, 19, 19, 18, 18, 19, 19, 19, 20, 20, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 19, 19, 18, 18, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 19, 19, 19, 18, 18, 19, 18, 19, 20, 19, 18, 18, 19, 19
	                  DB          19, 20, 20, 19, 19, 19, 19, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18
	                  DB          18, 18, 18, 18, 19, 18, 18, 18, 19, 20, 19, 19, 19, 18, 18, 19, 18, 19, 20, 19, 19, 19, 19, 19, 19, 20, 20, 19, 19, 19, 20, 20, 21, 20, 20, 20, 21, 20, 20, 21
	                  DB          20, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 19, 19, 19, 18, 18, 19
	                  DB          18, 19, 20, 19, 19, 20, 19, 19, 19, 20, 20, 19, 19, 19, 20, 21, 20, 20, 21, 20, 21, 20, 20, 21, 20, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 18, 18, 18, 19, 18, 18, 18, 18, 18, 18, 18, 19, 20, 19, 19, 19, 19, 18, 19, 18, 19, 20, 20, 19, 20, 20, 19, 19, 20, 19, 19, 19, 20, 20, 21
	                  DB          20, 21, 20, 20, 21, 20, 21, 20, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 19, 18, 18, 18, 19, 18, 18, 18
	                  DB          19, 20, 19, 19, 19, 19, 19, 19, 19, 20, 21, 20, 20, 20, 20, 19, 20, 20, 19, 19, 19, 20, 21, 20, 20, 21, 20, 21, 20, 21, 20, 19, 18, 18, 18, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 18, 18, 18, 19, 18, 19, 18, 18, 18, 19, 19, 20, 20, 19, 19, 20, 19, 19, 20, 21, 20, 20, 20, 20, 19
	                  DB          20, 21, 19, 19, 19, 20, 21, 20, 21, 21, 21, 21, 21, 21, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 19
	                  DB          18, 19, 18, 18, 19, 18, 18, 19, 19, 19, 20, 20, 20, 19, 21, 21, 20, 20, 21, 20, 20, 21, 20, 19, 20, 21, 19, 19, 20, 21, 20, 20, 21, 20, 21, 20, 21, 19, 19, 18
	                  DB          18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 18, 18, 18, 18, 19, 18, 18, 19, 19, 19, 20, 21, 20, 20, 20, 21
	                  DB          20, 20, 21, 20, 20, 21, 20, 19, 20, 21, 19, 19, 20, 21, 20, 21, 20, 21, 20, 21, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 18, 19, 18, 18, 19, 19, 18, 18, 19, 19, 19, 19, 21, 21, 20, 20, 21, 20, 20, 21, 20, 20, 21, 20, 19, 20, 21, 19, 19, 20, 20, 20, 20
	                  DB          20, 20, 20, 20, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 19, 19, 19, 19, 18, 18, 18
	                  DB          19, 19, 19, 20, 21, 20, 20, 21, 20, 20, 21, 20, 20, 21, 20, 19, 19, 20, 19, 20, 20, 20, 20, 20, 19, 20, 20, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 19, 19, 19, 19, 19, 18, 19, 19, 19, 19, 20, 20, 21, 20, 20, 21, 20, 20, 21, 20, 20, 20, 19
	                  DB          19, 20, 19, 19, 19, 20, 20, 20, 19, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          18, 19, 19, 19, 19, 19, 18, 18, 19, 19, 19, 19, 20, 21, 20, 20, 21, 20, 20, 20, 20, 20, 20, 20, 19, 20, 19, 19, 19, 19, 20, 19, 19, 19, 18, 18, 18, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 19, 19, 19, 19, 18, 19, 19, 19, 19, 20, 20, 21, 20
	                  DB          21, 20, 19, 20, 19, 19, 19, 20, 19, 20, 19, 19, 19, 20, 19, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 19, 19, 19, 19, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 19, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19
	                  DB          18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 19, 19, 19
	                  DB          19, 19, 19, 19, 19, 19, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 19, 19, 19, 19, 19, 19, 19
	                  DB          19, 19, 19, 19, 19, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 19, 19
	                  DB          19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	                  arrow       label byte
	shipC             DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 138, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19
	                  DB          138, 138, 138, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 138, 138, 138, 66, 138, 19, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 138, 138, 138, 138, 138, 138, 19, 0, 0, 0, 0, 0, 0, 19, 19, 19, 19, 19
	                  DB          19, 19, 19, 19, 19, 19, 19, 19, 19, 0, 0, 0, 19, 138, 138, 138, 138, 66, 138, 19, 0, 0, 0, 0, 0, 0, 19, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29
	                  DB          29, 19, 19, 19, 19, 19, 19, 138, 66, 66, 138, 19, 0, 0, 0, 0, 0, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 19, 19, 19, 19, 19, 19, 66
	                  DB          138, 66, 138, 19, 0, 0, 0, 0, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 19, 19, 19, 19, 138, 66, 138, 138, 66, 138, 19, 0, 0, 0, 0
	                  DB          0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 23, 19, 19, 19, 66, 138, 66, 66, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 19, 19, 138, 138, 138, 138, 138, 138, 19, 23, 23, 27, 27, 19, 138, 66, 66, 66, 66, 19, 0, 0, 0, 0, 0, 0, 0, 19, 19, 19, 19, 19, 66, 66, 66, 66, 66, 66, 66
	                  DB          66, 138, 19, 19, 19, 19, 138, 66, 66, 138, 138, 19, 19, 23, 23, 27, 0, 0, 19, 19, 66, 66, 91, 91, 91, 91, 66, 91, 66, 91, 66, 138, 138, 138, 91, 138, 66, 66, 91, 138
	                  DB          66, 66, 66, 66, 4, 65, 65, 23, 0, 19, 66, 91, 91, 4, 4, 4, 91, 91, 91, 91, 91, 66, 91, 66, 66, 66, 91, 66, 66, 91, 91, 66, 66, 66, 66, 66, 6, 64, 64, 64
	                  DB          19, 66, 91, 4, 64, 64, 64, 64, 4, 91, 91, 91, 66, 91, 66, 91, 91, 91, 91, 138, 66, 66, 91, 138, 66, 66, 138, 19, 67, 67, 67, 67, 19, 66, 91, 4, 64, 64, 64, 64
	                  DB          4, 91, 91, 91, 66, 91, 66, 91, 91, 91, 91, 138, 66, 66, 91, 138, 66, 66, 138, 19, 67, 67, 67, 67, 0, 19, 66, 91, 91, 4, 4, 4, 91, 91, 91, 91, 91, 66, 91, 66
	                  DB          66, 66, 91, 66, 66, 91, 91, 66, 66, 66, 66, 66, 6, 64, 64, 64, 0, 0, 19, 19, 66, 66, 91, 91, 91, 91, 66, 91, 66, 91, 66, 138, 138, 138, 91, 138, 66, 66, 91, 138
	                  DB          66, 66, 66, 66, 4, 65, 65, 23, 0, 0, 0, 0, 19, 19, 19, 19, 19, 66, 66, 66, 66, 66, 66, 66, 66, 138, 19, 19, 19, 19, 138, 66, 66, 138, 138, 19, 19, 23, 23, 27
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 138, 138, 138, 138, 138, 138, 19, 23, 23, 27, 27, 19, 138, 66, 66, 66, 66, 19, 0, 0, 0, 0, 19, 19, 19, 19, 19, 19, 19
	                  DB          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 23, 19, 19, 19, 66, 138, 66, 66, 138, 19, 0, 0, 0, 0, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27
	                  DB          27, 19, 19, 19, 19, 138, 66, 138, 138, 66, 138, 19, 0, 0, 0, 0, 0, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 19, 19, 19, 19, 19, 19, 66
	                  DB          138, 66, 138, 19, 0, 0, 0, 0, 0, 0, 19, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 19, 19, 19, 19, 19, 19, 138, 66, 66, 138, 19, 0, 0, 0, 0
	                  DB          0, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0, 0, 0, 19, 138, 138, 138, 138, 66, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 138, 138, 138, 138, 138, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 19, 138, 138, 138, 66, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19
	                  DB          138, 138, 138, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 138, 138, 19, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 138, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                  DB          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 0, 0, 0
	exitbtn           DB          0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 1, 104, 1, 104
	                  DB          1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104
	                  DB          1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104
	                  DB          1, 104, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1
	                  DB          104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1
	                  DB          104, 1, 104, 1, 104, 1, 104, 1, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1
	                  DB          104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1
	                  DB          104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104
	                  DB          1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104
	                  DB          1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 100
	                  DB          0, 0, 0, 0, 0, 0, 0, 100, 104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 104, 100, 0, 0, 0, 0, 0, 0, 100, 104, 1, 104, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 104, 100, 0, 0, 0, 0, 0, 100, 177, 104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 104, 104, 177, 100, 0, 0, 0, 0, 100, 104, 104, 1, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 104, 104, 100, 0, 0, 0, 100, 104, 177
	                  DB          104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 104, 177, 104, 100, 0, 0, 100, 177, 104, 104, 1, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 104, 1, 104, 104, 177, 100, 0, 0, 100, 104, 177, 104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 104, 177, 104, 100, 0
	                  DB          0, 100, 177, 104, 104, 1, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 104, 104, 177, 100, 0, 100, 177, 104, 177, 104, 104, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 104, 104, 104, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 104, 177, 104, 177, 100, 100, 177, 177, 104, 104, 1, 104, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 1, 1, 1, 104, 104, 104, 104, 104, 104, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 104, 1, 104
	                  DB          104, 177, 177, 100, 100, 177, 104, 177, 104, 104, 1, 1, 1, 31, 100, 100, 100, 77, 100, 77, 100, 77, 100, 77, 100, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 104, 104, 77, 77, 77, 77, 104, 104, 104, 104, 104, 104, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 9, 77, 9, 77, 9, 77, 9, 77, 77, 9, 77, 9, 77, 9, 77, 9, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 100, 77, 100, 77, 100, 77, 100, 77, 100, 100, 100, 31, 1, 1, 1, 104, 104, 177, 104, 177, 100, 100, 177, 177, 104, 104, 31, 31, 100
	                  DB          100, 77, 77, 77, 77, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 104
	                  DB          9, 9, 9, 9, 77, 77, 104, 104, 104, 104, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 77, 77, 77, 77, 77, 100, 100, 31, 31, 104, 104, 177, 177, 100, 100, 177, 104, 177, 31, 100, 100, 77, 77, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 9, 9, 9, 9, 9, 9, 77, 77, 104, 104, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 77
	                  DB          77, 100, 100, 31, 177, 104, 177, 100, 100, 177, 177, 31, 100, 100, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 100, 100, 31, 177, 177, 100, 100, 177, 104, 100
	                  DB          77, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 77, 100, 104, 177, 100, 100, 177, 177, 100, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 77, 100, 177, 177, 100, 100, 177, 177, 100, 77, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 77, 77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 77, 100, 177, 177, 100
	                  DB          100, 177, 100, 77, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 1, 1, 77, 77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 77, 100, 177, 100, 100, 177, 100, 77, 9, 9, 9, 9, 9, 100, 100, 100
	                  DB          100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 1, 1
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1
	                  DB          1, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 77, 100, 177, 100, 100, 177, 77, 77, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9
	                  DB          77, 77, 177, 100, 100, 177, 100, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 77, 77, 77, 77, 77, 77, 77, 77, 1, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 100, 177, 100, 100, 177, 77, 9, 9, 9, 9, 9
	                  DB          9, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77
	                  DB          77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 77, 177, 100, 100, 177, 77, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1
	                  DB          1, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1
	                  DB          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	                  DB          1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9
	                  DB          9, 9, 9, 9, 9, 77, 177, 100, 100, 177, 77, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 77, 177, 100, 100, 104, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 1, 77, 77, 77, 77, 77, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9
	                  DB          9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 104, 100, 100, 177, 77, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 1, 1, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 1, 1, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 9, 9, 9, 9, 9, 9, 9, 9, 77, 177, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 77, 77, 77, 77
	                  DB          1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 104, 100
	                  DB          100, 177, 77, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
	                  DB          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 1, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 1, 77, 77, 77, 77, 77, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 177, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                  DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, 31, 31, 31, 31, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31
	                  DB          31, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31, 31, 1, 9, 1
	                  DB          31, 31, 31, 31, 31, 1, 9, 1, 31, 31, 31, 31, 31, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31, 31, 1, 1
	                  DB          31, 31, 31, 31, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31, 31, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 104, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31, 31, 1, 9, 1, 31, 31, 31, 31, 31, 1, 9, 1, 31, 31, 31, 31
	                  DB          31, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 31, 31, 31, 31, 31, 1, 9, 1, 31, 31, 31, 31, 1, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 31, 31, 31, 31, 31, 31, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1
	                  DB          31, 31, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 31, 31, 31, 31
	                  DB          31, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 31, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 31, 31, 31
	                  DB          31, 31, 9, 9, 9, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 31, 31, 9, 9, 31, 31, 31, 31, 31, 31, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 9, 9, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 9, 31, 31, 31, 31, 31, 9, 53, 9
	                  DB          31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 9, 31, 31, 31, 31, 31, 31, 9
	                  DB          53, 53, 53, 53, 53, 53, 9, 9, 9, 9, 9, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 9, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9
	                  DB          9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 31, 31, 31, 31, 31, 53, 53, 53, 31, 31, 31, 31, 31, 53, 53, 53, 31, 31, 31, 31, 31, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 9, 9, 9, 9, 9, 31, 31
	                  DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 1, 1, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 1, 1, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 1
	                  DB          1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 31, 31, 31, 53, 53, 53, 53, 53, 31, 31, 31, 53, 53, 53, 53, 53, 31, 31, 31, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 31, 31, 31, 31, 31, 9, 9, 53, 53, 53, 9, 9, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 9, 9, 9, 104, 100, 100, 104, 9, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 31, 31
	                  DB          31, 31, 31, 9, 9, 53, 53, 53, 9, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 9, 104, 100
	                  DB          100, 104, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 9, 31, 31, 31
	                  DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 104, 100, 100, 1, 9, 9, 53, 53, 53, 53, 53, 53, 53, 9
	                  DB          9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 9, 31, 31, 31, 31, 31, 31, 9, 31, 31, 31, 31, 31, 9, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 9, 9, 1, 100, 100, 104, 9, 53, 53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53
	                  DB          53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53
	                  DB          53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 9, 31, 31, 31, 31, 31, 31, 9, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 9, 9, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 9, 9, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 9, 104, 100, 100, 1, 9, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 9, 31, 31, 31, 31, 9, 53, 53, 9
	                  DB          31, 31, 31, 31, 9, 9, 9, 9, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 9, 1, 100, 100, 1, 9, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 9, 9, 9, 31, 31, 31, 31, 31
	                  DB          31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 9, 1, 100, 100, 1, 9, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31
	                  DB          31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 9, 1, 100, 100, 1, 9, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 9, 1, 100, 100, 1, 9, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 31, 31
	                  DB          31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 9, 1, 100, 100, 1, 9, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100
	                  DB          100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100, 100, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 100, 100, 100, 100, 100
	                  DB          100, 53, 53, 53, 53, 53, 53, 53, 53, 9, 1, 100, 0, 100, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31, 31, 31, 31, 31, 31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 100, 0
	                  DB          0, 100, 77, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 31, 31
	                  DB          31, 31, 31, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 77, 100, 0, 0, 0, 100, 9, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 100, 0, 0, 0, 0, 100, 77, 77, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 77
	                  DB          77, 100, 0, 0, 0, 0, 0, 100, 100, 77, 77, 9, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
	                  DB          53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 9, 77, 77, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 77
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
	                  DB          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
	                  DB          100, 0, 0, 0, 0, 0, 0, 0
	chatbtn           DB          0, 0, 0, 0, 0, 0, 0, 0, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                  DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                  DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                  DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                  DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 96, 96, 119, 2, 119, 2
	                  DB          119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2
	                  DB          119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2
	                  DB          119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2
	                  DB          119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2
	                  DB          119, 2, 119, 2, 119, 2, 119, 2, 96, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 2, 119, 2, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119
	                  DB          2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119
	                  DB          2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119
	                  DB          2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119
	                  DB          2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 119, 2, 2, 2, 119, 2, 96
	                  DB          0, 0, 0, 0, 0, 0, 0, 96, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 96, 0, 0, 0, 0, 0, 0, 96, 119, 2, 119, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 2, 119, 96, 0, 0, 0, 0, 0, 96, 194, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 119, 119, 194, 96, 0, 0, 0, 0, 96, 119, 119, 2, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 2, 119, 119, 96, 0, 0, 0, 96, 119, 194
	                  DB          119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 194, 119, 96, 0, 0, 96, 194, 119, 119, 2, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 119, 2, 119, 119, 194, 96, 0, 0, 96, 119, 194, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 194, 119, 96, 0
	                  DB          0, 96, 194, 119, 119, 2, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 2, 119, 119, 194, 96, 0, 96, 194, 119, 194, 119, 119, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 194, 119, 194, 96, 96, 194, 194, 119, 119, 2, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 2, 119
	                  DB          119, 194, 194, 96, 96, 194, 119, 194, 119, 119, 2, 2, 2, 96, 96, 96, 96, 71, 96, 71, 96, 71, 96, 71, 96, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71
	                  DB          71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71
	                  DB          71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 48, 71, 48, 71, 48, 71, 48, 71, 71, 48, 71, 48, 71, 48, 71, 48, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71
	                  DB          71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71
	                  DB          71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 96, 71, 96, 71, 96, 71, 96, 71, 96, 96, 96, 96, 2, 2, 2, 119, 119, 194, 119, 194, 96, 96, 194, 194, 119, 119, 31, 31, 96
	                  DB          71, 71, 71, 71, 71, 71, 71, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 71, 71, 71, 71, 71, 71, 71, 71, 96, 31, 31, 119, 119, 194, 194, 96, 96, 194, 119, 194, 31, 96, 96, 71, 71, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 71
	                  DB          71, 96, 96, 31, 194, 119, 194, 96, 96, 194, 194, 31, 96, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 2, 2, 2, 2, 2, 2, 69, 69, 69, 69, 69, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 96, 31, 194, 194, 96, 96, 194, 119, 96
	                  DB          71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 96, 119, 194, 96, 96, 194, 194, 71, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 2
	                  DB          2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 71, 71, 194, 194, 96, 96, 194, 194, 71, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 71, 194, 194, 96
	                  DB          96, 194, 71, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 69, 69, 69, 69, 69, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 71, 194, 96, 96, 194, 96, 71, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 96, 194, 96, 96, 194, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 48, 48, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48
	                  DB          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2
	                  DB          2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 71, 194, 96, 96, 194, 96, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 2, 2, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                  DB          2, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48, 48, 96, 194, 96, 96, 194, 71, 48, 48, 48, 48, 48
	                  DB          31, 31, 72, 72, 72, 72, 72, 72, 2, 2, 2, 2, 48, 48, 48, 2, 2, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          2, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 69
	                  DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 48, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31
	                  DB          31, 31, 31, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 2, 2
	                  DB          48, 48, 48, 2, 2, 2, 2, 72, 72, 72, 72, 72, 72, 72, 31, 48, 48, 71, 194, 96, 96, 194, 48, 48, 48, 48, 48, 48, 48, 31, 31, 72, 72, 72, 72, 72, 72, 72, 72, 2
	                  DB          2, 2, 72, 72, 72, 72, 72, 72, 2, 2, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 69, 69, 69, 69, 2, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 69, 69, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2
	                  DB          2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 31, 2, 48, 2, 31, 31, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 69, 69, 69, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 2, 72, 72, 72, 72, 72, 72, 2, 2, 2, 72, 72, 72, 72, 72, 72, 72, 72
	                  DB          95, 31, 48, 48, 48, 48, 194, 96, 96, 194, 71, 48, 48, 48, 48, 48, 48, 48, 48, 31, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 2
	                  DB          2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 69, 69, 69
	                  DB          69, 69, 69, 69, 69, 69, 31, 2, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 2, 48, 48, 48, 48, 48, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 2, 2, 2, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 48, 48, 48, 48, 48, 71, 194, 96, 96, 119, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 31, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 95, 72, 72, 72, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 2, 2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 2, 2, 69, 69
	                  DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 69, 31, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 2, 69, 69, 69, 69, 69, 69, 31, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 72, 72, 72, 95, 72, 72
	                  DB          72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 31, 48, 48, 48, 48, 48, 48, 119, 96, 96, 194, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 95, 72, 72
	                  DB          72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 95, 72, 72, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 69, 69, 69, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 2, 31, 69, 69, 69, 69, 69, 69, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 2, 2, 72, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 72, 72, 72, 72, 72, 72
	                  DB          72, 95, 31, 48, 48, 48, 48, 48, 48, 71, 194, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 95, 72, 72, 72, 72, 72, 95, 95, 95, 95, 95, 95, 95, 95
	                  DB          95, 95, 72, 72, 72, 95, 72, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2
	                  DB          31, 69, 69, 69, 69, 69, 69, 69, 69, 2, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 69, 69, 69, 69, 69
	                  DB          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 2, 2, 31, 69, 69, 69, 69, 69, 31, 2, 48
	                  DB          48, 48, 48, 48, 48, 48, 2, 2, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 72, 72, 72, 95, 31, 48, 48, 48, 48, 48, 48, 48, 48, 119, 96
	                  DB          96, 194, 71, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 72, 95, 72, 72, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 95, 72, 2, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 69, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48
	                  DB          2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 2, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 2, 31, 31, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 72, 95, 95, 95, 95
	                  DB          95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 31, 48, 48, 48, 48, 48, 48, 48, 71, 194, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 31, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 2, 2, 48, 48, 48, 48, 48, 48, 48, 48, 2, 31, 69, 69, 69, 69
	                  DB          69, 69, 69, 69, 69, 69, 69, 31, 31, 31, 31, 31, 31, 2, 48, 2, 31, 69, 31, 69, 69, 69, 69, 69, 31, 2, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
	                  DB          69, 69, 31, 31, 31, 31, 69, 2, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 69, 31, 69, 69, 69, 69, 69, 69, 69, 69, 69, 31, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48
	                  DB          48, 48, 48, 48, 2, 31, 69, 69, 69, 69, 69, 69, 69, 31, 2, 48, 48, 48, 48, 48, 48, 2, 2, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95
	                  DB          95, 95, 95, 95, 95, 31, 48, 48, 48, 48, 48, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95
	                  DB          95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 2, 48, 48, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 2
	                  DB          2, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 2, 2, 48, 48, 2, 31, 31
	                  DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31
	                  DB          31, 31, 2, 48, 48, 48, 48, 48, 48, 2, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 119, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95
	                  DB          72, 2, 48, 48, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 2, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31
	                  DB          31, 2, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 2, 2, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 31, 31, 31, 31
	                  DB          31, 31, 31, 31, 2, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 72, 95
	                  DB          95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 31, 48, 48, 48, 48, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 95, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 95, 2, 2, 48, 48, 48, 48, 48, 48, 48, 2, 31
	                  DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31
	                  DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 31, 31, 31, 31, 31, 31, 31, 31, 48, 48, 31, 31, 31, 31, 31, 31
	                  DB          31, 2, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 2, 48, 48, 48, 48, 48, 48, 2, 2, 95, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95
	                  DB          95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 48, 48, 48, 48, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 48, 48, 31, 72, 95, 95, 95, 95, 95, 95, 95
	                  DB          95, 95, 31, 95, 31, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 2, 48, 48, 48, 48, 48, 48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                  DB          31, 31, 31, 31, 2, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 2, 2
	                  DB          48, 48, 2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 31, 31, 31, 31, 31, 31, 31, 48, 48, 31, 31, 31, 31, 31, 31, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 31, 31
	                  DB          31, 31, 31, 31, 2, 48, 48, 48, 48, 48, 48, 48, 2, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 31
	                  DB          48, 48, 48, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 48, 48, 48, 48, 45, 45, 31, 95, 95, 95, 95, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31
	                  DB          95, 95, 95, 95, 95, 72, 2, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31
	                  DB          31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                  DB          48, 31, 31, 31, 31, 31, 31, 31, 31, 48, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          2, 72, 95, 95, 95, 95, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 95, 95, 31, 95, 31, 95, 95, 95, 31, 48, 48, 48, 48, 48, 48, 119, 96, 96, 119, 48, 48
	                  DB          48, 48, 45, 45, 45, 45, 45, 31, 95, 95, 95, 95, 95, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 95, 72, 2, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 48, 31
	                  DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 31, 31, 31, 31, 31, 31, 31, 31, 48, 31, 31
	                  DB          31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 72, 95, 95, 95, 95, 31, 95, 31, 95, 31, 95
	                  DB          31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 95, 31, 45, 45, 45, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95
	                  DB          95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 72, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31
	                  DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                  DB          31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 48, 31, 31, 31, 31, 31, 31, 31, 48, 48, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31
	                  DB          95, 95, 31, 45, 45, 45, 45, 48, 48, 48, 119, 96, 96, 119, 48, 48, 48, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95
	                  DB          31, 95, 31, 95, 31, 95, 95, 95, 72, 2, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45
	                  DB          45, 48, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 48, 31, 31, 31, 31, 31
	                  DB          31, 31, 31, 31, 48, 48, 48, 31, 31, 31, 31, 31, 48, 48, 48, 48, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 2, 72, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 31, 45, 45, 45, 45, 45, 48, 48, 119, 96
	                  DB          96, 119, 48, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 72, 2, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 2, 2, 48, 48, 48, 48, 45, 48, 48
	                  DB          2, 2, 2, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 72, 95, 95, 31, 95, 31
	                  DB          95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 31, 45, 45, 45, 45, 45, 45, 48, 48, 119, 96, 96, 2, 48, 48, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 31, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 72, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31
	                  DB          31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 48, 31, 31, 31, 31, 2, 48, 48, 2, 2, 31, 31, 31, 2, 2, 48, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95
	                  DB          31, 95, 31, 95, 95, 31, 45, 45, 45, 45, 45, 45, 48, 48, 2, 96, 96, 119, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 31, 95, 31, 95, 31, 95, 31
	                  DB          95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 72, 2, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 31, 48, 2, 2, 31, 31, 31, 31, 31, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 72, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 31, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 48, 119, 96, 96, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 72
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31, 31, 31, 31, 31
	                  DB          31, 2, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72
	                  DB          95, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 95, 31, 45, 45, 45, 45, 45, 45, 45, 45, 48, 2, 96, 96, 2, 48, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 31, 95, 95, 72, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31, 31, 31, 31, 31, 31, 2, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72, 95, 95, 95, 95, 31, 95, 31, 95, 31, 95, 31
	                  DB          95, 31, 95, 95, 95, 95, 95, 31, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 2, 96, 96, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 31, 95, 95
	                  DB          95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72, 72, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31, 31, 31, 31, 31, 31, 2, 31, 31, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 31, 31, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 48, 2, 96, 96, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31
	                  DB          31, 31, 31, 31, 48, 45, 2, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 72, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 31, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 2, 96, 96, 2, 48, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 31, 72, 31, 72, 31, 72, 72, 72, 72, 72, 72, 72, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 48, 48, 48, 48, 31, 31, 31, 48
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72, 72, 72, 72
	                  DB          72, 72, 31, 72, 31, 72, 31, 31, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 2, 96, 96, 2, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 48, 2, 2, 2, 48, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 2, 96, 0, 96, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 48, 2, 31, 31, 31, 48, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 96, 0
	                  DB          0, 96, 71, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31, 31, 31
	                  DB          31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 71, 96, 0, 0, 0, 96, 48, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 2, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 96, 0, 0, 0, 0, 96, 71, 71, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 31, 31, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 71
	                  DB          71, 96, 0, 0, 0, 0, 0, 96, 96, 71, 71, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          48, 31, 31, 31, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
	                  DB          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 48, 71, 71, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 96, 96, 71
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
	                  DB          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 71, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                  DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                  DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                  DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                  DB          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
	                  DB          96, 0, 0, 0, 0, 0, 0, 0

	gamebtn           DB          0, 0, 0, 0, 0, 0, 0, 0, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                  DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                  DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                  DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                  DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 91, 91, 6, 114, 6, 114
	                  DB          6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114
	                  DB          6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114
	                  DB          6, 114, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6
	                  DB          114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6
	                  DB          114, 6, 114, 6, 114, 6, 114, 6, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6
	                  DB          114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6
	                  DB          114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114
	                  DB          6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114
	                  DB          6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 114, 6, 91
	                  DB          0, 0, 0, 0, 0, 0, 0, 91, 114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 91, 0, 0, 0, 0, 0, 0, 91, 114, 6, 114, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 6, 114, 91, 0, 0, 0, 0, 0, 91, 184, 114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 114, 114, 184, 91, 0, 0, 0, 0, 91, 114, 114, 6, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 6, 114, 114, 91, 0, 0, 0, 91, 114, 184
	                  DB          114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 184, 114, 91, 0, 0, 91, 184, 114, 114, 6, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 114, 6, 114, 114, 184, 91, 0, 0, 91, 114, 184, 114, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 184, 114, 91, 0
	                  DB          0, 91, 184, 114, 114, 6, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 6, 114, 114, 184, 91, 0, 91, 184, 114, 184, 114, 114, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 114, 184, 114, 184, 91, 91, 184, 184, 114, 114, 6, 114, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 6, 114
	                  DB          114, 184, 184, 91, 91, 184, 114, 184, 114, 114, 6, 6, 6, 90, 90, 90, 90, 66, 90, 66, 90, 66, 90, 66, 90, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                  DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                  DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 66, 42, 66, 42, 66, 42, 66, 66, 42, 66, 42, 66, 42, 66, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                  DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                  DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 90, 66, 90, 66, 90, 66, 90, 66, 90, 90, 90, 90, 6, 6, 6, 114, 114, 184, 114, 184, 91, 91, 184, 184, 114, 114, 31, 91, 90
	                  DB          91, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 91, 90, 91, 31, 114, 114, 184, 184, 91, 91, 184, 114, 184, 31, 90, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66
	                  DB          66, 66, 90, 31, 184, 114, 184, 91, 91, 184, 184, 31, 90, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 90, 31, 184, 184, 91, 91, 184, 114, 90
	                  DB          66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 90, 114, 184, 91, 91, 184, 184, 91, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 66, 91, 184, 184, 91, 91, 184, 184, 91, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 91, 184, 184, 91
	                  DB          91, 184, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 67, 67
	                  DB          67, 67, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 184, 91, 91, 184, 90, 66, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 90, 184, 91, 91, 184, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 31, 31, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          66, 66, 184, 91, 91, 184, 90, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 6, 31, 31, 31, 31, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 90, 184, 91, 91, 184, 66, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 42, 42, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 42
	                  DB          42, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 184, 91, 91, 184, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 42, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	                  DB          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 184, 91, 91, 184, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 67, 67, 67, 67, 67, 6, 42, 42, 6, 6, 67, 67, 67, 67, 67
	                  DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 6, 6, 6, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                  DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 184, 91, 91, 114, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                  DB          67, 67, 67, 6, 6, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                  DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 91, 91, 184, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67
	                  DB          67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                  DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 184, 91, 91, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                  DB          66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67
	                  DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                  DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 91
	                  DB          91, 184, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                  DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                  DB          67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 184, 91, 91, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 6, 6, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67
	                  DB          67, 67, 6, 6, 6, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67
	                  DB          67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 91, 91, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66
	                  DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42
	                  DB          42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 6, 6, 6, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 6, 6, 6, 42, 42, 42, 6, 67
	                  DB          67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 114, 91, 91, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42, 6, 67, 67, 67, 67, 67, 67, 67, 6, 42, 42
	                  DB          42, 42, 6, 6, 6, 31, 31, 31, 31, 31, 31, 6, 6, 6, 31, 31, 31, 31, 31, 31, 6, 6, 6, 42, 42, 42, 6, 31, 31, 31, 31, 31, 31, 31, 31, 6, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 31, 31, 31, 31, 31, 31, 31, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 66, 66
	                  DB          66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 91, 91, 114, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 91, 91, 91, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 91, 91, 91, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 6, 67, 67, 31, 31, 31, 31, 67, 6, 42, 42, 6, 67, 67, 31, 31, 31, 31, 67, 6, 42, 42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 31, 6, 6
	                  DB          6, 6, 6, 31, 31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 31
	                  DB          31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                  DB          91, 91, 91, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 91, 91, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 91, 91, 91
	                  DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 67, 31, 31, 31, 31
	                  DB          31, 31, 42, 42, 42, 6, 31, 31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 42, 42
	                  DB          42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 31, 31, 31, 31, 31, 31, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 114, 91, 91, 114, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                  DB          91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31
	                  DB          31, 42, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 42, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 114, 91, 91, 114, 42, 42
	                  DB          42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31
	                  DB          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91
	                  DB          91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 114, 91, 91, 114, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31
	                  DB          31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                  DB          31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 114, 91, 91, 114, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                  DB          91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31
	                  DB          31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 114, 91
	                  DB          91, 114, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 91, 91, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 114, 91, 91, 6, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 6, 91, 91, 114, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43
	                  DB          43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 42, 114, 91, 91, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 91, 91, 6, 42, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 91, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 91, 91, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31
	                  DB          31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 42, 6, 91, 91, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31
	                  DB          31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 91, 91, 6, 42, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 91, 91, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31
	                  DB          31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 91, 0, 91, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 31, 31, 31, 31, 31, 31, 31, 42, 43, 43, 42, 31, 31
	                  DB          31, 31, 31, 31, 31, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 91, 0
	                  DB          0, 91, 66, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 66, 91, 0, 0, 0, 91, 42, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 91, 0, 0, 0, 0, 91, 66, 66, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 66
	                  DB          66, 91, 0, 0, 0, 0, 0, 91, 91, 66, 66, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                  DB          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 66, 66, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 91, 91, 66
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                  DB          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 66, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                  DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                  DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                  DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                  DB          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
	                  DB          91, 0, 0, 0, 0, 0, 0, 0


	; For Bullets
	Bullet            DB          0, 0, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 0, 68, 68, 68, 68, 68, 68
	BulletXSize       equ         8
	BulletYSize       equ         4
	BulletSpeed       DB          1
	MAXBULLET         equ         100
	BulletOffset      DW          200 DUP(0)
	BulletDirection   DB          100 DUP(0)
	MAXBULLETLEFT     equ         631
	MAXBULLETRIGHT    equ         2



	
	


	

	
	
	
	;//////////////////////////////////////Art/////////////////////////////////////////////
.code
MAIN PROC FAR
	                              mov              AX,@data                     	;initializing the data segemnt
	                              mov              DS,AX
	;///////////////////////////////First Screen////////////////////////////////////

	firstScreenLoop:              
	                              mov              ax, graphicsMode             	; enter graphicsMode
	                              mov              bx, 0100h                    	; BX = 81FFh
	                              int              10h

	                              mov              ah,09h
	                              lea              dx, firstScreen              	; show the first screen
	                              int              21h

	                              mov              ah,09h
	                              lea              dx, getName                  	; ask for player's name
	                              int              21h

	getNameLoop:                  lea              si, playerName1              	; get player's name
	                              mov              ah, 0Ah
	                              mov              dx, si
	                              int              21h

	; TODO check of the name is valid
	; mov bp, offset playerName1 + 1
	; or           [bp], 0
	; jnz            mainMenuLoop

	; mov            ah,09h
	; lea            dx, enterValidName      	; ask for a valid player's name
	; int            21h
	; jmp            getNameLoop
	;///////////////////////////////Main Menu////////////////////////////////////
	mainMenuLoop:                 
	                              clearWholeScreen
	                              mov              ax, graphicsMode             	; enter graphicsMode
	                              mov              bx, 0100h                    	; BX = 81FFh
	                              int              10h
	;call             background
	                              call             drawgamebtn
	                              call             drawchatbtn
	                              call             drawexitbtn
	                              call             drawArrows

	CheckInMainMenu:              
	                              mov              ah,0                         	;  ah:al = scan code: ASCII code
	                              int              16h

	                              cmp              ah, 48h                      	; up arrow
	                              jne              downArrow
	                              cmp              arrowoffsetY, arrowAtgame
	                              je               CheckInMainMenu
	                              call             eraseArrows
	                              mov              bx, arrowStep
	                              SUB              arrowoffsetY, bx
	                              call             drawArrows
	                              jmp              CheckInMainMenu

	downArrow:                    cmp              ah, 50h                      	; down arrow
	                              jne              enterbtn
	                              cmp              arrowoffsetY, arrowAtExit
	                              je               CheckInMainMenu
	                              call             eraseArrows

	                              mov              bx, arrowStep
	                              ADD              arrowoffsetY, bx
	                              call             drawArrows

	                              jmp              CheckInMainMenu

	enterbtn:                     cmp              ah, 01ch                     	; enter
	                              jne              CheckInMainMenu              	; added to prevent other buttons from doing enter's action
	;cmp              arrowoffsetY, arrowAtExit
	;je               exitProg
	                              cmp              arrowoffsetY, arrowAtChat
	;je gameLoop
	                              cmp              arrowoffsetY, arrowAtgame
	                              je               gameLoop
	                              jmp              CheckInMainMenu
	;///////////////////////////////Game Loop////////////////////////////////////
	gameLoop:                                                                   	;NOTE:since we are using words, we will use the value '2' to traverse pixels
	;//////////////////////////////initializations////////////////////////////////////
	                              mov              ax, graphicsMode
	                              mov              bx, 0100h
	                              int              10h
	                              call             DrawLayout
	                              call             Drawship
	                              call             Drawship2                    	;this subroutine is responsible for drawing the ship using its cooardinates
	;////////////////////////////Interacting with the user////////////////////////////
	CHECK:                        
	                              mov              BX, 0
	                              LEA              SI, BulletDirection
	                              LEA              DI, BulletOffset
	CHECKBULLETS:                 mov              ah,0
	                              mov              Al, [SI]
	                              CMP              Al, 0
	                              JE               ContinueBullet
	                              CALL             EraseBullet
	                              MOV              dx, MAXBULLETRIGHT
	                              CMP              [DI], dx
	                              JLE              StopBullet
	                              CMP              [DI], MAXBULLETLEFT
	                              JGE              StopBullet
	                              CALL             Bullet_Offset
	                              CALL             DrawBullet
	                              jmp              ContinueBullet
	StopBullet:                   mov              dl, 0
	                              mov              [SI], dl
	ContinueBullet:               INC              BX
	                              ADD              SI, 1
	                              ADD              DI, 4
	                              CMP              BX, MAXBULLET
	                              JE               ContinueBullets
	                              JMP              CHECKBULLETS

	ContinueBullets:              
	                              delay            65000

	                              mov              ah,1
	                              int              16h
	                              jz               CHECK                        	; check if there is any input
	                              cmp              ah, 11H
	                              jz               Ship1
	                              cmp              ah, 1FH
	                              jz               Ship1
	                              cmp              ah, 1EH
	                              jz               Ship1
	                              cmp              ah, 20H
	                              jz               Ship1
	                              cmp              ah, 21H
	                              jz               Ship1
                        

	                              cmp              ah, 48H
	                              jz               Ship2
	                              cmp              ah, 50H
	                              jz               Ship2
	                              cmp              ah, 4BH
	                              jz               Ship2
	                              cmp              ah, 4DH
	                              jz               Ship2
	                              cmp              ah, 1CH
	                              jz               Ship2
                        
	Ship1:                        
	                              call             GENERATE_OFFSET
	                              jmp              gameLoop
	Ship2:                        
	                              CALL             GENERATE_OFFSET2             	; TO GENERATE THE new OFFSET OF THE ship
	                              jmp              gameLoop
	;/////////////////////////////////////////////////////////////////////////////////
	;jmp              gameLoop
	;///////////////////////////////Exit Program/////////////////////////////////////
	exitProg:                     
	                              clearWholeScreen
	                              mov              ah,09h
	                              lea              dx, byebye                   	; show the bye bye screen
	                              int              21h

	                              mov              ah,4ch
	                              int              21h
MAIN ENDP
	;//////////////////////////////Procedures//////////////////////////////////////////////
GENERATE_OFFSET PROC near

	                              cmp              al,1Bh                       	; ESC
	                              jz               exitProg
	                              cmp              ah, 21H
	                              jz               DontErase
	                              call             Eraseship                    	; get the pressed key from the user
	DontErase:                    MOVEMENT         11H, 1FH, 1EH, 20H, 21H


	ReadKey:                      
	                              call             Drawship

	                              mov              ah,0                         	;wait for a key to be pressed and put it in ah, ah:al = scan code: ASCII code
	                              int              16h

	                              mov              cx, 0                        	; initialize cx to use it to iterate over the shipSize
	                              jmp              CHECK


	ReadFire:                     
	;call             DrawBullet

	                              mov              ah,0                         	;wait for a key to be pressed and put it in ah, ah:al = scan code: ASCII code
	                              int              16h

	                              mov              cx, 0                        	; initialize cx to use it to iterate over the Bullet Size
	                              jmp              CHECK
	;///////////////////////////////////////////////////////////////////////////////////////
	MoveUp:                       
	;checking for boundaries
	;moveUP
	                              mov              bx, offsetY
	                              cmp              bx, minY
	                              jna              ReadKey
	                              sub              bx, planeSpeed
	                              mov              DI, offset offsetY
	                              mov              [DI], bx

	                              jmp              ReadKey

	MoveDown:                     
	;checking for boundaries
	;MoveDown
	                              mov              bx, offsetY
	                              mov              cx, bx
	                              add              cx, sizeY
	                              cmp              cx, maxY
	                              jnb              ReadKey
	                              add              bx,planeSpeed
	                              mov              DI, offset offsetY
	                              mov              [DI], bx

	                              jmp              ReadKey

	MoveLeft:                     
	;checking for boundaries
	                              mov              bx, offsetX
	                              cmp              bx, minX
	                              jna              ReadKey
	                              sub              bx, planeSpeed
	                              mov              DI, offset offsetX
	                              mov              [DI], bx
	          
	                              jmp              ReadKey

	MoveRight:                    
	;checking for boundaries
	                              mov              bx, offsetX
	                              mov              cx, bx
	                              add              cx, sizeX
	                              cmp              cx, maxX
	                              jnb              ReadKey
	                              add              bx, planeSpeed
	                              mov              DI, offset offsetX
	                              mov              [DI], bx

	                              jmp              ReadKey


	Fire:                         
	                              mov              bx, 0
	                              LEA              SI, BulletDirection
	findEmptyBullet:              MOV              DL, 0
	                              CMP              [SI], DL
	                              JE               found
	                              CMP              BX, MAXBULLET
	                              JE               notFound
	                              INC              BX
	                              INC              SI
	                              JMP              findEmptyBullet
    
	notFound:                     ret

	found:                        mov              dl, 1
	                              mov              [SI], dl                     	; For Right Direction
	                              LEA              DI, BulletOffset
	                              ADD              DI, BX
	                              ADD              DI, BX
	                              ADD              DI, BX
	                              ADD              DI, BX

	; For x
                    
	                              mov              dX, offsetX
	                              add              DX, sizeX
	                              INC              DX
	                              MOV              [DI], DX
                
	; For y

	                              mov              dx, sizeY
	                              sub              dx, BulletYSize

	; ; These steps for division
	; ; First push ax to stack as we need it after that
	                              push             ax

	; ; Divsion Process
	                              mov              ax, dx
	                              mov              cl, 2
	                              div              cl
	                              mov              dx, ax

	; ; retrive the value of reg ax
	                              pop              ax
	                              add              dx, offsetY

	                              mov              [DI] + 2, dx
	                              jmp              ReadFire

	                      
	                              ret

GENERATE_OFFSET ENDP

GENERATE_OFFSET2 PROC near

	;cmp              al,1Bh            	; ESC
	;jz               exitProg
	;call             Eraseship2         	; get the pressed key from the user
	;MOVEMENT         11H, 1FH, 1EH, 20H
	                              mov              cx, 0
	                              cmp              ah, 1CH
	                              jz               DontErase2
	                              call             Eraseship2                   	; get the pressed key from the user
	DontErase2:                   

	                              cmp              ah,48H
	                              jz               MoveUp2

	                              cmp              ah,50H
	                              jz               MoveDown2

	                              cmp              ah,4BH
	                              jz               MoveLeft2

	                              cmp              ah,4DH
	                              jz               MoveRight2
	                              cmp              ah,1CH
	                              jz               FIRE2



	ReadKey2:                     
	                              call             Drawship2

	                              mov              ah,0                         	;wait for a key to be pressed and put it in ah, ah:al = scan code: ASCII code
	                              int              16h

	                              mov              cx, 0                        	; initialize cx to use it to iterate over the shipSize
	                              jmp              CHECK
	;///////////////////////////////////////////////////////////////////////////////////////
	MoveUp2:                      
	;checking for boundaries
	;moveUP
	                              mov              bx, offsetY2
	                              cmp              bx, minY2
	                              jna              ReadKey2
	                              sub              bx, planeSpeed
	                              mov              DI, offset offsetY2
	                              mov              [DI], bx

	                              jmp              ReadKey2

	MoveDown2:                    
	;checking for boundaries
	;MoveDown
	                              mov              bx, offsetY2
	                              mov              cx, bx
	                              add              cx, sizeY
	                              cmp              cx, maxY2
	                              jnb              ReadKey2
	                              add              bx,planeSpeed
	                              mov              DI, offset offsetY2
	                              mov              [DI], bx

	                              jmp              ReadKey2

	MoveLeft2:                    
	;checking for boundaries
	                              mov              bx, offsetX2
	                              cmp              bx, minX2
	                              jna              ReadKey2
	                              sub              bx, planeSpeed
	                              mov              DI, offset offsetX2
	                              mov              [DI], bx
	          
	                              jmp              ReadKey2

	MoveRight2:                   
	;checking for boundaries
	                              mov              bx, offsetX2
	                              mov              cx, bx
	                              add              cx, sizeX
	                              cmp              cx, maxX2
	                              jnb              ReadKey2
	                              add              bx, planeSpeed
	                              mov              DI, offset offsetX2
	                              mov              [DI], bx

	                              jmp              ReadKey2
	                              ret
	Fire2:                        
	                              mov              bx, 0
	                              LEA              SI, BulletDirection
	findEmptyBullet2:             MOV              DL, 0
	                              CMP              [SI], DL
	                              JE               found2
	                              CMP              BX, MAXBULLET
	                              JE               notFound2
	                              INC              BX
	                              INC              SI
	                              JMP              findEmptyBullet2
    
	notFound2:                    ret

	found2:                       mov              dl, 2
	                              mov              [SI], dl                     	; For Right Direction
	                              LEA              DI, BulletOffset
	                              ADD              DI, BX
	                              ADD              DI, BX
	                              ADD              DI, BX
	                              ADD              DI, BX

	; For x
                    
	                              mov              dX, offsetX2
	                              sub              dx, BulletXSize
	                              INC              DX
	                              MOV              [DI], DX
                
	; For y

	                              mov              dx, sizeY
	                              sub              dx, BulletYSize

	; ; These steps for division
	; ; First push ax to stack as we need it after that
	                              push             ax

	; ; Divsion Process
	                              mov              ax, dx
	                              mov              cl, 2
	                              div              cl
	                              mov              dx, ax

	; ; retrive the value of reg ax
	                              pop              ax
	                              add              dx, offsetY2

	                              mov              [DI] + 2, dx
	                              jmp              ReadFire

	                      
GENERATE_OFFSET2 ENDP


Drawship PROC	near
	; initialize containers
	                              mov              SI, offset shipC
	                              mov              cx, SizeX                    	;Column X
	                              mov              dx, SizeY                    	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	Drawit:                       
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               back
	                              add              cx, offsetX
	                              add              dx, offsety
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, offsetX
	                              sub              dx, offsety

	back:                         
	                              inc              SI
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              Drawit                       	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, SizeX                    	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               alldrawn                     	;  both x and y reached 00 so finish drawing
	                              jmp              Drawit
	alldrawn:                     ret
Drawship ENDP
Eraseship PROC near
	; initialize containers
	                              mov              SI, offset shipC             	;shipY is (shipX index + size * 2) so we can use Si for both
	                              mov              cx, SizeX                    	;Column X
	                              mov              dx, SizeY                    	;Row Y
	                              push             ax
	                              mov              ah, 0ch                      	;Draw Pixel Command
	                              mov              al, 0h                       	;to be replaced with background
	
	Drawit2:                      
	                              mov              bl, [SI]                     	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               back2
	                              add              cx, offsetX
	                              add              dx, offsety
	                              int              10h                          	;  draw the pixel
	                              sub              cx, offsetX
	                              sub              dx, offsety

	back2:                        
	                              inc              SI
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              Drawit2                      	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, SizeX                    	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               alldrawn2                    	;  both x and y reached 00 so finish drawing
	                              jmp              Drawit2
	alldrawn2:                    pop              ax
	                              ret
Eraseship ENDP



Drawship2 PROC	near
	; initialize containers
	                              mov              SI, offset shipC
	                              mov              cx, 0                        	;Column X
	                              mov              dx, SizeY                    	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	Drawit12:                     
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               back12
	                              add              cx, offsetX2
	                              add              dx, offsety2
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, offsetX2
	                              sub              dx, offsety2

	back12:                       
	                              inc              SI
	                              INC              Cx                           	;  loop iteration in x direction
	                              CMP              CX, SizeX
	                              JNZ              Drawit12                     	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 0                        	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               alldrawn12                   	;  both x and y reached 00 so finish drawing
	                              jmp              Drawit12
	alldrawn12:                   ret
Drawship2 ENDP


Eraseship2 PROC near
	; initialize containers
	                              mov              SI, offset shipC             	;shipY is (shipX index + size * 2) so we can use Si for both
	                              mov              cx, 0                        	;Column X
	                              mov              dx, SizeY                    	;Row Y
	                              push             ax
	                              mov              ah, 0ch                      	;Draw Pixel Command
	                              mov              al, 0h                       	;to be replaced with background
	
	Drawit22:                     
	                              mov              bl, [SI]                     	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               back22
	                              add              cx, offsetX2
	                              add              dx, offsety2
	                              int              10h                          	;  draw the pixel
	                              sub              cx, offsetX2
	                              sub              dx, offsety2

	back22:                       
	                              inc              SI
	                              INC              Cx                           	;  loop iteration in x direction
	                              CMP              CX, SizeX
	                              JNZ              Drawit22                     	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 0                        	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               alldrawn22                   	;  both x and y reached 00 so finish drawing
	                              jmp              Drawit22
	alldrawn22:                   pop              ax
	                              ret
Eraseship2 ENDP


DrawBullet PROC near
	; initialize containers
	                              push             SI
	                              push             BX
	                              push             AX
	                              mov              AL, 2
	                              CMP              [SI], AL
	                              JZ               REVERSE
	                              mov              SI, offset Bullet
	                              mov              cx, BulletXSize              	;Column X
                        
	                              mov              dx, BulletYSize              	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	BulletDrawit:                 
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               Bulletback
	                              add              cx, [DI]
	                              add              dx, [DI] + 2
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, [DI]
	                              sub              dx, [DI] + 2

	Bulletback:                   
	                              inc              SI
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              BulletDrawit                 	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, BulletXSize              	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               Bulletalldrawn               	;  both x and y reached 00 so finish drawing
	                              jmp              BulletDrawit

	REVERSE:                      
	                              mov              SI, offset Bullet
	                              mov              cx, 0                        	;Column X
                        
	                              mov              dx, BulletYSize              	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	BulletDrawit2:                
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               Bulletback2
	                              add              cx, [DI]
	                              add              dx, [DI] + 2
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, [DI]
	                              sub              dx, [DI] + 2

	Bulletback2:                  
	                              inc              SI
	                              inc              Cx
	                              CMP              CX, BulletXSize              	;  loop iteration in x direction
	                              JNZ              BulletDrawit2                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 0                        	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               Bulletalldrawn               	;  both x and y reached 00 so finish drawing
	                              jmp              BulletDrawit2

	Bulletalldrawn:               pop              AX
	                              POP              BX
	                              POP              SI
	                              ret
DrawBullet ENDP


EraseBullet PROC near
	; initialize containers
	                              PUSH             SI
	                              PUSH             BX
	                              push             ax
	                              MOV              AL, 2
	                              CMP              [SI], AL
	                              JZ               REVERSE2


	                              mov              SI, offset Bullet            	;shipY is (shipX index + size * 2) so we can use Si for both
	                              mov              Cx, BulletXSize              	;Column X
	                              mov              dx, BulletYSize              	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	                              mov              al, 0h                       	;to be replaced with background
	
	Drawit2Bullet:                
	                              mov              bl, [SI]                     	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               back2Bullet
	                              add              cx, [DI]
	                              add              dx, [DI] + 2
	                              int              10h                          	;  draw the pixel
	                              sub              cx, [DI]
	                              sub              dx, [DI] + 2

	back2Bullet:                  
	                              inc              SI
	                              DEC              cx                           	;  loop iteration in x direction
	                              JNZ              Drawit2Bullet                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              cx, BulletXSize              	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              dx                           	;  loop iteration in y direction
	                              JZ               alldrawn2Bullet              	;  both x and y reached 00 so finish drawing
	                              jmp              Drawit2Bullet


	REVERSE2:                     mov              Cx, 0                        	;Column X
	                              mov              dx, BulletYSize              	;Row Y
	                              mov              SI, offset Bullet            	;shipY is (shipX index + size * 2) so we can use Si for both

	                              mov              ah, 0ch                      	;Draw Pixel Command
	                              mov              al, 0h                       	;to be replaced with background
	
	Drawit2BulletREV:             
	                              mov              bl, [SI]                     	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               back2BulletREV
	                              add              cx, [DI]
	                              add              dx, [DI] + 2
	                              int              10h                          	;  draw the pixel
	                              sub              cx, [DI]
	                              sub              dx, [DI] + 2

	back2BulletREV:               
	                              inc              SI
	                              inc              cx                           	;  loop iteration in x direction
	                              cmp              cx, BulletXSize
	                              JNZ              Drawit2BulletREV             	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              cx, 0                        	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              dx                           	;  loop iteration in y direction
	                              JZ               alldrawn2Bullet              	;  both x and y reached 00 so finish drawing
	                              jmp              Drawit2BulletREV
	alldrawn2Bullet:              
	                              pop              ax
	                              POP              BX
	                              POP              SI
	                              ret
EraseBullet ENDP

Bullet_Offset PROC near
                       
	                              push             ax
	                              push             bx
	                              mov              cl, BulletSpeed
	                              mov              ch, 0
	                              mov              dl, 0
	                              cmp              [SI], dl
	                              JZ               Bullete_Offset_ret
	                              mov              dl, 1
	                              cmp              [SI], dl
	                              JZ               INCREASE_SPEED
	                              sub              [DI], cx
	                              jmp              Bullete_Offset_ret
	INCREASE_SPEED:               add              [DI], cx
	Bullete_Offset_ret:           pop              BX
	                              pop              ax
	                              ret
Bullet_Offset ENDP

drawgamebtn PROC near
	; initialize containers
	                              mov              SI, offset gamebtn
	                              mov              cx, buttonSizeX              	;Column X
	                              mov              dx, buttonSizeY              	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	Drawitgamebtn:                
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               drawgamebtnBack
	                              add              cx, gamebtnOffsetX
	                              add              dx, gamebtnOffsetY
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, gamebtnOffsetX
	                              sub              dx, gamebtnOffsetY

	drawgamebtnBack:              
	                              inc              SI
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              Drawitgamebtn                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, buttonSizeX              	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               alldrawngamebtn              	;  both x and y reached 00 so finish drawing
	                              jmp              Drawitgamebtn
	alldrawngamebtn:              ret
drawgamebtn ENDP
drawchatbtn PROC near
	; initialize containers
	                              mov              SI, offset chatbtn
	                              mov              cx, buttonSizeX              	;Column X
	                              mov              dx, buttonSizeY              	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	Drawitchatbtn:                
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               backchatbtn
	                              add              cx, chatbtnOffsetX
	                              add              dx, chatbtnOffsetY
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, chatbtnOffsetX
	                              sub              dx, chatbtnOffsetY

	backchatbtn:                  
	                              inc              SI
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              Drawitchatbtn                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, buttonSizeX              	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               alldrawnchatbtn              	;  both x and y reached 00 so finish drawing
	                              jmp              Drawitchatbtn
	alldrawnchatbtn:              ret
drawchatbtn ENDP
background PROC near
	                              MOV              CX, 640                      	;set the width (X) up to ff, dont forget to change this number in the loop
	                              MOV              DX, 400                      	;set the hieght (Y) up to AA
	                              jmp              Start                        	;Avoid drawing before the calculations
	Drawitbg:                     
	                              MOV              AH,0Ch                       	;set the configuration to writing a pixel
	                              push             bx
	; next 6 lines to make the pattern darker
	                              cmp              bl, 32
	                              jb               DontDarken
	                              cmp              bl, 175
	                              ja               DontDarken
	                              add              bl, 72
	DontDarken:                   
	                              MOV              AL, bl                       	;choose white as color
	                              MOV              BH,00h                       	;set the page number
	                              pop              bx
	                              INT              10h                          	;execute the configuration
	Start:                        
	                              mov              AX, 0                        	;  |
	                              mov              AL, DL                       	;  |  > Multuply DL*Dl and Store in AX then BX
	                              Mul              DL                           	;  |
	                              mov              bx, AX                       	;  |
	                              mov              AL, CL                       	;  \
	                              Mul              CL                           	;  \   > Multuply CL*Cl and Store in AX


	;/////////////THIS LINE CHOOSES THE PATTERN TO BE DRAWN\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	                              Xor              bx, AX                       	;  Relation between DL^2 and CL^2, Sub : X2-Y2 = Hyberbolic Patterns, Add: X2+Y2 = Circular, OR/AND: Rectangular, Xor: Diagonal
        
        
	                              DEC              CX                           	;  loop iteration in x direction
	                              JNZ              TRY                          	;  check if we can draw current x and y and excape the y iteration
	                              mov              CX, 640                      	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               ENDING                       	;  both x and y reached 00 so end program
	TRY:                          Sub              BX, 70E4h
	                              Jp               Drawitbg                     	;js for quarter circle, also parity produces patterns (in addition to formula pattern)
	                              jmp              Start                        	; loop
	ENDING:                       
	                              RET


background ENDP
drawexitbtn PROC near
	; initialize containers
	                              mov              SI, offset exitbtn
	                              mov              cx, buttonSizeX              	;Column X
	                              mov              dx, buttonSizeY              	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	Drawitexitbtn:                
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               backexitbtn
	                              add              cx, exitbtnOffsetX
	                              add              dx, exitbtnOffsetY
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, exitbtnOffsetX
	                              sub              dx, exitbtnOffsetY
	backexitbtn:                  
	                              inc              SI
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              Drawitexitbtn                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, buttonSizeX              	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               alldrawnexitbtn              	;  both x and y reached 00 so finish drawing
	                              jmp              Drawitexitbtn
	alldrawnexitbtn:              ret
drawexitbtn ENDP
drawArrows PROC near
	; initialize containers
	                              mov              SI, offset arrow
	                              mov              cx, arrowSizeX               	;Column X
	                              mov              dx, arrowSizeY               	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DrawitArrow:                  
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               backArrow
	                              add              cx, arrowOffset
	                              add              dx, arrowOffset + 2
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, arrowOffset
	                              sub              dx, arrowOffset + 2
	backArrow:                    
	                              inc              SI
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              DrawitArrow                  	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, arrowSizeX               	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               alldrawnArrow                	;  both x and y reached 00 so finish drawing
	                              jmp              DrawitArrow
	alldrawnArrow:                
	;///////////////////////////////
	; initialize containers
	                              mov              SI, offset arrow
	                              mov              cx, 0                        	;Column X
	                              mov              dx, arrowSizeY               	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DrawitR:                      
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               backR
	                              add              cx, arrowOffsetXRev
	                              add              dx, arrowOffsetY
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, arrowOffsetXRev
	                              sub              dx, arrowOffsetY

	backR:                        
	                              inc              SI
	                              INC              Cx                           	;  loop iteration in x direction
	                              CMP              CX, arrowSizeX
	                              JNZ              DrawitR                      	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 0                        	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               alldrawnR                    	;  both x and y reached 00 so finish drawing
	                              jmp              DrawitR
	alldrawnR:                    ret
drawArrows ENDP
eraseArrows PROC near
	; initialize containers
	                              mov              SI, offset arrow             	;shipY is (shipX index + size * 2) so we can use Si for both
	                              mov              cx, arrowSizeX               	;Column X
	                              mov              dx, arrowSizeY               	;Row Y
	                              push             ax
	                              mov              ah, 0ch                      	;Draw Pixel Command
	                              mov              al, 0h                       	;to be replaced with background
	
	eraseArrowDrawit2:            
	                              mov              bl, [SI]                     	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               eraseArrowback2
	                              add              cx, arrowoffset
	                              add              dx, arrowoffset + 2
	                              int              10h                          	;  draw the pixel
	                              sub              cx, arrowoffset
	                              sub              dx, arrowoffset + 2

	eraseArrowback2:              
	                              inc              SI
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              eraseArrowDrawit2            	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, arrowSizeX               	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               eraseArrowalldrawn2          	;  both x and y reached 00 so finish drawing
	                              jmp              eraseArrowDrawit2
	eraseArrowalldrawn2:          pop              ax
	;/////////////////////////////////////////////////////////////////////////////////////////////
	; initialize containers
	                              mov              SI, offset arrow             	;shipY is (shipX index + size * 2) so we can use Si for both
	                              mov              cx, 0                        	;Column X
	                              mov              dx, arrowSizeY               	;Row Y
	                              push             ax
	                              mov              ah, 0ch                      	;Draw Pixel Command
	                              mov              al, 0h                       	;to be replaced with background
	
	Drawit2R:                     
	                              mov              bl, [SI]                     	;  use color from array color for testing
	                              and              bl, bl
	                              JZ               back2R
	                              add              cx, arrowoffsetXRev
	                              add              dx, arrowoffsetY
	                              int              10h                          	;  draw the pixel
	                              sub              cx, arrowoffsetXRev
	                              sub              dx, arrowoffsetY

	back2R:                       
	                              inc              SI
	                              INC              Cx                           	;  loop iteration in x direction
	                              CMP              CX, arrowSizeX
	                              JNZ              Drawit2R                     	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 0                        	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               alldrawn2R                   	;  both x and y reached 00 so finish drawing
	                              jmp              Drawit2R
	alldrawn2R:                   pop              ax
	                              ret
eraseArrows ENDP
DrawLayout PROC near
	;///////////////////////////////////UPPER_BAR\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	                              mov              cx, maxX2                    	;Column X
	                              mov              dx, minY                     	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_REC1:                    
	                              mov              al, 099h                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	BACK_REC1:                    
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              DRAW_REC1                    	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, maxX2                    	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               ALL_DRAWN_REC1               	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_REC1
	ALL_DRAWN_REC1:               
	                              mov              cx, 559                      	;Column X
	                              mov              dx, minY                     	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_REC2:                    
	                              mov              al, 095h                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	BACK_REC2:                    
	                              DEC              Cx                           	;  loop iteration in x direction
	                              cmp              CX, 79
	                              JNZ              DRAW_REC2                    	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 559                      	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               ALL_DRAWN_REC2               	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_REC2
	ALL_DRAWN_REC2:               


	                              mov              cx, 639                      	;Column X
	                              mov              dx, 100                      	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_V1Border:                
	                              mov              al, 0h                       	;  use color from array color for testing
	                              cmp              cx, 633
	                              jz               DRAWwithblack_V1Border
	                              cmp              cx, 634
	                              jz               DRAWwithblack_V1Border
	                              cmp              cx, 639
	                              jz               DRAWwithblack_V1Border
	                              cmp              cx, 638
	                              jz               DRAWwithblack_V1Border
	                              mov              al, 3ah
	                              cmp              cx, 636
	                              jz               DRAWwithblack_V1Border
	                              mov              al, 05h                      	;  use color from array color for testing
	DRAWwithblack_V1Border:       int              10h                          	;  draw the pixel
	BACK_V1Border:                
	                              DEC              Cx                           	;  loop iteration in x direction
	                              cmp              CX, 632
	                              JNZ              DRAW_V1Border                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 639                      	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              cmp              dx, 0
	                              JZ               ALL_DRAWN_V1Border           	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_V1Border
	ALL_DRAWN_V1Border:           

	                              mov              cx, 559                      	;Column X
	                              mov              dx, 100                      	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_V2Border:                
	                              mov              al, 0h                       	;  use color from array color for testing
	                              cmp              cx, 553
	                              jz               DRAWwithblack_V2Border
	                              cmp              cx, 554
	                              jz               DRAWwithblack_V2Border
	                              cmp              cx, 559
	                              jz               DRAWwithblack_V2Border
	                              cmp              cx, 558
	                              jz               DRAWwithblack_V2Border
	                              mov              al, 65h
	                              cmp              cx, 556
	                              jz               DRAWwithblack_V2Border
	                              mov              al, 35h                      	;  use color from array color for testing
	DRAWwithblack_V2Border:       int              10h                          	;  draw the pixel
	BACK_V2Border:                
	                              DEC              Cx                           	;  loop iteration in x direction
	                              cmp              CX, 552
	                              JNZ              DRAW_V2Border                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 559                      	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              cmp              dx, 0
	                              JZ               ALL_DRAWN_V2Border           	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_V2Border
	ALL_DRAWN_V2Border:           

	                              mov              cx, 86                       	;Column X
	                              mov              dx, 100                      	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_V3Border:                
	                              mov              al, 0h                       	;  use color from array color for testing
	                              cmp              cx, 80
	                              jz               DRAWwithblack_V3Border
	                              cmp              cx, 81
	                              jz               DRAWwithblack_V3Border
	                              cmp              cx, 86
	                              jz               DRAWwithblack_V3Border
	                              cmp              cx, 85
	                              jz               DRAWwithblack_V3Border
	                              mov              al, 65h
	                              cmp              cx, 83
	                              jz               DRAWwithblack_V3Border
	                              mov              al, 35h                      	;  use color from array color for testing
	DRAWwithblack_V3Border:       int              10h                          	;  draw the pixel
	BACK_V3Border:                
	                              DEC              Cx                           	;  loop iteration in x direction
	                              cmp              CX, 79
	                              JNZ              DRAW_V3Border                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 86                       	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              cmp              dx, 0
	                              JZ               ALL_DRAWN_V3Border           	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_V3Border
	ALL_DRAWN_V3Border:           

	                              mov              cx, 6                        	;Column X
	                              mov              dx, 100                      	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_V4Border:                
	                              mov              al, 0h                       	;  use color from array color for testing
	                              cmp              cx, 0
	                              jz               DRAWwithblack_V4Border
	                              cmp              cx, 1
	                              jz               DRAWwithblack_V4Border
	                              cmp              cx, 5
	                              jz               DRAWwithblack_V4Border
	                              cmp              cx, 6
	                              jz               DRAWwithblack_V4Border
	                              mov              al, 3ah
	                              cmp              cx, 3
	                              jz               DRAWwithblack_V4Border
	                              mov              al, 05h                      	;  use color from array color for testing
	DRAWwithblack_V4Border:       int              10h                          	;  draw the pixel
	BACK_V4Border:                
	                              DEC              Cx                           	;  loop iteration in x direction
	                              cmp              CX, 0FFFFH
	                              JNZ              DRAW_V4Border                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 6                        	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              cmp              dx, 0
	                              JZ               ALL_DRAWN_V4Border           	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_V4Border
	ALL_DRAWN_V4Border:           



	                              mov              cx, 640                      	;Column X
	                              mov              dx, 7                        	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_UpBorder:                
	                              mov              al, 0h                       	;  use color from array color for testing
	                              cmp              dx, 1
	                              jz               DRAWwithblack_UpBorder
	                              cmp              dx, 2
	                              jz               DRAWwithblack_UpBorder
	                              cmp              dx, 6
	                              jz               DRAWwithblack_UpBorder
	                              cmp              dx, 7
	                              jz               DRAWwithblack_UpBorder
	                              mov              al, 3ah
	                              cmp              dx, 4
	                              jz               DRAWwithblack_UpBorder
	                              mov              al, 05h                      	;  use color from array color for testing
	DRAWwithblack_UpBorder:       int              10h                          	;  draw the pixel
	BACK_UpBorder:                
	                              DEC              Cx                           	;  loop iteration in x direction
	                              cmp              CX, 0
	                              JNZ              DRAW_UpBorder                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 640                      	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               ALL_DRAWN_UpBorder           	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_UpBorder
	ALL_DRAWN_UpBorder:           


	                              mov              cx, 640                      	;Column X
	                              mov              dx, 100                      	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_LowerBorder:             
	                              mov              al, 0h                       	;  use color from array color for testing
	                              cmp              dx, 94
	                              jz               DRAWwithblack_LowerBorder
	                              cmp              dx, 95
	                              jz               DRAWwithblack_LowerBorder
	                              cmp              dx, 100
	                              jz               DRAWwithblack_LowerBorder
	                              cmp              dx, 99
	                              jz               DRAWwithblack_LowerBorder
	                              mov              al, 3ah
	                              cmp              dx, 97
	                              jz               DRAWwithblack_LowerBorder
	                              mov              al, 05h                      	;  use color from array color for testing
	DRAWwithblack_LowerBorder:    int              10h                          	;  draw the pixel
	BACK_LowerBorder:             
	                              DEC              Cx                           	;  loop iteration in x direction
	                              cmp              CX, 0
	                              JNZ              DRAW_LowerBorder             	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 640                      	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              cmp              dx, 93
	                              JZ               ALL_DRAWN_LowerBorder        	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_LowerBorder
	ALL_DRAWN_LowerBorder:        


	                              mov              cx, 559                      	;Column X
	                              mov              dx, 7                        	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_UpBorderOVER:            
	                              mov              al, 0h                       	;  use color from array color for testing
	                              cmp              dx, 1
	                              jz               DRAWwithblack_UpBorderOVER
	                              cmp              dx, 2
	                              jz               DRAWwithblack_UpBorderOVER
	                              cmp              dx, 6
	                              jz               DRAWwithblack_UpBorderOVER
	                              cmp              dx, 7
	                              jz               DRAWwithblack_UpBorderOVER
	                              mov              al, 65h
	                              cmp              dx, 4
	                              jz               DRAWwithblack_UpBorderOVER
	                              mov              al, 35h                      	;  use color from array color for testing
	DRAWwithblack_UpBorderOVER:   int              10h                          	;  draw the pixel
	BACK_UpBorderOVER:            
	                              DEC              Cx                           	;  loop iteration in x direction
	                              cmp              CX, 79
	                              JNZ              DRAW_UpBorderOVER            	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 559                      	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               ALL_DRAWN_UpBorderOVER       	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_UpBorderOVER
	ALL_DRAWN_UpBorderOVER:       


	                              mov              cx, 559                      	;Column X
	                              mov              dx, 100                      	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_LowerBorderOVER:         
	                              mov              al, 0h                       	;  use color from array color for testing
	                              cmp              dx, 94
	                              jz               DRAWwithblack_LowerBorderOVER
	                              cmp              dx, 95
	                              jz               DRAWwithblack_LowerBorderOVER
	                              cmp              dx, 100
	                              jz               DRAWwithblack_LowerBorderOVER
	                              cmp              dx, 99
	                              jz               DRAWwithblack_LowerBorderOVER
	                              mov              al, 65h
	                              cmp              dx, 97
	                              jz               DRAWwithblack_LowerBorderOVER
	                              mov              al, 35h                      	;  use color from array color for testing
	DRAWwithblack_LowerBorderOVER:int              10h                          	;  draw the pixel
	BACK_LowerBorderOVER:         
	                              DEC              Cx                           	;  loop iteration in x direction
	                              cmp              CX, 79
	                              JNZ              DRAW_LowerBorderOVER         	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 559                      	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              cmp              dx, 93
	                              JZ               ALL_DRAWN_LowerBorderOVER    	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_LowerBorderOVER
	ALL_DRAWN_LowerBorderOVER:    


	;//////////////////////////////////DrawCharacter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



	                              mov              SI, offset CharacterC
	                              mov              cx, CharacterSizeX           	;Column X
	                              mov              dx, CharacterSizeY           	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_CHR1:                    
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               BACK_CHR1
	                              add              cx, CharacteroffsetX
	                              add              dx, CharacteroffsetY
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, CharacteroffsetX
	                              sub              dx, CharacteroffsetY         	;  draw the pixel
	BACK_CHR1:                    
	                              inc              SI
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              DRAW_CHR1                    	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, CharacterSizeX           	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               ALL_DRAWN_CHR1               	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_CHR1
	ALL_DRAWN_CHR1:               


	                              mov              SI, offset CharacterC
	                              mov              cx, 0                        	;Column X
	                              mov              dx, CharacterSizeY           	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_CHR2:                    
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               BACK_CHR2
	                              add              cx, CharacteroffsetX2
	                              add              dx, CharacteroffsetY
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, CharacteroffsetX2
	                              sub              dx, CharacteroffsetY         	;  draw the pixel
	BACK_CHR2:                    
	                              inc              SI
	                              inc              Cx                           	;  loop iteration in x direction
	                              cmp              Cx, CharacterSizeX
	                              JNZ              DRAW_CHR2                    	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, 0                        	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               ALL_DRAWN_CHR2               	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_CHR2
	ALL_DRAWN_CHR2:               

	                              mov              SI, offset NameBoxC
	                              mov              cx, NameBoxSizeX             	;Column X
	                              mov              dx, NameBoxSizeY             	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_NameBox1:                
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               BACK_NameBox1
	                              add              cx, 2
	                              add              dx, 66
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, 2
	                              sub              dx, 66                       	;  draw the pixel
	BACK_NameBox1:                
	                              inc              SI
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              DRAW_NameBox1                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, NameBoxSizeX             	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               ALL_DRAWN_NameBox1           	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_NameBox1
	ALL_DRAWN_NameBox1:           
     
	                              mov              SI, offset NameBoxC
	                              mov              cx, NameBoxSizeX             	;Column X
	                              mov              dx, NameBoxSizeY             	;Row Y
	                              mov              ah, 0ch                      	;Draw Pixel Command
	DRAW_NameBox2:                
	                              mov              bl, [SI]                     	;use color from array color for testing
	                              and              bl, bl
	                              JZ               BACK_NameBox2
	                              add              cx, 554
	                              add              dx, 66
	                              mov              al, [SI]                     	;  use color from array color for testing
	                              int              10h                          	;  draw the pixel
	                              sub              cx, 554
	                              sub              dx, 66                       	;  draw the pixel
	BACK_NameBox2:                
	                              inc              SI
	                              DEC              Cx                           	;  loop iteration in x direction
	                              JNZ              DRAW_NameBox2                	;  check if we can draw c urrent x and y and excape the y iteration
	                              mov              Cx, NameBoxSizeX             	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                              DEC              DX                           	;  loop iteration in y direction
	                              JZ               ALL_DRAWN_NameBox2           	;  both x and y reached 00 so finish drawing
	                              jmp              DRAW_NameBox2
	ALL_DRAWN_NameBox2:           
     

	                              ret
DrawLayout ENDP
		END MAIN

	;//////////////////////////////TODO//////////////////////////////////////////////
@comment

		TODO:
		2. null names -> mostafa
@
	;//////////////////////////////TODO//////////////////////////////////////////////
